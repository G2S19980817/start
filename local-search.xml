<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ma c</title>
    <link href="/2022/11/25/mac%E5%AE%89%E8%A3%85oh-my-zsh/"/>
    <url>/2022/11/25/mac%E5%AE%89%E8%A3%85oh-my-zsh/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1583934555852-537536e49071?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NjkzNjg4MjI&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Europeana on Unsplash"></p><blockquote><p>Argue for your limitations, and sure enough they’re yours.<br>— <cite>Richard Bach</cite></p></blockquote><p>常规的安装流程</p><h1 id="1、下载安装shell脚本"><a href="#1、下载安装shell脚本" class="headerlink" title="1、下载安装shell脚本"></a>1、下载安装shell脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><h1 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span><br></code></pre></td></tr></table></figure><h1 id="2、运行"><a href="#2、运行" class="headerlink" title="2、运行"></a>2、运行</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c ./install <br></code></pre></td></tr></table></figure><p>但问题有时候没有这样简单，可能出现如下问题</p><p>1、下载install.sh 出错：Failed to connect to raw.githubusercontent.com port 443: Connection refused<br>解决办法：手动复制后面链接到浏览器，你大概是可能看到这样一个网页，然后把这里面的内容复制到 install.sh脚本，然后执行这个脚本。</p><p>2、执行脚本的时候系统可能提示你权限不足 sh: ./install.sh: Permission denied<br>解决办法： 修改文本权限级别为 可读、可写、可执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 777 install.sh<br></code></pre></td></tr></table></figure><p>3、执行shell脚本你可能发现就卡在那里不动弹了（本质上应该是github上的一些内容被墙了。。）<br>解决办法： 修改install.sh 的内容,将地址换成gitee 的地址然后执行脚本<br>找到</p><p>将以下部分</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">REPO=<span class="hljs-variable">$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span><br>REMOTE=<span class="hljs-variable">$&#123;REMOTE:-https://github.com/<span class="hljs-variable">$&#123;REPO&#125;</span>.git&#125;</span><br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">REPO=<span class="hljs-variable">$&#123;REPO:-mirrors/oh-my-zsh&#125;</span><br>REMOTE=<span class="hljs-variable">$&#123;REMOTE:-https://gitee.com/<span class="hljs-variable">$&#123;REPO&#125;</span>.git&#125;</span><br></code></pre></td></tr></table></figure><p>4、mac 系统在10.7.3以后还可能出现这样一个问题bad interpreter: operation not permitted<br>解决办法：删除一个属性</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">xattr -rd com.apple.quarantine install.sh<br></code></pre></td></tr></table></figure><h3 id="1-更新"><a href="#1-更新" class="headerlink" title="1. 更新"></a>1. 更新</h3><ul><li>  禁用自动更新</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.zshrc<br>DISABLE_AUTO_UPDATE=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><ul><li>手动更新oh-my-zsh<br>  <code>upgrade_oh_my_zsh</code></li></ul><h3 id="2-卸载"><a href="#2-卸载" class="headerlink" title="2. 卸载"></a>2. 卸载</h3><p><code>uninstall_oh_my_zsh zsh</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>a=a+b与a+=b的区别</title>
    <link href="/2022/11/25/a=a+b%E4%B8%8Ea+=b%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/11/25/a=a+b%E4%B8%8Ea+=b%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1653057677005-808191686c3a?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NjkzNDgyMjU&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Axel Ruffini on Unsplash"></p><blockquote><p>Trust your hunches. They’re usually based on facts filed away just below the conscious level.<br>— <cite>Joyce Brothers</cite></p></blockquote><p>+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>; <span class="hljs-comment">//byte 的长度是 -128～127</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>b = a + b; <span class="hljs-comment">// error : cannot convert from int to byte</span><br>b += a; <span class="hljs-comment">// ok</span><br></code></pre></td></tr></table></figure><blockquote><p>(因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>tips</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java实现http请求之CloseableHttpClient</title>
    <link href="/2022/11/23/java%E5%AE%9E%E7%8E%B0http%E8%AF%B7%E6%B1%82%E4%B9%8BCloseableHttpClient/"/>
    <url>/2022/11/23/java%E5%AE%9E%E7%8E%B0http%E8%AF%B7%E6%B1%82%E4%B9%8BCloseableHttpClient/</url>
    
    <content type="html"><![CDATA[<h3 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--fastjson--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="请求实例："><a href="#请求实例：" class="headerlink" title="请求实例："></a>请求实例：</h3><h4 id="get请求："><a href="#get请求：" class="headerlink" title="get请求："></a>get请求：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doGet</span><span class="hljs-params">(String url, String token)</span> &#123;<br><br>        <span class="hljs-comment">//创建HttpClient对象</span><br><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClientBuilder.create().build();<br><br>        <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br><br>        <span class="hljs-comment">//api_gateway_auth_token自定义header头，用于token验证使用</span><br><br>        httpGet.addHeader(<span class="hljs-string">&quot;api_gateway_auth_token&quot;</span>,tokenString);<br><br>        httpGet.addHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<br><br>            <span class="hljs-keyword">if</span> (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;<br><br>                <span class="hljs-comment">//返回json格式</span><br><br>                <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity());<br><br>                <span class="hljs-keyword">return</span> res;<br><br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><br>            e.printStackTrace();<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="post请求："><a href="#post请求：" class="headerlink" title="post请求："></a>post请求：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    * 以post方式调用第三方接口</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> url</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doPost</span><span class="hljs-params">(String url, JSONObject json)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == httpClient) &#123;<br><br>            httpClient = HttpClientBuilder.create().build();<br><br>        &#125;<br><br>        <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br><br>        <span class="hljs-comment">//api_gateway_auth_token自定义header头，用于token验证使用</span><br><br>        httpPost.addHeader(<span class="hljs-string">&quot;api_gateway_auth_token&quot;</span>, tokenString);<br><br>        httpPost.addHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-type">StringEntity</span> <span class="hljs-variable">se</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEntity</span>(json.toString());<br><br>            se.setContentEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>            <span class="hljs-comment">//发送json数据需要设置contentType</span><br><br>            se.setContentType(<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br><br>            <span class="hljs-comment">//设置请求参数</span><br><br>            httpPost.setEntity(se);<br><br>            <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpPost);<br><br>            <span class="hljs-keyword">if</span> (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;<br><br>                <span class="hljs-comment">//返回json格式</span><br><br>                <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity());<br><br>                <span class="hljs-keyword">return</span> res;<br><br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><br>            e.printStackTrace();<br><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>            <span class="hljs-keyword">if</span> (httpClient != <span class="hljs-literal">null</span>)&#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br><br>                    httpClient.close();<br><br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><br>                    e.printStackTrace();<br><br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关闭IPS</title>
    <link href="/2022/11/22/%E5%85%B3%E9%97%ADIPS/"/>
    <url>/2022/11/22/%E5%85%B3%E9%97%ADIPS/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1482189349482-3defd547e0e9?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NjkxMjA3MTQ&ixlib=rb-4.0.3&q=80&w=1080&h=1920" alt="photo by Jessica Furtney on Unsplash"></p><p>关闭SIP<br>系统完整性保护是 OS X El Capitan 及更高版本所采用的一项安全技术，能够帮助防止潜在恶意软件修改 Mac 上受保护的文件和文件夹。系统完整性保护可以限制 root 用户帐户，以及 root 用户能够在 Mac 操作系统的受保护部分完成的操作。</p><p>通俗来说就是Windows系统的防火墙或者安卓手机的ROOT。</p><p>苹果应用商店的软件都是用沙盒运行的，无法访问系统文件，所以大部分软件都是阉割版的，例如<a href="https://foxirj.com/tencent-lemon">腾讯柠檬清理</a>之类的系统应用。</p><h2 id="关闭SIP影响"><a href="#关闭SIP影响" class="headerlink" title="关闭SIP影响"></a>关闭SIP影响</h2><ul><li>  xxx已损坏，无法打开，你应该将它移到废纸篓解决办法</li><li>  打不开 xxx，因为它来自身份不明的开发者</li><li>  打不开xxxx，因为 Apple 无法检查其是否包含恶意软件</li></ul><p><strong>目前最新的10.15.x系统使用破解软件基本上都需要关闭SIP才可以打开，就算是正版软件也有大量需要关闭SIP的，是需要永久关闭！例如TripMode。</strong></p><p>首先来检查系统是否已经禁用<a href="https://foxirj.com/tag/sip-system-integrity-protection-function" title="【查看含有[SIP系统完整性保护功能]标签的文章】">SIP系统完整性保护功能</a>。</p><p>打开终端输入以下代码即可。<strong>（全部复制以下代码）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">csrutil status<br></code></pre></td></tr></table></figure><p>未关闭 enabled：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">System Integrity Protection status: enabled<br></code></pre></td></tr></table></figure><p>已关闭 disabled：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">System Integrity Protection status: disabled<br></code></pre></td></tr></table></figure><p>以下是具体关闭SIP系统完整性保护功能教程：<strong>进入Recovery模式后只能使用触控板，鼠标无效。</strong></p><h2 id="Apple-ARM64处理器关闭方法："><a href="#Apple-ARM64处理器关闭方法：" class="headerlink" title="Apple ARM64处理器关闭方法："></a>Apple ARM64处理器关闭方法：</h2><p>1、关机长按【开机键】直至出现磁盘画面，点击【选项】&gt;【继续】</p><p>2、在顶部选择【实用工具】&gt;【终端】打开即可。</p><p>3、输入以下代码并回车，然后输入【y】再输入【开机密码】并回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">csrutil <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><p>4、显示以下代码即是成功关闭SIP了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">System Integrity Protection is off<br></code></pre></td></tr></table></figure><p>5、再输入以下代码重启电脑即可完成关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>常见问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>obsidian-Dataview 插件</title>
    <link href="/2022/11/21/obsidian-dataview%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/11/21/obsidian-dataview%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>推荐一款markdown编辑器-obsidian（黑曜石）。这是我用过功能最强大的md编辑器，支持安装海量插件，妥妥的生产力工具，可以用来记录和整理你的工作内容和学习笔记。</p><blockquote><p><strong>支持pc、移动端、平板多端同步</strong><br>  <strong>支持windows、mac、linux</strong></p></blockquote><p>这里不过多赘述，可以去b站或百度搜索相关视频。使用这个工具需要一定的学习成本</p><p>官网：<br><a href="https://obsidian.md/">Obsidian</a></p><h3 id="Dataview-插件"><a href="#Dataview-插件" class="headerlink" title="Dataview 插件"></a>Dataview 插件</h3><p>假设现在到了周五临近下班的时间，我们需要<strong>快速将 5 篇日报和 3 场会议记录整合成一篇周报</strong>，如果是以前使用传统文档记录，我们可能需要<strong>分别打开 8 个文件</strong>，来回切换窗口，然后慢慢地将它们复制粘贴在一起，这真是一件既费心又烦人的事。</p><p><img src="https://cdn.sspai.com/2022/03/30/article/b1446a2e0ddce5fe7eb0eb5c9a25a99c?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>而同样的事情如果发生在 Obsidian 中，事情则会变得轻松不少。</p><p>如下图所示，当我在周报文件夹创建文档，触发了 Templater 的模板，而这个模板则用了 Dataview 语法进行了配置。我利用 Dataview 插件，自动汇总了过去一周的所有日报和会议记录：</p><p><img src="https://cdn.sspai.com/2022/03/30/713136122b0b089f4e37950512c7bea9.gif"></p><p>你可以 <code>Ctrl</code>  + 鼠标左键点击 ，来打开同一份文档。左侧窗口使用 <code>Ctrl+E</code> 进入阅读视图，鼠标悬停在日报标题上方，通过弹出的小窗获取周报所需要的信息，然后就可以在右侧编辑视图下快速输入了。</p><p><img src="https://cdn.sspai.com/2022/03/30/article/9e40ab0889f561bca740a5c82f0f48e1?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><h4 id="Dataview-配置方法"><a href="#Dataview-配置方法" class="headerlink" title="Dataview 配置方法"></a>Dataview 配置方法</h4><p>将下面这段代码放到 Templater 模板库中，然后命名为 <code>周报模板</code></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">‍‍‍‍‍```dataview<br>list from <span class="hljs-string">&quot;工作&quot;</span><br>‍‍‍‍‍```<br></code></pre></td></tr></table></figure><p>然后再设置当 <code>在周报文件夹创建文档</code> ，则 <code>调用周报模板</code></p><p><img src="https://cdn.sspai.com/2022/03/30/article/fb14dae52dede984786e5edc6569b535?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>但是你会发现，上面那段代码会汇总 <code>工作</code> 文件夹中的<strong>所有文件</strong>，因为我们还没添加过滤条件</p><p><img src="https://cdn.sspai.com/2022/03/30/article/dc4d537407d95838d4e47c7ee7a0205c?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>显然我们需要的只有那些创建时间在一周之内的日报和会议记录文档，所以我们还需要两个步骤</p><ol><li> 为需要的文档打标签，分别是 <code>创建时间</code>、<code>日报</code>、以及 <code>会议记录</code></li><li> 让 Dataview 筛选过滤这些标签</li></ol><h4 id="用-YAML-语言为文档打标签"><a href="#用-YAML-语言为文档打标签" class="headerlink" title="用 YAML 语言为文档打标签"></a>用 YAML 语言为文档打标签</h4><p>你可以在日报最开头手动输入下面的内容，<strong>注意是英文输入法下的冒号，并且冒号后面需要空格</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-string">创建时间:</span> <span class="hljs-number">2022-03-22</span> <br><span class="hljs-string">标签:</span> <span class="hljs-string">日报</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>也可以用 Templater 插件在创建日报文档时自动插入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-string">创建时间:</span> &lt;%<span class="language-ruby"> tp.file.creation_date () </span>%&gt;<br><span class="hljs-string">标签:</span> <span class="hljs-string">日报</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>好了现在我们可以让 Dataview 插件正确过滤<strong>创建时间在 7 日之内</strong>，并且<strong>包含日报标签</strong>的文档了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">‍‍‍‍‍‍```dataview<br>list <span class="hljs-keyword">from</span> &quot;Work&quot;<br><span class="hljs-keyword">where</span> 创建时间 <span class="hljs-operator">&gt;=</span> <span class="hljs-type">date</span>(today) <span class="hljs-operator">-</span> dur(<span class="hljs-number">7</span> days)<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">contains</span>(标签,&quot;日报&quot;)<br>sort 创建时间 <span class="hljs-keyword">desc</span><br>‍‍‍‍‍‍```<br></code></pre></td></tr></table></figure><p><img src="https://cdn.sspai.com/2022/03/30/article/676b941239e27bb7982ceda162ca675f?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>后面，我还会反复提到这个插件，你可以自行阅读 <a href="https://blacksmithgu.github.io/obsidian-dataview/">Dataview 插件开发者文档</a>，学习更多高端操作，也可以点击下面大图，参考 Dataview 的部分语法。</p><p><img src="https://cdn.sspai.com/2022/04/01/31d1b8c94d35dcc45313378d721429bf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p>]]></content>
    
    
    <categories>
      
      <category>推荐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>obsidian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“xxx” 已损坏,打不开.您应该将它移到废纸篓,提示解决</title>
    <link href="/2022/11/20/%E2%80%9Cxxx%E2%80%9D%20%E5%B7%B2%E6%8D%9F%E5%9D%8F,%E6%89%93%E4%B8%8D%E5%BC%80.%E6%82%A8%E5%BA%94%E8%AF%A5%E5%B0%86%E5%AE%83%E7%A7%BB%E5%88%B0%E5%BA%9F%E7%BA%B8%E7%AF%93,%E6%8F%90%E7%A4%BA%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/11/20/%E2%80%9Cxxx%E2%80%9D%20%E5%B7%B2%E6%8D%9F%E5%9D%8F,%E6%89%93%E4%B8%8D%E5%BC%80.%E6%82%A8%E5%BA%94%E8%AF%A5%E5%B0%86%E5%AE%83%E7%A7%BB%E5%88%B0%E5%BA%9F%E7%BA%B8%E7%AF%93,%E6%8F%90%E7%A4%BA%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>打开终端输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo xattr -r -d com.apple.quarantine <br></code></pre></td></tr></table></figure><p>命令后面要加空格</p><p>然后把安装程序往终端里拖。<br>输入mac开机密码即可。</p>]]></content>
    
    
    <categories>
      
      <category>常见问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网穿透部署</title>
    <link href="/2022/11/20/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/11/20/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-操作系统"><a href="#1-操作系统" class="headerlink" title="1.操作系统"></a>1.操作系统</h1><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221003011415.png" alt="图片"><br><a href="https://www.deepin.org/index/zh">Deepin - 基于Linux的开源国产操作系统(软件生态好，缺点不够流畅)</a></p><p><strong>官网</strong><br><a href="https://www.ubuntu.org.cn/global">Ubuntu | 全球领先的用于个人电脑、平板及手机的操作系统</a></p><p><strong>我使用的版本</strong><br><a href="https://releases.ubuntu.com/22.04/ubuntu-22.04.1-desktop-amd64.iso">Ubuntu乌班图-桌面办公基本不用想了，优点流畅</a></p><h1 id="2-内网穿透原理"><a href="#2-内网穿透原理" class="headerlink" title="2.内网穿透原理"></a>2.内网穿透原理</h1><p><a href="https://ngrok.com/download">ngrok - 下载</a></p><h2 id="1-核心思想"><a href="#1-核心思想" class="headerlink" title="1.核心思想"></a>1.核心思想</h2><p><strong>内网穿透的核心思想就是“映射”和“转发”，把内网设备的端口映射到公网设备的端口上，来进行流量转发。</strong></p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221004231048.png"></p><p>简单地画一下示意图如上，基础设施由两个核心设备组成:</p><p>服务端：拥有公网IP的设备一台，即上图“公网服务器”，<strong>开放2个端口7000和6000</strong>，用于公网通信。<br>客户端：要访问的内网设备一台，即上图“内网家用电脑”，开放实际应用服务所需的端口（比如ssh服务，默认22端口），并将配置的公网映射端口6000告知服务端。<strong>所以服务端开放的那个端口6000实际上是客户端告诉它的。</strong><br>（以上端口除22以外均为自定义端口，无特<br>殊含义。)</p><h2 id="2-内网穿透原理和常用方法"><a href="#2-内网穿透原理和常用方法" class="headerlink" title="2.内网穿透原理和常用方法"></a>2.内网穿透原理和常用方法</h2><p>既然内网主机不能直接访问，那就在公网弄个服务器。</p><p>因为内网主机可以访问公网主机，然后将内网主机和公网主机进行连接，并且保持连接。</p><p>如果公网主机接收到的请求，通过链接转发给内网主机即可。</p><p>将内网服务进行公网映射，服务通常从端口提供服务，例如：</p><ul><li>ssh服务，端口好似22</li><li>web服务，端口是80和443</li><li>远程桌面服务，端口是3389，win专业版支持远程桌面</li><li>redis服务，端口是6379</li><li>jellyfin视频站，端口是8096</li><li>  我的世界 游戏服务，端口是25565<br><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221005130330.png" alt="图片"></li></ul><p><strong>参考文献：</strong><a href="https://blog.csdn.net/u010531178/article/details/124476585">(15条消息) 内网穿透原理和实现思路介绍_布啦豆的博客-CSDN博客_内网穿透原理</a></p><h1 id="3-使用ngrok-ittun穿透部署"><a href="#3-使用ngrok-ittun穿透部署" class="headerlink" title="3.使用ngrok-ittun穿透部署"></a>3.使用ngrok-ittun穿透部署</h1><p><strong>解压 并复制文件到/usr/local/bin目录下</strong></p><p><code>sudo tar xvzf ~/Downloads/ngrok-v3-stable-linux-amd64.tgz -C /usr/local/bin</code></p><h3 id="1-安装ngrok"><a href="#1-安装ngrok" class="headerlink" title="1. 安装ngrok"></a>1. 安装ngrok</h3><p><code>curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc &gt;/dev/null &amp;&amp; echo &quot;deb https://ngrok-agent.s3.amazonaws.com buster main&quot; | sudo tee /etc/apt/sources.list.d/ngrok.list &amp;&amp; sudo apt update &amp;&amp; sudo apt install ngrok</code></p><p><code>snap install ngrok</code></p><p> <em>若提示 snap不是可执行的命令，则先安装snap</em></p><p><code>sudo apt update</code><br><code>sudo apt install -y snapd</code> </p><p>登录 <a href="https://dashboard.ngrok.com/">https://dashboard.ngrok.com/</a> 注册一个账户，获取你的token。<br><strong>注意：验证码是谷歌的服务不开vpn出不来。</strong></p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221003012348.png"></p><p>账号注册成功后你会收到一份邮件，点击邮件中的链接验证身份。**(必须，否侧ngrok不给你代理)**</p><p>添加你的token<br><code>ngrok config add-authtoken &lt;token&gt;</code></p><p>`./ngrok config add-authtoken 你的token</p><h3 id="2-开通一个端口通道"><a href="#2-开通一个端口通道" class="headerlink" title="2.开通一个端口通道"></a>2.开通一个端口通道</h3><p><strong>开通http端口通道，映射本机80端口（用于web网络服务）</strong><br><code>ngrok http 80</code></p><p><strong>打开 22 端口TCP转发，并指定公网服务器地区（用于ssh连接）</strong><br><code>ngrok tcp 22 --log=stdout &gt; &quot;$HOME/ngrok.log&quot; --region ap &amp;</code></p><p><em>其中 region 的 ap 代表 ngrok 新加坡节点，访问速度相比美国节点会快一些。访问 <a href="https://ngrok.com/docs#config-options">https://ngrok.com/docs#config-options</a> 可以查看支持的所有区域。</em></p><p>不指定地区默认是jp日本。同一账号下，同一地区只能有一个会话。（开启订阅无限制）</p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221005131907.png"></p><h1 id="4-使用sunny-ngrok穿透"><a href="#4-使用sunny-ngrok穿透" class="headerlink" title="4.使用sunny-ngrok穿透"></a>4.使用sunny-ngrok穿透</h1><p>准备：<br>先去官网注册账号，2块钱完成实名认证。<a href="https://ngrok.cc/">官网</a></p><p>开通你需要的隧道规格服务。</p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221005144415.png"></p><p>完成后，在这个页面会出现你开通的隧道。拿到你的隧道ID<br><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221005144530.png"></p><h2 id="1-下载对应版本的客户端"><a href="#1-下载对应版本的客户端" class="headerlink" title="1.下载对应版本的客户端"></a>1.下载对应版本的客户端</h2><p><a href="https://www.ngrok.cc/download.html">Sunny-Ngrok内网转发</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo mv sunny /usr/local/bin/sunny<br>sudo chmod +x /usr/local/bin/sunny<br></code></pre></td></tr></table></figure><h2 id="2-启动隧道"><a href="#2-启动隧道" class="headerlink" title="2.启动隧道"></a>2.启动隧道</h2><p>Mac、Linux、树莓派的使用方式是一样的。Windows才会不一样。但是它们的启动方式都是通过隧道id启动，隧道id可以在隧道管理的列表里面获得。这里以映射http服务为例。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">./sunny clientid 隧道id<br></code></pre></td></tr></table></figure><p>启动多个隧道</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./sunny clientid 隧道id,隧道id<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221005144141.png"></p><p>要想后台运行可以使用 setsid 命令(会话断开不会杀死隧道进程)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">setsid ./sunny clientid 隧道<span class="hljs-built_in">id</span> &amp;<br></code></pre></td></tr></table></figure><h2 id="3-开机自启"><a href="#3-开机自启" class="headerlink" title="3.开机自启"></a>3.开机自启</h2><p>编写启动脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo vim /etc/init.d/sunny<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh -e</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## BEGIN INIT INFO</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Provides:          ngrok.cc</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Required-Start:    <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Required-Stop:     <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default-Start:     2 3 4 5</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default-Stop:      0 1 6</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Short-Description: autostartup of ngrok <span class="hljs-keyword">for</span> Linux</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## END INIT INFO</span></span><br><br>NAME=sunny<br>DAEMON=/usr/local/bin/$NAME<br>PIDFILE=/var/run/$NAME.pid<br><br>[ -x &quot;$DAEMON&quot; ] || exit 0<br><br>case &quot;$1&quot; in<br>  start)<br>      if [ -f $PIDFILE ]; then<br>        echo &quot;$NAME already running...&quot;<br>        echo -e &quot;\033[1;35mStart Fail\033[0m&quot;<br>      else<br>        echo &quot;Starting $NAME...&quot;<br>        start-stop-daemon -S -p $PIDFILE -m -b -o -q -x $DAEMON -- clientid 隧道id || return 2<br>        echo -e &quot;\033[1;32mStart Success\033[0m&quot;<br>    fi<br>    ;;<br>  stop)<br>        echo &quot;Stoping $NAME...&quot;<br>        start-stop-daemon -K -p $PIDFILE -s TERM -o -q || return 2<br>        rm -rf $PIDFILE<br>        echo -e &quot;\033[1;32mStop Success\033[0m&quot;<br>    ;;<br>  restart)<br>    $0 stop &amp;&amp; sleep 2 &amp;&amp; $0 start<br>    ;;<br>  *)<br>    echo &quot;Usage: $0 &#123;start|stop|restart&#125;&quot;<br>    exit 1<br>    ;;<br>esac<br>exit 0<br></code></pre></td></tr></table></figure><p>把代码里面的【隧道id】替换成自己的隧道id</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo chmod 755 /etc/init.d/sunny<br>sudo /etc/init.d/sunny start<br>sudo /etc/init.d/sunny start    #启动<br>sudo /etc/init.d/sunny stop     #停止<br>sudo /etc/init.d/sunny restart  #重启<br></code></pre></td></tr></table></figure><hr><p>Ubuntu、树莓派、Debian系列的系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">cd /etc/init.d<br>sudo update-rc.d sunny defaults 90    #加入开机启动<br>sudo update-rc.d -f sunny remove  #取消开机启动<br></code></pre></td></tr></table></figure><h1 id="5-使用公网IP服务器，搭建frp内网穿透环境。"><a href="#5-使用公网IP服务器，搭建frp内网穿透环境。" class="headerlink" title="5.使用公网IP服务器，搭建frp内网穿透环境。"></a>5.使用公网IP服务器，搭建frp内网穿透环境。</h1><h2 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h2><h3 id="1-下载frp库"><a href="#1-下载frp库" class="headerlink" title="1.下载frp库:"></a>1.下载frp库:</h3><p>建议去官网，之前在别人博客下的发现有挖矿病毒。</p><h3 id="2-解压frp压缩包"><a href="#2-解压frp压缩包" class="headerlink" title="2.解压frp压缩包"></a>2.解压frp压缩包</h3><p><code>tar -zxvf frp_0.33.0_linux_amd64.tar.gz</code></p><h3 id="3-进入解压目录"><a href="#3-进入解压目录" class="headerlink" title="3.进入解压目录"></a>3.进入解压目录</h3><p><code>cd frp_0.33.0_linux_amd64/</code></p><h3 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4.修改配置文件"></a>4.修改配置文件</h3><p><code>vi frps.ini</code></p><p>配置文件内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-comment"># frp监听的端口，默认是7000，可以改成其他的</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-comment"># 授权码，请改成更复杂的</span><br><span class="hljs-attr">token</span> = <span class="hljs-number">52010</span>  <span class="hljs-comment"># 这个token之后在客户端会用到</span><br><br><span class="hljs-comment"># frp管理后台端口，请按自己需求更改</span><br><span class="hljs-attr">dashboard_port</span> = <span class="hljs-number">7500</span><br><span class="hljs-comment"># frp管理后台用户名和密码，请改成自己的</span><br><span class="hljs-attr">dashboard_user</span> = admin<br><span class="hljs-attr">dashboard_pwd</span> = admin<br><span class="hljs-attr">enable_prometheus</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># frp日志配置</span><br><span class="hljs-attr">log_file</span> = /var/log/frps.log<br><span class="hljs-attr">log_level</span> = info<br><span class="hljs-attr">log_max_days</span> = <span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><h3 id="5-设置启动frp服务"><a href="#5-设置启动frp服务" class="headerlink" title="5.设置启动frp服务"></a>5.设置启动frp服务</h3><p>注册服务加入开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo mkdir -p /etc/frp<br>sudo cp frps.ini /etc/frp<br>sudo cp frps /usr/bin<br>sudo cp systemd/frps.service /usr/lib/systemd/system/<br><br>sudo systemctl enable frps<br>sudo systemctl start frps<br></code></pre></td></tr></table></figure><h3 id="6-防火墙开放"><a href="#6-防火墙开放" class="headerlink" title="6.防火墙开放"></a>6.防火墙开放</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">ufw allow 7000<br>ufw allow 7500<br></code></pre></td></tr></table></figure><p>7000和7500两个端口分别对应frps.ini配置中的bind_port和dashboard_port</p><h3 id="7-验证服务端是否启动成功"><a href="#7-验证服务端是否启动成功" class="headerlink" title="7. 验证服务端是否启动成功"></a>7. 验证服务端是否启动成功</h3><p>访问：http://服务器IP:后台管理端口” ，输入用户名和密码可以查看连接状态<br>如：<a href="http://1.177.88.135:7500/">1.117.90.135:7500</a>/，用户名和密码分别对应frps.ini文件中的dashboard_user和dashboard_pwd  </p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221018112304.png"><br><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221018112356.png"></p><p>如果上述步骤没有问题，则说明frp的服务端配置成功了，也就意味着内网穿透你已经成功了一半.</p><h2 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h2><h3 id="1-进入解压目录"><a href="#1-进入解压目录" class="headerlink" title="1.进入解压目录"></a>1.进入解压目录</h3><p>[[内网穿透部署#3.进入解压目录]]</p><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><p><code>vi frpc.ini  (注意哦，不是frps.ini)</code></p><p>配置文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">客户端配置</span><br>[common]<br>server_addr = 服务器ip<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">与frps.ini的bind_port一致</span><br>server_port = 7000<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">与frps.ini的token一致</span><br>token = 52010<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置ssh服务</span><br>[ssh]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">这个自定义，之后再ssh连接的时候要用</span><br>remote_port = 6000 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置http服务，可用于小程序开发、远程调试等，如果没有可以不写下面的</span><br>[web]<br>type = http<br>local_ip = 127.0.0.1<br>local_port = 8080<br><span class="hljs-meta prompt_"># </span><span class="language-bash">web域名</span><br>subdomain = test.hijk.pw<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自定义的远程服务器端口，例如8080</span><br>remote_port = 8080<br></code></pre></td></tr></table></figure><p>`</p><h3 id="3-防火墙开放"><a href="#3-防火墙开放" class="headerlink" title="3.防火墙开放"></a>3.防火墙开放</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">ufw allow 7000<br>ufw allow 7500<br></code></pre></td></tr></table></figure><h3 id="4-客户端开机自启"><a href="#4-客户端开机自启" class="headerlink" title="4.客户端开机自启"></a>4.客户端开机自启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo mkdir -p /etc/frp<br>sudo cp frpc.ini /etc/frp<br>sudo cp frpc /usr/bin<br>sudo cp systemd/frpc.service /usr/lib/systemd/system/<br><br>sudo systemctl enable frpc<br>sudo systemctl start frpc<br></code></pre></td></tr></table></figure><h3 id="5-测试穿透是否配置成功"><a href="#5-测试穿透是否配置成功" class="headerlink" title="5. 测试穿透是否配置成功"></a>5. 测试穿透是否配置成功</h3><p><code>ssh 用户名@服务端ip  -p 端口号</code><br><font color="yellow">如果请求成功，那么恭喜你成功内网穿透！</font></p><h2 id="3-参考文献"><a href="#3-参考文献" class="headerlink" title="3.参考文献"></a>3.参考文献</h2><p><a href="https://blog.csdn.net/weixin_43922901/article/details/109261700?spm=1001.2014.3001.5506">(9条消息) 使用frp配置内网访问（穿透）教程（超详细，简单）_*Lisen的博客-CSDN博客_frp</a></p><h1 id="6-使用NPS实现内网穿透"><a href="#6-使用NPS实现内网穿透" class="headerlink" title="6.使用NPS实现内网穿透"></a>6.使用NPS实现内网穿透</h1><p>安装包：<a href="https://github.com/ehang-io/nps/releases">Releases · ehang-io/nps (github.com)</a></p><p>教程：<a href="https://ehang-io.github.io/">NPS教程</a></p>]]></content>
    
    
    <categories>
      
      <category>开发部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim常用命令(1)</title>
    <link href="/2022/11/19/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(1)/"/>
    <url>/2022/11/19/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="1、文本全局替换"><a href="#1、文本全局替换" class="headerlink" title="1、文本全局替换"></a>1、文本全局替换</h1><p>执行:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs VIm">%s/oldstr/newstr/g<br></code></pre></td></tr></table></figure><p> 说明：  </p><p> :%s - 表示搜索替换<br> oldstr - 被替换的字符串<br> newstr - 要替换的字符串<br> g - Global，表示全局替换（如果没有”/g”，则只替换每行的第一个</p><h1 id="2、一次复制多行"><a href="#2、一次复制多行" class="headerlink" title="2、一次复制多行"></a>2、一次复制多行</h1><p>执行”yyp”，会将光标所在的一行复制一遍并添加到下方；<br>执行”yynp”，会将光标所在的一行复制n遍并添加到下方，将n换成实际数字即可；<br>执行”nyyp”，会将从光标行开始的n行复制一遍添加到下方，将n换成实际数字即可。</p><h1 id="3、一次删除多行"><a href="#3、一次删除多行" class="headerlink" title="3、一次删除多行"></a>3、一次删除多行</h1><p> 执行”dd”，会将光标所在的一行删除；<br> 执行”ndd”，会将从光标行开始的n行删除，将n换成实际数字即可；</p><h1 id="4、快速移动到文件头和文件尾"><a href="#4、快速移动到文件头和文件尾" class="headerlink" title="4、快速移动到文件头和文件尾"></a>4、快速移动到文件头和文件尾</h1><p>  执行”gg”，会快速移动到文件头位置；<br>  执行”Shift+G”，会快速移动到文结尾位置。  </p><h1 id="5、快速移动到行首和行尾"><a href="#5、快速移动到行首和行尾" class="headerlink" title="5、快速移动到行首和行尾"></a>5、快速移动到行首和行尾</h1><p> 执行”$”，会快速移动到行位；<br> 执行”^”，会快速移动到行首</p><h1 id="6-文本位置跳转"><a href="#6-文本位置跳转" class="headerlink" title="6.文本位置跳转"></a>6.文本位置跳转</h1><p><code>G</code> 跳转到文章最后一行<br><code>gg</code>跳转到文章第一行<br><code>zz</code>当前光标位置展示在屏幕中央</p><h1 id="7-全选"><a href="#7-全选" class="headerlink" title="7.全选"></a>7.全选</h1><p>全选（高亮显示）：按esc后，然后ggvG或者ggVG</p><p>全部复制：按esc后，然后ggyG</p><p>全部删除：按esc后，然后dG</p>]]></content>
    
    
    <categories>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（httpclient）Java请求第三方接口获取数据</title>
    <link href="/2022/11/19/Java%E8%AF%B7%E6%B1%82%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%88httpclient%EF%BC%89/"/>
    <url>/2022/11/19/Java%E8%AF%B7%E6%B1%82%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%88httpclient%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>pom文件添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--HttpClient--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--fastjson--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h2 id="第二步：代码实现"><a href="#第二步：代码实现" class="headerlink" title="第二步：代码实现"></a>第二步：代码实现</h2><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doGet</span><span class="hljs-params">(String url, String charset, String token)</span> &#123;<br>        <span class="hljs-comment">//1.生成HttpClient对象并设置参数</span><br>        <span class="hljs-type">HttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpClient</span>();<br>        <span class="hljs-comment">//设置Http连接超时为10秒</span><br>        httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">//2.生成GetMethod对象并设置参数</span><br>        <span class="hljs-type">GetMethod</span> <span class="hljs-variable">getMethod</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetMethod</span>(url);<br>        <span class="hljs-comment">//设置get请求超时为30秒</span><br>        getMethod.getParams().setParameter(HttpMethodParams.SO_TIMEOUT, <span class="hljs-number">30000</span>);<br>        <span class="hljs-comment">//设置请求重试处理，用的是默认的重试处理：请求三次</span><br>        getMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultHttpMethodRetryHandler</span>());<br>        <span class="hljs-keyword">if</span> (!token.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            postMethod.addRequestHeader(<span class="hljs-string">&quot;Authorization&quot;</span>, token);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//3.执行HTTP GET 请求</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> httpClient.executeMethod(getMethod);<br>            <span class="hljs-comment">//4.判断访问的状态码</span><br>            <span class="hljs-keyword">if</span> (statusCode != HttpStatus.SC_OK) &#123;<br>                System.err.println(<span class="hljs-string">&quot;请求出错：&quot;</span> + getMethod.getStatusLine());<br>            &#125;<br>            <span class="hljs-comment">//读取HTTP响应内容，这里简单打印网页内容</span><br>            <span class="hljs-comment">//读取为字节数组</span><br>            <span class="hljs-type">byte</span>[] responseBody = getMethod.getResponseBody();<br>            response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(responseBody, charset);<br>            <span class="hljs-comment">//读取为InputStream，在网页内容数据量大时候推荐使用</span><br>            <span class="hljs-comment">//InputStream response = getMethod.getResponseBodyAsStream();</span><br>        &#125; <span class="hljs-keyword">catch</span> (HttpException e) &#123;<br>            <span class="hljs-comment">//发生致命的异常，可能是协议不对或者返回的内容有问题</span><br>            System.out.println(<span class="hljs-string">&quot;请检查输入的URL!&quot;</span>);<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">//发生网络异常</span><br>            System.out.println(<span class="hljs-string">&quot;发生网络异常!&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放连接</span><br>            getMethod.releaseConnection();<br>        &#125;<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;        <br><br></code></pre></td></tr></table></figure><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * post请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url 请求的路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  jsonstr请求的信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doPost</span><span class="hljs-params">(String url, String jsonstr,String token)</span> &#123;<br>        <span class="hljs-type">HttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpClient</span>();<br>        <span class="hljs-type">PostMethod</span> <span class="hljs-variable">postMethod</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PostMethod</span>(url);<br><br>        postMethod.addRequestHeader(<span class="hljs-string">&quot;accept&quot;</span>, <span class="hljs-string">&quot;*/*&quot;</span>);<br>        postMethod.addRequestHeader(<span class="hljs-string">&quot;connection&quot;</span>, <span class="hljs-string">&quot;Keep-Alive&quot;</span>);<br>        <span class="hljs-comment">//设置json格式传送</span><br>        postMethod.addRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>        <span class="hljs-comment">//必须设置下面这个Header</span><br><span class="hljs-comment">//        postMethod.addRequestHeader(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36&quot;);</span><br><span class="hljs-keyword">if</span> (!token.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            postMethod.addRequestHeader(<span class="hljs-string">&quot;Authorization&quot;</span>, token);<br>        &#125;<br><span class="hljs-type">RequestEntity</span> <span class="hljs-variable">requestEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRequestEntity</span>(jsonstr,<span class="hljs-string">&quot;json&quot;</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        postMethod.setRequestEntity(requestEntity);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> httpClient.executeMethod(postMethod);<br>            System.out.println(code);<br>            <span class="hljs-keyword">if</span> (code == <span class="hljs-number">200</span>) &#123;<br>                res = postMethod.getResponseBodyAsString();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>api</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac安装brew包管理工具</title>
    <link href="/2022/11/18/mac%E5%AE%89%E8%A3%85brew%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/11/18/mac%E5%AE%89%E8%A3%85brew%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p>brew 是 Mac 下的一个包管理工具，类似于 centos 下的 yum，ubuntu中的apt。<br>可以很方便地进行安装/卸载/更新各种软件包。例如：nodejs,svn,tomcat,mysql, mongodb 等等，可以用来快速搭建各种本地环境，程序员必备工具</p><h3 id="安装-brew"><a href="#安装-brew" class="headerlink" title="安装 brew"></a>安装 brew</h3><p>首先要通过如下命令安装 brew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/ruby -e <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="安装-卸载-更新"><a href="#安装-卸载-更新" class="headerlink" title="安装/卸载/更新"></a>安装/卸载/更新</h4><p>以 nodejs 为例，执行下面命令即可，安装目录在 <code>/usr/local/Cellar</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install nodejs<br></code></pre></td></tr></table></figure><p>如果需要更新或卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew upgrade nodejs<br>brew remove nodejs<br></code></pre></td></tr></table></figure><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew list                   <span class="hljs-comment"># 列出当前安装的软件</span><br>brew list [软件包名]         <span class="hljs-comment"># 查看安装目录</span><br>brew search nodejs          <span class="hljs-comment"># 查询与 nodejs 相关的可用软件</span><br>brew info nodejs            <span class="hljs-comment"># 查询 nodejs 的安装信息</span><br></code></pre></td></tr></table></figure><p>如果需要指定版本，可以在 <code>brew search</code> 查看有没有需要的版本，在 <code>@</code> 后面指定版本号，例如 <code>brew install thrift@0.9</code></p><h2 id="brew-services"><a href="#brew-services" class="headerlink" title="brew services"></a>brew services</h2><p><code>brew services</code> 是一个非常强大的工具，可以用来管理各种服务的启停，有点像 linux 里面的 services，非常方便，以 elasticsearch 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install elasticsearch          <span class="hljs-comment"># 安装 elasticsearch</span><br>brew services start elasticsearch   <span class="hljs-comment"># 启动 elasticsearch</span><br>brew services stop elasticsearch    <span class="hljs-comment"># 停止 elasticsearch</span><br>brew services restart elasticsearch <span class="hljs-comment"># 重启 elasticsearch</span><br>brew services list                  <span class="hljs-comment"># 列出当前的状态</span><br></code></pre></td></tr></table></figure><p>brew services 服务相关配置以及日志路径</p><ul><li>  配置路径：<code>/usr/local/etc/</code></li><li>  日志路径：<code>/usr/local/var/log</code></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li>  brew 官网：<a href="https://brew.sh/">https://brew.sh/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>brew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac安装SVN</title>
    <link href="/2022/11/18/mac%E5%AE%89%E8%A3%85SVN/"/>
    <url>/2022/11/18/mac%E5%AE%89%E8%A3%85SVN/</url>
    
    <content type="html"><![CDATA[<p> 安装SVN</p><p>打开<code>终端</code>，输入如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install subversion<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>svn</tag>
      
      <tag>arm64</tag>
      
      <tag>M1</tag>
      
      <tag>M1Pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成微信小程序二维码</title>
    <link href="/2022/11/18/%E7%94%9F%E6%88%90%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C%E7%BB%B4%E7%A0%81%EF%BC%88POST%E8%AF%B7%E6%B1%82%EF%BC%89/"/>
    <url>/2022/11/18/%E7%94%9F%E6%88%90%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C%E7%BB%B4%E7%A0%81%EF%BC%88POST%E8%AF%B7%E6%B1%82%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="生成微信小程序二维码"><a href="#生成微信小程序二维码" class="headerlink" title="生成微信小程序二维码"></a>生成微信小程序二维码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * 生成微信小程序二维码</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">filePath</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *         本地生成二维码路径</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">page</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *         当前小程序相对页面 必须是已经发布的小程序存在的页面（否则报错），例如 pages/index/index, 根路径前不要填加 /,不能携带参数（参数请放在scene字段里），如果不填写这个字段，默认跳主页面</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">scene</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *         最大32个可见字符，只支持数字，大小写英文以及部分特殊字符：!#$&amp;&#x27;()*+,/:;=?@-._~，其它字符请自行编码为合法字符（因不支持%，中文无法使用 urlencode 处理，请使用其他编码方式）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">accessToken</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *         接口调用凭证</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">env_version</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *         要打开的小程序版本。正式版为 &quot;release&quot;，体验版为 &quot;trial&quot;，开发版为 &quot;develop&quot;。默认是正式版。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateQrCode</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> filePath, <span class="hljs-built_in">String</span> page, <span class="hljs-built_in">String</span> scene, <span class="hljs-built_in">String</span> accessToken,<span class="hljs-built_in">String</span> env_version</span>) &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-comment">//调用微信接口生成二维码</span><br><br>            <span class="hljs-variable constant_">URL</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&quot;https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=&quot;</span> + accessToken);<br><br>            <span class="hljs-title class_">HttpURLConnection</span> httpURLConnection = (<span class="hljs-title class_">HttpURLConnection</span>) url.<span class="hljs-title function_">openConnection</span>();<br><br>            httpURLConnection.<span class="hljs-title function_">setRequestMethod</span>(<span class="hljs-string">&quot;POST&quot;</span>);<span class="hljs-comment">// 提交模式</span><br><br>            <span class="hljs-comment">// conn.setConnectTimeout(10000);//连接超时 单位毫秒</span><br><br>            <span class="hljs-comment">// conn.setReadTimeout(2000);//读取超时 单位毫秒</span><br><br>            <span class="hljs-comment">// 发送POST请求必须设置如下两行</span><br><br>            httpURLConnection.<span class="hljs-title function_">setDoOutput</span>(<span class="hljs-literal">true</span>);<br><br>            httpURLConnection.<span class="hljs-title function_">setDoInput</span>(<span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">// 获取URLConnection对象对应的输出流</span><br><br>            <span class="hljs-title class_">PrintWriter</span> printWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(httpURLConnection.<span class="hljs-title function_">getOutputStream</span>());<br><br>            <span class="hljs-comment">// 发送请求参数</span><br><br>            <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> paramJson = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>();<br><br>            <span class="hljs-comment">//这就是你二维码里携带的参数 String型  名称不可变</span><br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;scene&quot;</span>, scene);<br><br>            <span class="hljs-comment">//注意该接口传入的是page而不是path</span><br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;page&quot;</span>, page);<br><br>            <span class="hljs-comment">//这是设置扫描二维码后跳转的页面</span><br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-number">200</span>);<br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;is_hyaline&quot;</span>, <span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">//是否检查pages路径 默认true</span><br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;check_path&quot;</span>, <span class="hljs-literal">false</span>);<br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;auto_color&quot;</span>, <span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">//版本</span><br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;env_version&quot;</span>,env_version);<br><br>            printWriter.<span class="hljs-title function_">write</span>(paramJson.<span class="hljs-title function_">toString</span>());<br><br>            <span class="hljs-comment">// flush输出流的缓冲</span><br><br>            printWriter.<span class="hljs-title function_">flush</span>();<br><br>            <span class="hljs-comment">//开始获取数据</span><br><br>            <span class="hljs-title class_">BufferedInputStream</span> bis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(httpURLConnection.<span class="hljs-title function_">getInputStream</span>());<br><br>            <span class="hljs-title class_">OutputStream</span> os = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath));<br><br>            int len;<br><br>            byte[] arr = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">1024</span>];<br><br>            <span class="hljs-keyword">while</span> ((len = bis.<span class="hljs-title function_">read</span>(arr)) != -<span class="hljs-number">1</span>) &#123;<br><br>                os.<span class="hljs-title function_">write</span>(arr, <span class="hljs-number">0</span>, len);<br><br>                os.<span class="hljs-title function_">flush</span>();<br><br>            &#125;<br><br>            os.<span class="hljs-title function_">close</span>();<br><br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br><br>            e.<span class="hljs-title function_">printStackTrace</span>();<br><br>        &#125;<br><br><span class="hljs-comment">//        System.out.println(&quot;打开地址查看生成的二维码：&quot; + filePath);</span><br><br><span class="hljs-comment">//        return filePath;</span><br><br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决maven gexin依赖问题</title>
    <link href="/2022/11/16/%E8%A7%A3%E5%86%B3maven%20gexin%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/16/%E8%A7%A3%E5%86%B3maven%20gexin%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h1><p>在使用“个推”开源组件时，发现 maven 一直无法下载依赖，报错如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console">Cannot resolve com.gexin.platform:gexin-rp-sdk-base:4.0.0.38<br>Cannot resolve com.gexin.platform:gexin-rp-sdk-http:4.1.2.3<br>Cannot resolve com.gexin.platform:gexin-rp-sdk-template:4.0.0.31<br>Cannot resolve com.gexin.platform:gexin-rp-fastjson:1.0.0.7<br></code></pre></td></tr></table></figure><h1 id="2、解决办法"><a href="#2、解决办法" class="headerlink" title="2、解决办法"></a>2、解决办法</h1><p>分 2 个步骤：</p><h2 id="①修改-maven-的配置文件-settings-xml-的镜像配置如下："><a href="#①修改-maven-的配置文件-settings-xml-的镜像配置如下：" class="headerlink" title="①修改 maven 的配置文件 settings.xml 的镜像配置如下："></a>①修改 maven 的配置文件 settings.xml 的镜像配置如下：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*,!getui-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 其中 【,!getui-nexus】表示 getui-nexus 这个依赖不从 aliyun 进行下载（如果有其它不从阿里云仓库下载的也是使用逗号 , 分隔）。</p><h2 id="②在项目的-pom-xml-配置里增加-getui-nexus-的仓库配置，如下："><a href="#②在项目的-pom-xml-配置里增加-getui-nexus-的仓库配置，如下：" class="headerlink" title="②在项目的 pom.xml 配置里增加 getui-nexus 的仓库配置，如下："></a>②在项目的 pom.xml 配置里增加 getui-nexus 的仓库配置，如下：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 个推依赖仓库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>getui-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://mvn.gt.getui.com/nexus/content/repositories/releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span>  <br>    <span class="hljs-comment">&lt;!-- 个推配置--&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">gexin.rp.sdk.base.version</span>&gt;</span>4.0.0.26<span class="hljs-tag">&lt;/<span class="hljs-name">gexin.rp.sdk.base.version</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">gexin.rp.sdk.http.version</span>&gt;</span>4.1.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">gexin.rp.sdk.http.version</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">gexin.rp.sdk.template.version</span>&gt;</span>4.0.0.20<span class="hljs-tag">&lt;/<span class="hljs-name">gexin.rp.sdk.template.version</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">gexin.rp.fastjson.version</span>&gt;</span>1.0.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">gexin.rp.fastjson.version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>       <br>         <span class="hljs-comment">&lt;!-- 个推 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.gexin.platform<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gexin-rp-sdk-base<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;gexin.rp.sdk.base.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.gexin.platform<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gexin-rp-sdk-http<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;gexin.rp.sdk.http.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.gexin.platform<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gexin-rp-sdk-template<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;gexin.rp.sdk.template.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.gexin.platform<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gexin-rp-fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;gexin.rp.fastjson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3、重启-IDEA-即可生效"><a href="#3、重启-IDEA-即可生效" class="headerlink" title="3、重启 IDEA 即可生效"></a>3、重启 IDEA 即可生效</h1>]]></content>
    
    
    <categories>
      
      <category>常见问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql之根据经纬度按距离排序</title>
    <link href="/2022/11/16/Mysql%20%E4%B9%8B%E6%A0%B9%E6%8D%AE%E7%BB%8F%E7%BA%AC%E5%BA%A6%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/11/16/Mysql%20%E4%B9%8B%E6%A0%B9%E6%8D%AE%E7%BB%8F%E7%BA%AC%E5%BA%A6%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、方式一"><a href="#一、方式一" class="headerlink" title="一、方式一"></a>一、方式一</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">st_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。<br>SELECT *,<br>(st_distance(point(lng,lat),point(116.3424590000,40.0497810000))*111195/1000 ) as juli FROM table ORDER BY juli ASC <br></code></pre></td></tr></table></figure><h2 id="二、方式二"><a href="#二、方式二" class="headerlink" title="二、方式二"></a>二、方式二</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select *, ROUND(6378.138*2*ASIN(SQRT(POW(SIN((&#123;$lat&#125;*PI()/180-lat*PI()/180)/2),2)+COS(&#123;$lat&#125;*PI()/180)*COS(lat*PI()/180)*POW(SIN((&#123;$lng&#125;*PI()/180-lng*PI()/180)/2),2)))*1000) AS juli from table order by juli asc<br></code></pre></td></tr></table></figure><p>原理：</p><ul><li>MYSQL空间函数<br>  返回球体上两个点和/或多点之间的最小球面距离（以米为单位）</li></ul><h3 id="函数st-distance-sphere-和-st-distance"><a href="#函数st-distance-sphere-和-st-distance" class="headerlink" title="函数st_distance_sphere 和 st_distance"></a>函数st_distance_sphere 和 st_distance</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> st_distance_sphere(POINT(<span class="hljs-number">121.590346</span>, <span class="hljs-number">31.388096</span>),POINT(<span class="hljs-number">121.590345</span>, <span class="hljs-number">31.388095</span>)) <span class="hljs-keyword">AS</span> distant<br></code></pre></td></tr></table></figure><p>结果（单位：米）<br>0.14620023407776306</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> st_distance(POINT(<span class="hljs-number">121.590346</span>, <span class="hljs-number">31.388096</span>),POINT(<span class="hljs-number">121.590345</span>, <span class="hljs-number">31.388095</span>))<span class="hljs-operator">*</span><span class="hljs-number">111195</span> <span class="hljs-keyword">AS</span> distant<br></code></pre></td></tr></table></figure><p>结果：<br>0.15725347695038774</p><blockquote><p>st_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。</p></blockquote><p>为什么不一样呢？</p><blockquote><p>因为在不同纬度，每度的长度是不一样的。所以 st_distance_sphere 的结果是准确的。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>echart</title>
    <link href="/2022/11/15/echart/"/>
    <url>/2022/11/15/echart/</url>
    
    <content type="html"><![CDATA[<h3 id="1-echart鼠标放上去显示数据"><a href="#1-echart鼠标放上去显示数据" class="headerlink" title="1.echart鼠标放上去显示数据"></a>1.echart鼠标放上去显示数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// 基于准备好的dom，初始化echarts实例</span><br><span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;latest_pv&#x27;</span>));<br><br><span class="hljs-comment">// 指定图表的配置项和数据</span><br><span class="hljs-keyword">var</span> option = &#123;<br>    <span class="hljs-attr">xAxis</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>        <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;&#123;$d1&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d2&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d3&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d4&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d5&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d6&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d7&#125;&#x27;</span>]<br>    &#125;,<br>    <span class="hljs-attr">yAxis</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">series</span>: [&#123;<br>        <span class="hljs-attr">data</span>: [&#123;$uv1&#125;, &#123;$uv2&#125;, &#123;$uv3&#125;, &#123;$uv4&#125;, &#123;$uv5&#125;, &#123;$uv6&#125;, &#123;$uv7&#125;],<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span><br>    &#125;],<br>    tooltip : &#123;<span class="hljs-comment">//主要是这块的功能</span><br>        <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;axis&#x27;</span>,<br>        <span class="hljs-attr">axisPointer</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;cross&#x27;</span>,<br>            <span class="hljs-attr">label</span>: &#123;<br>                <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;#6a7985&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    &#125;;<br><br><span class="hljs-comment">// 使用刚指定的配置项和数据显示图表。</span><br>myChart.<span class="hljs-title function_">setOption</span>(option);<br></code></pre></td></tr></table></figure><p> <a href="https://www.cnblogs.com/chenyingying0/archive/2020/09/02/13602645.html">echarts鼠标移上去显示数据 - 陈莺莺呀 - 博客园 (cnblogs.com)</a> </p><h3 id="2-去除保存按钮"><a href="#2-去除保存按钮" class="headerlink" title="2.去除保存按钮"></a>2.去除保存按钮</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">toolbox</span>: &#123;<br>      <span class="hljs-attr">feature</span>: &#123;<br>          <span class="hljs-attr">saveAsImage</span>: &#123;<br>              <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span><br>          &#125;<br>      &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure><h3 id="3-Echarts-柱状图设置颜色"><a href="#3-Echarts-柱状图设置颜色" class="headerlink" title="3.Echarts 柱状图设置颜色"></a>3.Echarts 柱状图设置颜色</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">option2</span>: &#123;<br>            <span class="hljs-attr">xAxis</span>: &#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>                <span class="hljs-attr">data</span>: [],<br>            &#125;,<br>            <span class="hljs-attr">yAxis</span>: &#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">series</span>: [<br>                &#123;<br>                    <span class="hljs-attr">data</span>: [],<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>                    <span class="hljs-attr">showBackground</span>: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-attr">backgroundStyle</span>: &#123;<br>                        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgba(111, 162, 135, 0.2)&#x27;</span><br>                    &#125;,<br>                    <span class="hljs-attr">itemStyle</span>: &#123;<br>                        <span class="hljs-attr">normal</span>: &#123;<br>                            <span class="hljs-comment">//这里是颜色</span><br>                            <span class="hljs-attr">color</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) &#123;<br>                                <span class="hljs-comment">//注意，如果颜色太少的话，后面颜色不会自动循环，最好多定义几个颜色</span><br>                                <span class="hljs-keyword">var</span> colorList = [<span class="hljs-string">&#x27;#00A3E0&#x27;</span>,<span class="hljs-string">&#x27;#FFA100&#x27;</span>, <span class="hljs-string">&#x27;#ffc0cb&#x27;</span>, <span class="hljs-string">&#x27;#CCCCCC&#x27;</span>, <span class="hljs-string">&#x27;#BBFFAA&#x27;</span>,<span class="hljs-string">&#x27;#749f83&#x27;</span>, <span class="hljs-string">&#x27;#ca8622&#x27;</span>];<br>                                <span class="hljs-keyword">return</span> colorList[params.<span class="hljs-property">dataIndex</span>]<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>            ]<br>        &#125;,<br><br></code></pre></td></tr></table></figure><p> <a href="https://blog.csdn.net/qq_45222558/article/details/124553831">(3条消息) Echarts 柱状图设置颜色_Logan星的博客-CSDN博客_echarts柱状图颜色设置</a> </p><h1 id="4-文字倾斜"><a href="#4-文字倾斜" class="headerlink" title="4.文字倾斜"></a>4.文字倾斜</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//xAxis 中</span><br>  <span class="hljs-attr">axisLabel</span>: &#123;  <br>     <span class="hljs-attr">interval</span>:<span class="hljs-number">0</span>,  <br>     <span class="hljs-attr">rotate</span>:<span class="hljs-number">40</span>  <br>  &#125;<br>  <span class="hljs-comment">//option中和xAxis同级 控制x轴内容距离 底部距离</span><br>  <span class="hljs-attr">grid</span>: &#123;  <br>  <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;10%&#x27;</span>,  <br>  <span class="hljs-attr">bottom</span>:<span class="hljs-string">&#x27;35%&#x27;</span>  <br>  &#125;<br></code></pre></td></tr></table></figure><p><a href="http://www.wjhsh.net/qingqinglanlan-p-8334370.html">echarts x轴文字显示不全(推荐-xAxis文字倾斜比较全面的3种做法值得推荐) (wjhsh.net)</a><img src="https://gitee.com/g2s19980817/image/raw/master/img/20170330155103733.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java笔记（持续更新）</title>
    <link href="/2022/11/15/java%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <url>/2022/11/15/java%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h1><h5 id="一、静态类和非静态类之间的区别"><a href="#一、静态类和非静态类之间的区别" class="headerlink" title="一、静态类和非静态类之间的区别"></a>一、静态类和非静态类之间的区别</h5><ol><li>内部静态类不需要有指向外部类的引用。但非静态内部类需要持有对外部类的引用</li><li>非静态内部类能够访问外部类的静态和非静态成员。静态类不能访问外部类的非静态成员。他只能访问外部类的静态成员</li><li>一个非静态内部类不能脱离外部类实体被创建，一个非静态内部类可以访问外部类的数据和方法，因为他就在外部类里面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: OutClass</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: xf</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 19.6.27 10:59</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutClass</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  全局静态变量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;i love java&quot;</span>;<br>     <span class="hljs-comment">// 创建静态类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">staticInnerClass</span>&#123;<br>         <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMsg</span><span class="hljs-params">()</span> &#123;<br>             System.out.println(<span class="hljs-string">&quot;静态内部类展示信息:&quot;</span>+msg);<br>         &#125;<br><br>    &#125;<br>    <span class="hljs-comment">// 创建非静态内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">disPlayMsg</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;非静态内部类展示信息:&quot;</span>+msg);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建静态内部类实例</span><br>        <span class="hljs-type">staticInnerClass</span> <span class="hljs-variable">sic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutClass</span>.staticInnerClass();<br>        sic.showMsg();<br><br>        <span class="hljs-comment">// 创建非静态内部类实例,需要先创建外部类的实例 OutClass().new</span><br>        <span class="hljs-type">InnerClass</span> <span class="hljs-variable">ic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutClass</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerClass</span>();<br>        ic.disPlayMsg();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="二、迭代器"><a href="#二、迭代器" class="headerlink" title="二、迭代器"></a>二、迭代器</h5><p>迭代器 it 的两个基本操作是 next 、hasNext 和 remove。</p><p>调用 it.next() 会返回迭代器的下一个元素，并且更新迭代器的状态。</p><p>调用 it.hasNext() 用于检测集合中是否还有元素。</p><p>调用 it.remove() 将迭代器返回的元素删除。</p><h1 id="集合排序"><a href="#集合排序" class="headerlink" title="集合排序"></a>集合排序</h1><h2 id="1-Comparable"><a href="#1-Comparable" class="headerlink" title="1.Comparable"></a>1.Comparable</h2><p>Comparable可以认为是一个<strong>内比较器</strong>，实现了Comparable接口的类有一个特点，就是这些类是可以和自己比较的，至于具体和另一个实现了Comparable接口的类如何比较，则依赖compareTo方法的实现，compareTo方法也被称为<strong>自然比较方法</strong>。如果开发者add进入一个Collection的对象想要Collections的sort方法帮你自动进行排序的话，那么这个对象必须实现Comparable接口。compareTo方法的返回值是int，有三种情况：</p><p>1、比较者大于被比较者（也就是compareTo方法里面的对象），那么返回正整数</p><p>2、比较者等于被比较者，那么返回0</p><p>3、比较者小于被比较者，那么返回负整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Domain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Domain&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> String str;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Domain</span><span class="hljs-params">(String str)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.str = str;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Domain domain)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.str.compareTo(domain.str) &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.str.compareTo(domain.str) == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStr</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-Comparator"><a href="#2-Comparator" class="headerlink" title="2.Comparator"></a>2.Comparator</h2><p>Comparator可以认为是是一个<strong>外比较器</strong>，个人认为有两种情况可以使用实现Comparator接口的方式：</p><p>1、一个对象不支持自己和自己比较（没有实现Comparable接口），但是又想对两个对象进行比较</p><p>2、一个对象实现了Comparable接口，但是开发者认为compareTo方法中的比较方式并不是自己想要的那种比较方式</p><p>Comparator接口里面有一个compare方法，方法有两个参数T o1和T o2，是泛型的表示方式，分别表示待比较的两个对象，方法返回值和Comparable接口一样是int，有三种情况：</p><p>1、o1大于o2，返回正整数</p><p>2、o1等于o2，返回0</p><p>3、o1小于o3，返回负整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DomainComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Domain&gt;<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Domain domain1, Domain domain2)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (domain1.getStr().compareTo(domain2.getStr()) &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (domain1.getStr().compareTo(domain2.getStr()) == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br> List&lt;GrabFilfox&gt; collect = grabFilfoxeList.stream().filter(a -&gt; minerid.equals(a.getMinerId())).collect(Collectors.toList());<br>            Collections.sort(collect, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;GrabFilfox&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(GrabFilfox o1, GrabFilfox o2)</span> &#123;<br>                    Long sortLong=o2.getTime().getTime()-o1.getTime().getTime();<br>                    <span class="hljs-keyword">if</span> (sortLong&gt;<span class="hljs-number">0</span>)&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sortLong&lt;<span class="hljs-number">0</span>)&#123;<br>                        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下，两种比较器Comparable和Comparator，后者相比前者有如下优点：</p><h3 id="1、如果实现类没有实现Comparable接口，又想对两个类进行比较（或者实现类实现了Comparable接口，但是对compareTo方法内的比较算法不满意），那么可以实现Comparator接口，自定义一个比较器，写比较算法"><a href="#1、如果实现类没有实现Comparable接口，又想对两个类进行比较（或者实现类实现了Comparable接口，但是对compareTo方法内的比较算法不满意），那么可以实现Comparator接口，自定义一个比较器，写比较算法" class="headerlink" title="1、如果实现类没有实现Comparable接口，又想对两个类进行比较（或者实现类实现了Comparable接口，但是对compareTo方法内的比较算法不满意），那么可以实现Comparator接口，自定义一个比较器，写比较算法"></a>1、如果实现类没有实现Comparable接口，又想对两个类进行比较（或者实现类实现了Comparable接口，但是对compareTo方法内的比较算法不满意），那么可以实现Comparator接口，自定义一个比较器，写比较算法</h3><h3 id="2、实现Comparable接口的方式比实现Comparator接口的耦合性-要强一些，如果要修改比较算法，要修改Comparable接口的实现类，而实现Comparator的类是在外部进行比较的，不需要对实现类有任何修-改。从这个角度说，其实有些不太好，尤其在我们将实现类的-class文件打成一个-jar文件提供给开发者使用的时候。实际上实现Comparator-接口的方式后面会写到就是一种典型的策略模式。"><a href="#2、实现Comparable接口的方式比实现Comparator接口的耦合性-要强一些，如果要修改比较算法，要修改Comparable接口的实现类，而实现Comparator的类是在外部进行比较的，不需要对实现类有任何修-改。从这个角度说，其实有些不太好，尤其在我们将实现类的-class文件打成一个-jar文件提供给开发者使用的时候。实际上实现Comparator-接口的方式后面会写到就是一种典型的策略模式。" class="headerlink" title="2、实现Comparable接口的方式比实现Comparator接口的耦合性 要强一些，如果要修改比较算法，要修改Comparable接口的实现类，而实现Comparator的类是在外部进行比较的，不需要对实现类有任何修 改。从这个角度说，其实有些不太好，尤其在我们将实现类的.class文件打成一个.jar文件提供给开发者使用的时候。实际上实现Comparator 接口的方式后面会写到就是一种典型的策略模式。"></a>2、实现Comparable接口的方式比实现Comparator接口的耦合性 要强一些，如果要修改比较算法，要修改Comparable接口的实现类，而实现Comparator的类是在外部进行比较的，不需要对实现类有任何修 改。从这个角度说，其实有些不太好，尤其在我们将实现类的.class文件打成一个.jar文件提供给开发者使用的时候。实际上实现Comparator 接口的方式后面会写到就是一种典型的<strong>策略模式</strong>。</h3><h3 id="3-Boolean值，返回给前端字段时，前缀不能带is，因为序列化传输的时候is会被去除掉。"><a href="#3-Boolean值，返回给前端字段时，前缀不能带is，因为序列化传输的时候is会被去除掉。" class="headerlink" title="3.Boolean值，返回给前端字段时，前缀不能带is，因为序列化传输的时候is会被去除掉。"></a><font color="red">3.Boolean值，返回给前端字段时，前缀不能带is，因为序列化传输的时候is会被去除掉。</font></h3><h1 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h1><h2 id="1-Java-Lambda-表达式"><a href="#1-Java-Lambda-表达式" class="headerlink" title="1.Java Lambda 表达式"></a>1.Java Lambda 表达式</h2><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>[^函数]: function:(x,y)===f（x,y）类似最常见的f（x）这都是函数，函数定义是，有定义域A、值域B和对应法则f（function）f（x）=x*2 这里f就是对应法则</p><p>以下是lambda表达式的重要特征:</p><ul><li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值。</li><li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号。</li><li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</li></ul><h2 id="Lambda-表达式实例"><a href="#Lambda-表达式实例" class="headerlink" title="Lambda 表达式实例"></a>Lambda 表达式实例</h2><p>Lambda 表达式的简单例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 不需要参数,返回值为 5  </span><br>() -&gt; <span class="hljs-number">5</span>  <br><span class="hljs-comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span><br>x -&gt; <span class="hljs-number">2</span> * x  <br><span class="hljs-comment">// 3. 接受2个参数(数字),并返回他们的差值  </span><br>(x, y) -&gt; x – y  <br><span class="hljs-comment">// 4. 接收2个int型整数,返回他们的和  </span><br>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) -&gt; x + y    <br><span class="hljs-comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span><br>(String s) -&gt; System.out.print(s)<br></code></pre></td></tr></table></figure><h1 id="多线程：Lambda-表达式创建线程"><a href="#多线程：Lambda-表达式创建线程" class="headerlink" title="多线程：Lambda 表达式创建线程"></a>多线程：Lambda 表达式创建线程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//新建线程1.8之前使用匿名内部类</span><br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>               System.out.println(<span class="hljs-string">&quot;开启一个新线程&quot;</span>);<br>           &#125;<br>       &#125;).start();<br>       <span class="hljs-comment">//1.8使用lambda</span><br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; System.out.println(<span class="hljs-string">&quot;lambda开启线程&quot;</span>)).start();<br></code></pre></td></tr></table></figure><h5 id="stream流中间操作，转换流：flatMap"><a href="#stream流中间操作，转换流：flatMap" class="headerlink" title="stream流中间操作，转换流：flatMap"></a>stream流中间操作，转换流：flatMap</h5><p>flatMap可以把流中的一条元素返回多个流，（自动化展开，扁平化处理。例如：就是把一个集合对象展开，返回集合中的元素，然后返回的元素被流包裹）然后把多条流串联起来。</p><p>map也是一个转换流，只不过是一对一的转换流，把流转换成流中元素函数处理后的新的流。（类似JS中map遍历，返回循环体每次对遍历元素处理后的结果，返回处理后的集合）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>     strings.add(<span class="hljs-string">&quot;1&quot;</span>);<br>     strings.add(<span class="hljs-string">&quot;2&quot;</span>);<br>     strings.add(<span class="hljs-string">&quot;3&quot;</span>);<br><br>     <span class="hljs-type">AddressVO</span> <span class="hljs-variable">addressVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressVO</span>();<br><br>     addressVO.setId(<span class="hljs-number">0L</span>);<br>     addressVO.setContent(strings);<br><br>     <span class="hljs-type">AddressVO</span> <span class="hljs-variable">addressVO2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressVO</span>();<br><br>     addressVO2.setId(<span class="hljs-number">1L</span>);<br>     addressVO2.setContent(strings);<br><br>     ArrayList&lt;AddressVO&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>     arrayList.add(addressVO);<br>     arrayList.add(addressVO2);<br><br>     List&lt;Object&gt; collect = arrayList.stream().flatMap((Function&lt;AddressVO, Stream&lt;?&gt;&gt;) addressVO1 -&gt; addressVO1.getContent().stream()).collect(Collectors.toList());<br><br>     <span class="hljs-keyword">for</span> (Object o:collect)&#123;<br><br>         System.out.println(o);<br>     &#125;<br></code></pre></td></tr></table></figure><p><img src="/file/20220815180900.png"></p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>1.设计模式：代理模式</p><p>代理对象可以察觉到它代理的实例对象的调用，在代理对象中就可以加入自己的业务代码。</p><p><strong>实现<strong><strong>AOP</strong></strong>的两种技术**</strong>(<strong><strong>方式</strong></strong>)** </p><h5 id="JDK的Proxy技术"><a href="#JDK的Proxy技术" class="headerlink" title="JDK的Proxy技术"></a>JDK的Proxy技术</h5><p>在使用Proxy代理对象的时候，对需要代理的实例对象由一些要求，目标对象必须实现了接口 </p><p>原理就是去实现目标对象实现的所有接口，创建一个它的实现类作为代理类 </p><p>接口：StudentService创建它的代理类，就创建一个StudentServiceImpl去 </p><p>实现StudentService的所有接口 </p><h5 id="CGLIB技术实现"><a href="#CGLIB技术实现" class="headerlink" title="CGLIB技术实现"></a>CGLIB技术实现</h5><p>这个API创建代理类的时候即使目标类没有实现任何接口也可以创建代理对象 </p><p>原理就是创建一个目标类的子类作为代理对象。</p><h5 id="使用注解创建"><a href="#使用注解创建" class="headerlink" title="使用注解创建"></a>使用注解创建</h5><p>步骤1：创建接口。创建接口的实现类作为目标类。</p><p>步骤2：创建切面类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>:  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>:     </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Component</span> 被Spring管理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Aspect</span> 声明他是一个aop的类（切面类）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br>    <span class="hljs-comment">/*声明一个切入点，连接点是一个方法，切入点就是被选中的方法 * 被选中的方法可能不止一个，我们定义一个方法用来代表切入点 * UserService.*:UserService中的所有方法 * 把UserService中的所以方法都配置成了切入点 * antMethod方法就作为所有切入点的代表 * */</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.aop.service.UserService.*(..))&quot;)</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">antMethod</span><span class="hljs-params">()</span>&#123;&#125; <br>    <br>    <span class="hljs-comment">/*在目标方法执行前执行*/</span> <br>    <span class="hljs-meta">@Before(&quot;anyMethod()&quot;)</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doBeforeCheck</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>); <br>    &#125;<br>    <span class="hljs-comment">/*在目标方法执行后执行*/</span> <br>    <span class="hljs-meta">@AfterReturning(&quot;anyMethod()&quot;)</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterReturning</span><span class="hljs-params">()</span>&#123; <br>        System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/*无论目标方法是否出现异常都执行 */</span> <br>    <span class="hljs-meta">@After(&quot;anyMethod()&quot;)</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfter</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;最终通知&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在切面类中创建切入点。在切入点中创建连接点。</p><p>步骤3：给切入点配置通知。</p><p>实现效果：调用目标类的方法，会给目标类的对应方法调用通知。</p><h1 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h1><p> 1.原子类<a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&chksm=ebd5d441dca25d57185e386175c0259e2c812e69b840dcaeb86365175f5e17251d04f9779071&idx=1&mid=2247494509&scene=21&sn=f2ec89e631bea4b11e6e3640b0b0e42a#wechat_redirect">相比于普通的锁</a>，粒度更细、效率更高(除了高度竞争的情况下) 。（原子操作线程安全）。<br><img src="/file/20221017154826.png"></p><p> <a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/1880992">原子操作_百度百科 (baidu.com)</a> </p><h1 id="Servlet-post接收form-data参数值java"><a href="#Servlet-post接收form-data参数值java" class="headerlink" title="Servlet post接收form-data参数值java"></a>Servlet post接收form-data参数值java</h1><p>编写接口的时候，使用“multipart/form-data”传输时，如果使用request.getParameter（）接收参数，数值会为null，可以使用下面方法接受数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 针对post请求，设置允许接收中文</span><br>        request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;添加任务&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">DiskFileItemFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DiskFileItemFactory</span>();   <br>            <span class="hljs-type">ServletFileUpload</span> <span class="hljs-variable">upload</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletFileUpload</span>(factory);   <br>            upload.setHeaderEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);  <br>            <span class="hljs-type">List</span> <span class="hljs-variable">items</span> <span class="hljs-operator">=</span> upload.parseRequest(request);  <br>            <span class="hljs-type">Map</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();   <br>            <span class="hljs-keyword">for</span>(Object object:items)&#123;  <br>                <span class="hljs-type">FileItem</span> <span class="hljs-variable">fileItem</span> <span class="hljs-operator">=</span> (FileItem) object;   <br>                <span class="hljs-keyword">if</span> (fileItem.isFormField()) &#123;   <br>                    params.put(fileItem.getFieldName(), fileItem.getString(<span class="hljs-string">&quot;utf-8&quot;</span>));<span class="hljs-comment">//如果你页面编码是utf-8的   </span><br>                &#125;  <br>            &#125;   <br>            <span class="hljs-comment">//使用params.get获取参数值</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">send_time</span> <span class="hljs-operator">=</span> (String) params.get(<span class="hljs-string">&quot;send_time&quot;</span>);<br>             。。。。。。。。<br><br>            <span class="hljs-comment">// 输出数据</span><br>            out.println(<span class="hljs-string">&quot;1&quot;</span>);   <br><br>        &#125; <span class="hljs-keyword">catch</span> (FileUploadException e1) &#123;<br>            e1.printStackTrace();<br>        &#125;   <br>        out.close();<br>    &#125;<br></code></pre></td></tr></table></figure><p>前提是需要导入commons-fileupload-1.3.jar 和 commons-io-2.5.jar 包<br>jar包下载：<br><a href="http://download.csdn.net/download/z740852294/10030503">http://download.csdn.net/download/z740852294/10030503</a></p><h1 id="线程安全的时间操作"><a href="#线程安全的时间操作" class="headerlink" title="线程安全的时间操作"></a>线程安全的时间操作</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取当前时间 （LocalDateTime（线程安全） 代替 Calendar（线程不安全））  </span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();  <br><span class="hljs-comment">//当前时间加分钟  </span><br>now = now.plusMinutes(testItems.getTestTime());  <br><span class="hljs-comment">//LocalDateTime 转 Date</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">deadline</span> <span class="hljs-operator">=</span> Date.from(now.atZone(ZoneId.systemDefault()).toInstant());<br></code></pre></td></tr></table></figure><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><p>1、不带参数的nextInt()会生成所有有效的整数（包含正数，负数，0）</p><p>2、带参的nextInt(int x)则会生成一个范围在0~x（不包含X）内的任意正整数</p><p>　　例如：int x=new Random.nextInt(100);</p><p>　　　　则x为一个0~99的任意整数</p><p>3、生成一个指定范围内的整数</p><p>1.Math.random()方法返回一个[0.0 , 1.0)的伪随机double类型的随机数</p><p>符合在[min,max]范围内的整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>    <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> min + (<span class="hljs-type">int</span>)(Math.random() * (max-min+<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>用nextInt方法生成区间范围内的随机整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Random rand=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br><span class="hljs-type">int</span> n1=rand.nextInt(<span class="hljs-number">100</span>);<span class="hljs-comment">//返回值在范围[0,100) 即[0,99]</span><br><span class="hljs-type">int</span> n2=rand.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<span class="hljs-comment">//[1,100]内的随机整数</span><br><span class="hljs-type">int</span> n3=rand.nextInt(<span class="hljs-number">80</span>)+<span class="hljs-number">10</span>;<span class="hljs-comment">//[10,89]内的随机整数</span><br><span class="hljs-type">int</span> n4=rand.nextInt(<span class="hljs-number">27</span>)+<span class="hljs-number">82</span>;<span class="hljs-comment">//[82,108]内的随机整数</span><br></code></pre></td></tr></table></figure><h1 id="java-POI-笔记"><a href="#java-POI-笔记" class="headerlink" title="java - POI 笔记"></a>java - POI 笔记</h1><p>当单元格内容是空时，可能会出现空指针的情况。</p><p>使用以下方式给单元格赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">c = row.getCell(j);  <br>  <br><span class="hljs-keyword">if</span> (c==<span class="hljs-literal">null</span>)&#123;  <br>    row.createCell(j).setCellValue(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFRichTextString</span>(<span class="hljs-string">&quot;&quot;</span>));  <br>    c = row.getCell(j);  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="java写入文件"><a href="#java写入文件" class="headerlink" title="java写入文件"></a>java写入文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/mapData.json&quot;</span>);  <br>  <br><span class="hljs-keyword">if</span>(!file.exists())&#123;  <br>    file.createNewFile();  <br>&#125;  <br>  <br><span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file.getAbsoluteFile());  <br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fileWriter);  <br>bw.write(jsonObject.toJSONString());  <br>bw.close();  <br>System.out.println(<span class="hljs-string">&quot;finish&quot;</span>);  <br>  <br></code></pre></td></tr></table></figure><h1 id="java中的包装类"><a href="#java中的包装类" class="headerlink" title="java中的包装类"></a>java中的包装类</h1>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
