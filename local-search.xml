<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%82%E6%AD%A5%E6%B8%B2%E6%9F%93%E5%A4%9A%E4%B8%AAecharts/"/>
    <url>/2023/05/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%82%E6%AD%A5%E6%B8%B2%E6%9F%93%E5%A4%9A%E4%B8%AAecharts/</url>
    
    <content type="html"><![CDATA[<h1 id="Page设置"><a href="#Page设置" class="headerlink" title="Page设置"></a>Page设置</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面的初始数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-comment">//开启懒加载</span><br>    <span class="hljs-attr">ec</span>: &#123;<br>      <span class="hljs-attr">lazyLoad</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">//初始化方法</span><br>  <span class="hljs-attr">init_echarts</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>  &#125;);<br>  <span class="hljs-comment">//配置文件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getOptionOne</span>(<span class="hljs-params"></span>)&#123;&#125;<br></code></pre></td></tr></table></figure><h1 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs wxml">&lt;view style=&quot;height: 250rpx;&quot;&gt;<br>   &lt;ec-canvas id=&quot;lineCanvas1&quot; style=&quot;width:100%;&quot; canvas-id=&quot;lineCanvas1&quot; ec=&quot;&#123;&#123; ec &#125;&#125;&quot;&gt;&lt;/ec-canvas&gt;<br> &lt;/view&gt;<br></code></pre></td></tr></table></figure><h1 id="详细代码及使用方式"><a href="#详细代码及使用方式" class="headerlink" title="详细代码及使用方式"></a>详细代码及使用方式</h1><h2 id="1-在Page中编写初始化公共方法，传入渲染数据和选择器和配置文件"><a href="#1-在Page中编写初始化公共方法，传入渲染数据和选择器和配置文件" class="headerlink" title="1.在Page中编写初始化公共方法，传入渲染数据和选择器和配置文件"></a>1.在Page中编写初始化公共方法，传入渲染数据和选择器和配置文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 初始化图表 （公共方法）</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; chartData  需要渲染的数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; id         需要渲染的ID选择器</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; optionFunc 渲染的配置参数函数</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">init_echarts</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">chartData, id, optionFunc</span>) &#123;<br>    <span class="hljs-comment">// debugger</span><br>    <span class="hljs-comment">//去获取echarts  这里的id就是echarts的id</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">selectComponent</span>(id).<span class="hljs-title function_">init</span>(<span class="hljs-function">(<span class="hljs-params">canvas, width, height, dpr</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 初始化图表</span><br>      <span class="hljs-keyword">let</span> variable = echarts.<span class="hljs-title function_">init</span>(canvas, <span class="hljs-literal">null</span>, &#123;<br>        <span class="hljs-attr">width</span>: width,<br>        <span class="hljs-attr">height</span>: height,<br>        <span class="hljs-attr">devicePixelRatio</span>: dpr, <span class="hljs-comment">// 像素</span><br>      &#125;);<br>      variable.<span class="hljs-title function_">setOption</span>(<span class="hljs-title function_">optionFunc</span>(chartData));<br>    &#125;);<br>  &#125;,<br></code></pre></td></tr></table></figure><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getOptionOne</span>(<span class="hljs-params">chartData</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">grid</span>: &#123;<br>      <span class="hljs-attr">x</span>: <span class="hljs-string">&quot;0%&quot;</span>,<br>      <span class="hljs-attr">y</span>: <span class="hljs-string">&quot;0%&quot;</span>,<br>      <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;98%&quot;</span>,<br>      <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;100%&quot;</span>,<br>      <span class="hljs-comment">// grid 区域是否包含坐标轴的刻度标签</span><br>      <span class="hljs-attr">containLabel</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>    <span class="hljs-attr">xAxis</span>: [<br>      &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;category&quot;</span>,<br>        <span class="hljs-attr">boundaryGap</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>    ],<br>    <span class="hljs-attr">yAxis</span>: [<br>      &#123;<br>        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">scale</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">axisLine</span>: &#123;<br>          <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>        <span class="hljs-attr">axisTick</span>: &#123;<br>          <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>        <span class="hljs-attr">splitLine</span>: &#123;<br>          <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>    <span class="hljs-attr">series</span>: [<br>      &#123;<br>        <span class="hljs-attr">data</span>: chartData.<span class="hljs-property">actualIntake</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;line&quot;</span>,<br>        <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">showSymbol</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//隐藏转折点</span><br>        <span class="hljs-attr">itemStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        &#125;,<br>        <span class="hljs-attr">lineStyle</span>: &#123;<br>          <span class="hljs-comment">//实现折现阴影</span><br>          <span class="hljs-attr">width</span>: <span class="hljs-number">4</span>, <span class="hljs-comment">//粗细</span><br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#4E70FF&quot;</span>,<br>          <span class="hljs-attr">shadowOffsetX</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 折线的X偏移</span><br>          <span class="hljs-attr">shadowOffsetY</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 折线的Y偏移</span><br>          <span class="hljs-attr">shadowBlur</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 折线模糊</span><br>          <span class="hljs-attr">shadowColor</span>: <span class="hljs-string">&quot;rgba(145, 132, 132, 0.2)&quot;</span>, <span class="hljs-comment">//折线颜色</span><br>        &#125;,<br>        <span class="hljs-attr">areaStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;linear&quot;</span>,<br>            <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">x2</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">y2</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">colorStops</span>: [<br>              &#123;<br>                <span class="hljs-attr">offset</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;rgba(56,92,223,0.48)&quot;</span>, <span class="hljs-comment">// 0% 处的颜色</span><br>              &#125;,<br>              &#123;<br>                <span class="hljs-attr">offset</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;rgba(30,209,193,0)&quot;</span>, <span class="hljs-comment">// 100% 处的颜色</span><br>              &#125;,<br>            ],<br>            <span class="hljs-attr">global</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 缺省为 false</span><br>          &#125;,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">data</span>: chartData.<span class="hljs-property">recommendedIntake</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;line&quot;</span>,<br>        <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">showSymbol</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//隐藏转折点</span><br>        <span class="hljs-attr">itemStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        &#125;,<br>        <span class="hljs-attr">lineStyle</span>: &#123;<br>          <span class="hljs-comment">//实现折现阴影</span><br>          <span class="hljs-attr">width</span>: <span class="hljs-number">4</span>, <span class="hljs-comment">//粗细</span><br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#4efbc0&quot;</span>,<br>          <span class="hljs-attr">shadowOffsetX</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 折线的X偏移</span><br>          <span class="hljs-attr">shadowOffsetY</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 折线的Y偏移</span><br>          <span class="hljs-attr">shadowBlur</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 折线模糊</span><br>          <span class="hljs-attr">shadowColor</span>: <span class="hljs-string">&quot;#4efbc0&quot;</span>, <span class="hljs-comment">//折线颜色</span><br>        &#125;,<br>        <span class="hljs-attr">areaStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;linear&quot;</span>,<br>            <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">x2</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">y2</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">colorStops</span>: [<br>              &#123;<br>                <span class="hljs-attr">offset</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;rgba(233, 255, 252,1)&quot;</span>, <span class="hljs-comment">// 0% 处的颜色</span><br>              &#125;,<br>              &#123;<br>                <span class="hljs-attr">offset</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;rgba(233, 255, 252,0)&quot;</span>, <span class="hljs-comment">// 100% 处的颜色</span><br>              &#125;,<br>            ],<br>            <span class="hljs-attr">global</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 缺省为 false</span><br>          &#125;,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-调用示例"><a href="#3-调用示例" class="headerlink" title="3.调用示例"></a>3.调用示例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init_echarts</span>(<br><span class="hljs-comment">//渲染的数据</span><br>          &#123;<br>            <span class="hljs-attr">recommendedIntake</span>: result01.<span class="hljs-property">jsonArray</span>.<span class="hljs-title function_">map</span>(<br>              <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">recommendedIntake</span><br>            ),<br>            <span class="hljs-attr">actualIntake</span>: result01.<span class="hljs-property">jsonArray</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">actualIntake</span>),<br>          &#125;,<br><span class="hljs-comment">//选择器</span><br>          <span class="hljs-string">&quot;#lineCanvas1&quot;</span>,<br><span class="hljs-comment">//配置文件</span><br>          getOptionOne<br>        );<br></code></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>当后端数据返回时图表才渲染。</p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20230519164340.png" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go闭包</title>
    <link href="/2023/01/04/go%E9%97%AD%E5%8C%85/"/>
    <url>/2023/01/04/go%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p><strong>闭包</strong>:分内外两层 （外层函数 内层函数） 调用外层函数变量,函数变量不随着外函数销毁,而是随着内函数结束才销毁。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//A是外部函数 函数返回值类型是func() int</span><br><span class="hljs-comment">//函数结构：func 函数名() 返回值&#123;&#125;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">A</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;  <br>  <br>   a := <span class="hljs-number">0</span>  <br>   <span class="hljs-comment">//这是匿名内部函数</span><br>   d := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;  <br>      a++  <br>      <span class="hljs-keyword">return</span> a  <br>   &#125;  <br>  <br>   <span class="hljs-keyword">return</span> d  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github上的go教程</title>
    <link href="/2023/01/03/github%E4%B8%8A%E7%9A%84go%E6%95%99%E7%A8%8B/"/>
    <url>/2023/01/03/github%E4%B8%8A%E7%9A%84go%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md">the-way-to-go_ZH_CN/directory.md at master · unknwon/the-way-to-go_ZH_CN · GitHub</a></li><li><a href="https://github.com/GrowingGit/GitHub-Chinese-Top-Charts/blob/master/content/charts/overall/knowledge/Go.md">GitHub-Chinese-Top-Charts/Go.md at master · GrowingGit/GitHub-Chinese-Top-Charts · GitHub</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>github上的go教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于使用overflow-y auto不生效的问题</title>
    <link href="/2022/12/20/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8overflow-y%20auto%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/12/20/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8overflow-y%20auto%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1653389525308-e7ab9fc0c260?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzE1MDEzMzE&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Rubaitul Azad on Unsplash"></p><p>我们都知道想要实现局部滚动，就得用css中<strong>overflow-y:auto</strong>或<strong>overflow-x:auto</strong>属性，实现纵向/横向滚动。使用这个属性的必备条件就是给这个局部滚动的视窗一个固定的高。</p><h1 id="1-失效场景"><a href="#1-失效场景" class="headerlink" title="1.失效场景"></a>1.失效场景</h1><h2 id="父容器高度设置的是百分比"><a href="#父容器高度设置的是百分比" class="headerlink" title="父容器高度设置的是百分比"></a>父容器高度设置的是百分比</h2><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221220100325.png"></p><h2 id="子容器根据（父容器高度-tabBar栏）-设置固定高度，溢出滚动-失效。"><a href="#子容器根据（父容器高度-tabBar栏）-设置固定高度，溢出滚动-失效。" class="headerlink" title="子容器根据（父容器高度 - tabBar栏） 设置固定高度，溢出滚动 失效。"></a>子容器根据（父容器高度 - tabBar栏） 设置固定高度，溢出滚动 失效。</h2><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221220100455.png"></p><h1 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h1><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221220100620.png"><br>给父容器设置固定高度，不要用设置百分比。</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><p>如果父容器高度为百分比，子容器根据父容器百分比设置，整个overflow属性都会失效。实现overflow的效果必须有一个固定高，父容器也必须是固定的高。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>行内块元素带来的空格或空白问题</title>
    <link href="/2022/12/17/%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%A9%BA%E6%A0%BC%E6%88%96%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98/"/>
    <url>/2022/12/17/%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%A9%BA%E6%A0%BC%E6%88%96%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1582201942930-53fea460eeeb?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzEyODk4MTA&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Birmingham Museums Trust on Unsplash"></p><p>出现空白间隙的原因是，元素被当成行内元素排版的时候，元素之间的空白符（空格、回车换行等）都会被浏览器处理，根据white-space的处理方式（默认是normal，合并多余空白），原来HTML代码中的回车换行被转成一个空白符，所以元素之间就出现了空隙。这些元素之间的间距会随着字体的大小而变化，当行内元素font-size:16px时，间距为8px。</p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221217231044.png"></p><p><a href="https://www.cnblogs.com/viulu/p/11614349.html">解决行内块元素（inline-block）之间的空格或空白问题 - 风一样的六六 - 博客园 (cnblogs.com)</a></p><p>inline-block布局实现三栏式的css代码css样式部分：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">div</span> &#123;<br><br>    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">200px</span>;<br><br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br><br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br><br>&#125;<br><br><span class="hljs-selector-class">.layout</span><span class="hljs-selector-class">.inline-block</span> <span class="hljs-selector-class">.left-center-right</span>&gt;<span class="hljs-selector-tag">div</span> &#123;<br><br>    <span class="hljs-attribute">display</span>: inline-block;<br><br>    <span class="hljs-attribute">vertical-align</span>: top;<br><br>&#125;<br><br><span class="hljs-selector-class">.layout</span><span class="hljs-selector-class">.inline-block</span> <span class="hljs-selector-class">.left</span> &#123;<br><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br><br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;<br><br>&#125;<br><br><span class="hljs-selector-class">.layout</span><span class="hljs-selector-class">.inline-block</span> <span class="hljs-selector-class">.center</span> &#123;<br><br>    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">300px</span> - <span class="hljs-number">300px</span>);<br><br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#ddd</span>;<br><br>&#125;<br><br><span class="hljs-selector-class">.layout</span><span class="hljs-selector-class">.inline-block</span> <span class="hljs-selector-class">.right</span> &#123;<br><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br><br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实际效果如图所示：</p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221217231558.png"></p><p>出现空白间隙的原因是，元素被当成行内元素排版的时候，元素之间的空白符（空格、回车换行等）都会被浏览器处理，根据white-space的处理方式（默认是normal，合并多余空白），原来HTML代码中的回车换行被转成一个空白符，所以元素之间就出现了空隙。这些元素之间的间距会随着字体的大小而变化，当行内元素font-size:16px时，间距为8px。</p><p>那么去除空白间隙有哪些方法呢，下面列举几个不限于inline-block用于布局场景的解决方法~</p><h2 id="一、去除元素间的空白"><a href="#一、去除元素间的空白" class="headerlink" title="一、去除元素间的空白"></a>一、去除元素间的空白</h2><p>通过将上一个元素的闭合标签与下一个元素的开始标签写在同一行，可以去除元素间的空白，或者将两个inline-block元素间加上空白注释，或者不写元素的闭合标签等，例如这么写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>one&lt;/li  <br><br>    &gt;<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>two&lt;/li  <br><br>    &gt;<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>three<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- or --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>one<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-comment">&lt;!--  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>two<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-comment">&lt;!--  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>three<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、父元素设置font-size为0，子元素单独再设置字体大小"><a href="#二、父元素设置font-size为0，子元素单独再设置字体大小" class="headerlink" title="二、父元素设置font-size为0，子元素单独再设置字体大小"></a>二、父元素设置font-size为0，子元素单独再设置字体大小</h2><p>如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.layout</span><span class="hljs-selector-class">.inline-block</span> <span class="hljs-selector-class">.left-center-right</span> &#123;<br><br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-selector-class">.layout</span><span class="hljs-selector-class">.inline-block</span> <span class="hljs-selector-class">.left-center-right</span>&gt;<span class="hljs-selector-tag">div</span> &#123;<br><br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、设置margin-right为负值"><a href="#三、设置margin-right为负值" class="headerlink" title="三、设置margin-right为负值"></a>三、设置margin-right为负值</h2><p>用margin负值来抵掉元素间的空白，不过margin负值的大小与上下文的字体和文字大小相关，并且同一大小的字体，元素之间的间距在不同浏览器下是不一样的，如：font-size:16px时，Chrome下元素之间的间距为8px,而Firefox下元素之间的间距为4px。所以这个方法并不通用，也相对比较麻烦，因此不太推荐使用。</p><h2 id="四、给inline-block元素加float或者flex"><a href="#四、给inline-block元素加float或者flex" class="headerlink" title="四、给inline-block元素加float或者flex"></a>四、给inline-block元素加float或者flex</h2><p>让行内块元素浮动起来，或者给父盒子加上display: flex; 都可以解决空白间隙的问题，不过这样处理的三栏式布局也就没必要用inline-block啦。</p><h2 id="五、设置字符间距或单词间距"><a href="#五、设置字符间距或单词间距" class="headerlink" title="五、设置字符间距或单词间距"></a>五、设置字符间距或单词间距</h2><p>这两个方法的原理有点像二所用的font-size，具体做法是给父元素一个letter-spacing或者word-spacing的负值，子元素再调整为0即可，具体使用字符间距还是单词间距其实大同小异。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* letter-spacing */</span><br><br><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-class">.left-center-right</span>&#123;<br><br>     <span class="hljs-attribute">letter-spacing</span>: -<span class="hljs-number">0.5em</span>;<br><br>&#125;<br><br><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-class">.left-center-right</span>&gt;<span class="hljs-selector-tag">div</span>&#123;<br><br>     <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-comment">/* word-spacing */</span><br><br><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-class">.left-center-right</span>&#123;<br><br>     <span class="hljs-attribute">word-spacing</span>: -<span class="hljs-number">0.5em</span>;<br><br>&#125;<br><br><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-class">.left-center-right</span>&gt;<span class="hljs-selector-tag">div</span>&#123;<br><br>     <span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue中props父子组件传参</title>
    <link href="/2022/12/16/vue%E4%B8%ADprops%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82/"/>
    <url>/2022/12/16/vue%E4%B8%ADprops%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1651589091693-c55e2d0d0032?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzEwODQ5MzQ&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Cory Bunge on Unsplash"></p><p>vue是<strong>单向数据流</strong>，父组件通过props传值给子组件，如果在子组件中修改会报错，一般是不在子组件中修改props的，但偶尔有需要在子组件有修改props,这里介绍三种可以修改子组件props的方法。</p><h1 id="1-父组件用sync修饰，子组件通过-emit-‘update-参数’，值-函数去修改。在项目中通常可以用改方法关闭弹框。"><a href="#1-父组件用sync修饰，子组件通过-emit-‘update-参数’，值-函数去修改。在项目中通常可以用改方法关闭弹框。" class="headerlink" title="1.父组件用sync修饰，子组件通过$emit(‘update:参数’，值)函数去修改。在项目中通常可以用改方法关闭弹框。"></a>1.父组件用sync修饰，子组件通过$emit(‘update:参数’，值)函数去修改。在项目中通常可以用改方法关闭弹框。</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>//父组件<br>   &lt;CommonDialog<br>     :title=&quot;dialogTitle&quot;<br>     :showDialog.sync=&quot;isShowDialog&quot;<br>     :footer=&quot;true&quot;<br>     :width=&quot;dialogWidth&quot;<br>   &gt;<br>  ....<br>   &lt;/CommonDialog&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><template>    //父组件   <CommonDialog     :title="dialogTitle"     :showDialog.sync="isShowDialog"     :footer="true"     :width="dialogWidth"   >      ....   </CommonDialog></template><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">//子组件 弹框是否打开props: showDialog<br>&lt;el-dialog :title=&quot;title&quot; :visible=&quot;showDialog&quot; :show-close=&quot;false&quot; :width=&quot;width&quot;&gt;<br>      &lt;i class=&quot;el-dialog__headerbtn&quot; @click=&quot;closeModal&quot;&gt;<br>        &lt;span class=&quot;iconfont iconclose&quot;&gt;&lt;/span&gt;<br>      &lt;/i&gt;<br>      &lt;div class=&quot;dialog-body&quot;&gt;<br>          &lt;slot&gt;&lt;/slot&gt;<br>      &lt;/div&gt;<br>      &lt;div v-if=&quot;!footer&quot; slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;<br>        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;<br>      &lt;/div&gt;<br>    &lt;/el-dialog&gt;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//关闭弹框------子组件修改props</span><br> <span class="hljs-title function_">closeModal</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;update:showDialog&quot;</span>, <span class="hljs-literal">false</span>);<br> &#125;,<br></code></pre></td></tr></table></figure><h1 id="2-如果props是对象，在子组件中修改props"><a href="#2-如果props是对象，在子组件中修改props" class="headerlink" title="2.如果props是对象，在子组件中修改props"></a>2.如果props是对象，在子组件中修改props</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;csd-select&quot;&gt;<br>    &lt;el-popover<br>      placement=&quot;bottom&quot;<br>      :width=&quot;width&quot;<br>      :trigger=&quot;config.trigger&quot;<br>      :config=&quot;config&quot;<br>      transition=&quot;fade-in&quot;<br>      popper-class=&quot;casade-selector&quot;<br>      v-model=&quot;options_show&quot;<br>    &gt;<br>...<br>    &lt;/el-popover&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;CasadeSelector&quot;,<br>  props: &#123;<br>    config: &#123;<br>      type: Object,<br>      //让props默认返回<br>      default() &#123;<br>        return &#123;&#125;;<br>      &#125;<br>    &#125;,<br>  &#125;,<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="3-props是双向绑定的"><a href="#3-props是双向绑定的" class="headerlink" title="3.props是双向绑定的"></a>3.props是双向绑定的</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;control v-model=&quot;deviceF&quot;&gt;&lt;/control&gt;<br>&lt;/template&gt;<br><br> //v-model里面写上我们要传给子组件，并且还会在子组件中改变这个值<br> &lt;script&gt;<br> import control from &#x27;@/components/control&#x27;<br> export default &#123;<br>    name:&quot;test&quot;,<br>    components: &#123;<br>        control<br>    &#125;,<br>    data () &#123;<br>        return &#123;<br>        deviceF: true,<br>        &#125;<br>    &#125;<br>&#125;<br> &lt;/script&gt;<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div&gt;<br>       &#123;&#123;device&#125;&#125;<br>       &lt;button @click=&quot;look&quot;&gt;改变值&lt;/button&gt;<br>   &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br> data () &#123;<br>   return &#123;<br>     device: this.value,  //定义一下<br>   &#125;<br> &#125;,<br> props: [&#x27;value&#x27;],//因为想要改变device，所以device要写成value，这里是写死的<br> components: &#123;<br> &#125;,<br> methods: &#123;<br>   look () &#123;<br>     this.device = !this.device<br>     this.$emit(&#x27;input&#x27;, this.device)  //这样this.device就会被修改；前面的input是固定写死的<br>   &#125;<br> &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爷孙或者更深嵌套的组件间传值： provide/inject</title>
    <link href="/2022/12/14/%E7%88%B7%E5%AD%99%E6%88%96%E8%80%85%E6%9B%B4%E6%B7%B1%E5%B5%8C%E5%A5%97%E7%9A%84%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E5%80%BC%EF%BC%9A%20provide%EF%BC%8Cinject/"/>
    <url>/2022/12/14/%E7%88%B7%E5%AD%99%E6%88%96%E8%80%85%E6%9B%B4%E6%B7%B1%E5%B5%8C%E5%A5%97%E7%9A%84%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E5%80%BC%EF%BC%9A%20provide%EF%BC%8Cinject/</url>
    
    <content type="html"><![CDATA[<p>Vue的父子间传值 ： props</p><p>更复杂的结构：vuex</p><p><strong>provide/inject<br>提供/注入</strong></p><blockquote><p>provide<br>一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 ES2015 Symbols 作为 key，但是只在原生支持 Symbol 和 Reflect.ownKeys 的环境下可工作。</p></blockquote><blockquote><p>inject<br>一个字符串数组，或一个对象</p></blockquote><p>使用场景<br>例如这样的层次结构</p><p>Root<br>└─ 组件A<br>   ├─ 组件B<br>   └─ 组件C<br>      ├─ 组件D<br>      └─ 组件E</p><p>如果要将 组件A 的数据直接传递给 组件E，我们要将 prop 逐级传递下去：组件A -&gt; 组件C -&gt; 组件E。</p><p>而通过*provide/inject *，可直接从 组件A传递给 组件E</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h3 id="父组件-祖先组件-，提供provide"><a href="#父组件-祖先组件-，提供provide" class="headerlink" title="父组件/祖先组件 ，提供provide"></a>父组件/祖先组件 ，提供provide</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;grandfather&quot;</span>,<br>  <span class="hljs-title function_">provide</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>&#123;<br>      <span class="hljs-attr">foo</span>:<span class="hljs-string">&#x27;halo&#x27;</span><br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//第二种</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;grandfather&quot;</span>,<br>  <span class="hljs-attr">provide</span>:&#123;<br>    <span class="hljs-attr">foo</span>:<span class="hljs-string">&#x27;halo~~~~&#x27;</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 后代组件 ，注入inject</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">inject</span>:[<span class="hljs-string">&#x27;foo&#x27;</span>],<br>&#125;<br></code></pre></td></tr></table></figure><p>provide方法</p><p>祖先组件的<strong>provide</strong>方法<strong>只建议第一种</strong>，即函数写法。若想传递的数据只是字符串，两种方式并无区别，但是<strong>第二种方法（对象写法）不能传递对象</strong>。</p><p><strong>provide/inject 不是可响应的</strong></p><p>provide 和 inject 绑定并不是可响应的。这是刻意为之的。<strong>然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的</strong>。</p><h3 id="我们可以通过传递一个对象的方式，实现数据的响应式。"><a href="#我们可以通过传递一个对象的方式，实现数据的响应式。" class="headerlink" title="我们可以通过传递一个对象的方式，实现数据的响应式。"></a>我们可以通过传递一个对象的方式，实现数据的响应式。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 祖先组件</span><br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">obj</span>:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;dax1&#x27;</span>&#125;,<br>  &#125;<br>&#125;<br><span class="hljs-title function_">provide</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span>&#123;<br>    <span class="hljs-attr">username</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">obj</span><span class="hljs-comment">// 此处provide一个对象</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 后代组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">inject</span>: [<span class="hljs-string">&#x27;username&#x27;</span>]    <br>&#125;<br></code></pre></td></tr></table></figure><p>此时 username是响应式的数据，<strong>因为对象的属性是响应的</strong>。</p><p>provide/inject 只能从祖先传递给后代，但是可以通过在App.vue绑定provide，所有的子组件就都能注入inject，从而达到全局传递</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>vue</tag>
      
      <tag>组件传参</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MAC 电脑的SSD 寿命查看</title>
    <link href="/2022/12/14/MAC%20%E7%94%B5%E8%84%91%E7%9A%84SSD%20%E5%AF%BF%E5%91%BD%E6%9F%A5%E7%9C%8B/"/>
    <url>/2022/12/14/MAC%20%E7%94%B5%E8%84%91%E7%9A%84SSD%20%E5%AF%BF%E5%91%BD%E6%9F%A5%E7%9C%8B/</url>
    
    <content type="html"><![CDATA[<p>用MAC 的人应该现在大多都是选择SSD 做为使用，虽然现在有些型号的标配还是有传统硬碟，毕竟SSD 现在的使用寿命认真来说会比传统硬碟长很多，不过SSD 坏掉的话，大致上比起传统硬碟更难修复，或读取到坏掉的资料，因此还是要稍微注意一下自己的SSD 寿命，或是读写次数等，今天就来分享一个小工具，让我们直接透过内建的终端机，输入几行指令就可以快速查询SSD 已经损耗了多少。</p><h3 id="查询MAC-的SSD-寿命教程："><a href="#查询MAC-的SSD-寿命教程：" class="headerlink" title="查询MAC 的SSD 寿命教程："></a>查询MAC 的SSD 寿命教程：</h3><p>在启动台里先找到终端机后执行。</p><p>在终端机里输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">/usr/bin/ruby -e <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>这行指令主要是用来安装Homebrew，这其实在很多第三方工具的安装都会需要用到的指令，然后输入你的电脑密码后就会开始安装，大概需要3~5 分钟左右。</p><p>接下来就可以安装我们要使用的SSD 查询工具，输入以下指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install smartmontools<br></code></pre></td></tr></table></figure><p>然后输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">diskutil list<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221214194542.png"></p><p>来查一下你的磁碟代码，在最右边那排代码里，基本上如果你本来就只有一颗SSD 应该就也不用看，用disk0 或disk1 应该查询结果都会是一样。</p><p>如果你是SSD 跟HD 都有的话，那就要看一下容量做比对，看一下你的SSD 代码是哪一个。</p><p>最后再输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">smartctl -a disk1s1<br></code></pre></td></tr></table></figure><p>其中的disk1s1 可以换成你查到的代码，像是用disk0 或disk1 也都可以。</p><p>跑出结果后，只要看Percentage Used 这一行，这是已使用的百分比，0% 就代表都还没有损耗掉，寿命就是100%，所以与其说是查询寿命，不如说是容量损耗了多少，有点类似以前HD 坏轨的百分比吧。<br><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221214194626.png"></p>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>RAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义vue组件并实现双向绑定</title>
    <link href="/2022/12/12/%E8%87%AA%E5%AE%9A%E4%B9%89vue%E7%BB%84%E4%BB%B6%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <url>/2022/12/12/%E8%87%AA%E5%AE%9A%E4%B9%89vue%E7%BB%84%E4%BB%B6%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1653389525308-e7ab9fc0c260?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzA4MzUxMzM&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Rubaitul Azad on Unsplash"></p><h1 id="1-自定义组件代码"><a href="#1-自定义组件代码" class="headerlink" title="1.自定义组件代码"></a>1.自定义组件代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;!-- 时间选择框 --&gt;<br>&lt;view class=&quot;modal&quot; @tap=&quot;close()&quot;&gt;<br><br>&lt;view class=&quot;modal-tips&quot; :class=&quot;isClose?&#x27;modal-off&#x27;:&#x27;modal-on&#x27;&quot;&gt;<br><br>&lt;!-- 头部标题 --&gt;<br>&lt;view class=&quot;modal-tips-title&quot;&gt;<br>&lt;view class=&quot;modal-tips-title-left&quot;&gt;<br>&lt;view&gt;服务时间选择&lt;/view&gt;<br>&lt;view&gt;服务时间区间只能选择近60天内&lt;/view&gt;<br>&lt;/view&gt;<br>&lt;view class=&quot;modal-tips-title-right&quot; @tap=&quot;close()&quot;&gt;<br>&lt;image :src=&quot;config.APIHOSTTwo+&#x27;/static/close@2x.png&#x27;&quot; mode=&quot;widthFix&quot;<br>style=&quot;height: 32rpx;width: 32rpx;;&quot;&gt;<br>&lt;/image&gt;<br>&lt;/view&gt;<br>&lt;/view&gt;<br>&lt;!-- 选择内容 --&gt;<br>&lt;view class=&quot;modal-tips-select&quot;&gt;<br><br>&lt;scroll-view class=&quot;modal-tips-select-left&quot; scroll-y=&quot;true&quot;&gt;<br><br>&lt;view @tap.stop=&quot;select(item,index)&quot; v-for=&quot;(item,index) in dataLeftList&quot; :key=&quot;index&quot;&gt;<br><br>&lt;view v-if=&quot;currYear!=item.year&amp;&amp;item.newYear==true&quot; class=&quot;notcurrYear&quot;&gt;<br>&#123;&#123;item.year+&quot;年&quot;&#125;&#125;<br>&lt;/view&gt;<br><br>&lt;view class=&quot;modal-tips-select-left-item&quot; :class=&quot;&#123;&#x27;selected&#x27;:currIndex==index&#125;&quot;&gt;<br>&#123;&#123;item.dayDisplay&#125;&#125;<br>&lt;/view&gt;<br><br>&lt;/view&gt;<br><br>&lt;/scroll-view&gt;<br><br>&lt;view class=&quot;modal-tips-select-right&quot;&gt;<br><br>&lt;view @tap.stop=&quot;selectRight(item,index)&quot; v-for=&quot;(item,index) in dataRightList&quot;<br>:class=&quot;&#123;&#x27;disable&#x27;:item.type==&#x27;不可预约&#x27;,&#x27;selected&#x27;:currRightIndex==index&amp;&amp;item.type==&#x27;可预约&#x27;,&#x27;default&#x27;:item.type==&#x27;可预约&#x27;&amp;&amp;currRightIndex!=index&#125;&quot;<br>:key=&quot;index&quot;&gt;<br>&lt;view&gt;&#123;&#123;item.time&#125;&#125;&lt;/view&gt;<br>&lt;view&gt;&#123;&#123;item.type&#125;&#125;&lt;/view&gt;<br>&lt;/view&gt;<br><br>&lt;/view&gt;<br><br>&lt;/view&gt;<br><br>&lt;!-- 确定时间 --&gt;<br>&lt;view class=&quot;modal-tips-down&quot;&gt;<br>&lt;button @tap.stop=&quot;confirTime()&quot;&gt;确定时间&lt;/button&gt;<br>&lt;/view&gt;<br><br>&lt;/view&gt;<br>&lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import config from &#x27;@/common/config.js&#x27;<br>/**<br> * 服务时间选择<br> */<br>export default &#123;<br>props: &#123;<br>// orderId: &#123; //订单ID<br>// type: String,<br>// default: &#x27;&#x27;<br>// &#125;,<br>// selectServiceTime: &#123; //选择服务时间<br>// type: Boolean,<br>// default: false<br>// &#125;,<br>obj: &#123;<br>type: Object,<br>default: &#123;&#125;<br>&#125;,<br>&#125;,<br><br>// model: &#123;<br>// prop: &#x27;obj&#x27;, // 指定 v-model 要绑定的参数叫什么名字，来自于 props 中定义的参数<br>// event: &#x27;input&#x27;, // 指定要触发的事件名字，将被用于 $emit<br>// &#125;,<br>data() &#123;<br>return &#123;<br>config,<br>currIndex: 0,<br>currRightIndex: 0,<br>//左侧选择框<br>dataLeftList: [],<br>timer: null,<br>//右侧选择框<br>dataRightList: []<br>&#125;<br>&#125;,<br><br>mounted() &#123;<br>// debugger<br>this.getDate(60)<br>this.loadData();<br>&#125;,<br><br>onShow() &#123;&#125;,<br><br>//销毁监听<br>onUnload() &#123;<br>clearTimeout(this.timer)<br>&#125;,<br>methods: &#123;<br><br>/**<br> * 加载数据<br> */<br>async loadData() &#123;<br><br>let that = this;<br>uni.showLoading(&#123;<br>title: &#x27;加载中...&#x27;<br>&#125;);<br><br>try &#123;<br><br>let res = await this.$Request.ajaxTokenPost(&#123;<br>method: &quot;com.ase.order.handler.OrderTodayHamdler.serviceTime&quot;,<br>params: &#123;<br>productId: that.obj.productId,<br>serviceDate: that.dataLeftList[that.currIndex].date<br>&#125;<br>&#125;);<br><br>uni.hideLoading();<br><br>if (res.result) &#123;<br><br>that.dataRightList = res.result;<br><br>&#125; else if (res.error) &#123;<br>uni.showToast(&#123;<br>icon: &#x27;none&#x27;,<br>title: res.error,<br>duration: 3000<br>&#125;);<br>&#125;<br><br>//捕获异常<br>&#125; catch (error) &#123;<br><br>uni.showToast(&#123;<br>icon: &#x27;none&#x27;,<br>title: error.error,<br>duration: 3000<br>&#125;);<br>&#125;<br>&#125;,<br><br>/**<br> * 确认时间<br> */<br>async confirTime() &#123;<br><br>let that = this;<br>uni.showLoading(&#123;<br>title: &#x27;加载中...&#x27;<br>&#125;);<br><br>try &#123;<br>// debugger<br>if (that.dataRightList[that.currRightIndex].type == &quot;不可预约&quot;) &#123;<br>uni.showToast(&#123;<br>icon: &#x27;none&#x27;,<br>title: &#x27;请选择服务时间&#x27;,<br>duration: 1000<br>&#125;);<br>return;<br>&#125;<br>let serviceTime = that.dataLeftList[that.currIndex].date + &quot; &quot; + that.dataRightList[that<br>.currRightIndex].time<br><br>let res = await this.$Request.ajaxTokenPost(&#123;<br>method: &quot;com.ase.order.handler.OrderJsonRpcHandler.submitServiceTime&quot;,<br>params: &#123;<br>productId: that.obj.productId,<br>servieTime: serviceTime<br>&#125;<br>&#125;);<br><br>if (res.result) &#123;<br><br>that.close();<br><br>&#125; else if (res.error) &#123;<br>uni.showToast(&#123;<br>icon: &#x27;none&#x27;,<br>title: res.error,<br>duration: 3000<br>&#125;);<br>&#125;<br><br>//捕获异常<br>&#125; catch (error) &#123;<br><br>uni.showToast(&#123;<br>icon: &#x27;none&#x27;,<br>title: error.error,<br>duration: 3000<br>&#125;);<br>&#125; finally &#123;<br>uni.hideLoading();<br>&#125;<br>&#125;,<br><br>select(item, index) &#123;<br>this.currIndex = index;<br>this.loadData();<br>&#125;,<br><br><br>/**<br> * 关闭 弹框<br> */<br>close() &#123;<br>let that = this;<br>//关闭动画<br>that.isClose = true<br>// debugger<br>that.timer = setTimeout(() =&gt; &#123;<br>//关闭弹框<br>//添加 打开动画<br>that.isClose = false<br><br>that.obj.selectServiceTime = false<br>that.obj.show = false<br><br>that.$emit(&#x27;input&#x27;, that.obj)<br><br>&#125;, 0)<br>&#125;,<br><br>selectRight(item, index) &#123;<br><br>if (item.state == &#x27;不可预约&#x27;) &#123;<br>return;<br>&#125;<br>this.currRightIndex = index<br>&#125;,<br><br>/**获取指定天数内的日期<br> * @param &#123;Object&#125; number<br> */<br>getDate(number) &#123;<br>// debugger<br>var date = new Date();<br><br>var base = Date.parse(date); // 转换为时间戳<br>// var year = date.getFullYear(); //获取当前年份<br>// var mon = date.getMonth() + 1; //获取当前月份<br>// var day = date.getDate(); //获取当前日<br><br>var show_day = [&#x27;星期日&#x27;, &#x27;星期一&#x27;, &#x27;星期二&#x27;, &#x27;星期三&#x27;, &#x27;星期四&#x27;, &#x27;星期五&#x27;, &#x27;星期六&#x27;];<br><br>var oneDay = 24 * 3600 * 1000<br><br>for (var i = 0; i &lt; number; i++) &#123; //指定天数后的时间<br><br>var now = new Date(base + oneDay * i);<br><br>var myear = now.getFullYear();<br>var month = now.getMonth() + 1;<br>//在当前月份中第几天<br>var mday = now.getDate()<br>//一个星期中的第几天<br>var wday = now.getDay()<br>// debugger<br>let obj = &#123;<br>year: myear,<br>dayDisplay: month + &#x27;月&#x27; + mday + &#x27;日[&#x27; + (i == 0 ? &#x27;今日&#x27; : show_day[wday]) + &#x27;]&#x27;,<br>date: [myear, month &gt;= 10 ? month : &#x27;0&#x27; + month, mday &gt;= 10 ? mday : &#x27;0&#x27; + mday].join(&#x27;-&#x27;),<br>newYear: month == 1 &amp;&amp; mday == 1 ? true : false<br>&#125;<br><br>this.dataLeftList.push(obj)<br>&#125;<br><br>&#125;<br><br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>button &#123;<br>margin: 0;<br>&#125;<br><br>.modal &#123;<br>// overflow: hidden;<br>// overscroll-behavior-y: contain;<br>position: fixed;<br>height: 100vh;<br>width: 100vw;<br>top: 0;<br>left: 0;<br>background-color: rgba(0, 0, 0, 0.5);<br>z-index: 1000000;<br><br>.modal-tips &#123;<br>width: 100%;<br>// min-height: 272rpx;<br>background: #FFFFFF;<br>border-radius: 16rpx 16rpx 0 0;<br><br>position: absolute;<br>bottom: 0;<br>height: 1000rpx;<br><br>&amp;-title &#123;<br>padding: 30rpx 26rpx 30rpx 24rpx;<br>height: calc(135rpx - 54rpx);<br>display: flex;<br><br>&amp;-left &#123;<br>flex: 3;<br>display: flex;<br>flex-direction: column;<br>justify-content: space-between;<br><br>position: relative;<br><br>&gt;view:nth-of-type(1) &#123;<br>font-family: PingFangSC-Medium;<br>font-weight: 500;<br>font-size: 28rpx;<br>color: #000000;<br>letter-spacing: 0;<br>&#125;<br><br>&gt;view:nth-of-type(2) &#123;<br>font-family: PingFangSC-Regular;<br>font-weight: 400;<br>font-size: 24rpx;<br>color: #9F9F9F;<br>letter-spacing: 0;<br>&#125;<br>&#125;<br><br>&amp;-right &#123;<br>flex: 1;<br><br>&gt;image &#123;<br>position: absolute;<br>right: 30rpx;<br>&#125;<br>&#125;<br><br>border-bottom: 0.5px solid rgba(79, 79, 79, 0.08);<br>&#125;<br><br>&amp;-select &#123;<br>height: 740rpx;<br><br>display: flex;<br><br>&amp;-left &#123;<br>height: 100%;<br>width: 218rpx;<br>background: #EFEFEF;<br><br>.selected &#123;<br>background: #FFFFFF;<br>font-family: PingFangSC-SNaNpxibold !important;<br>font-weight: 600;<br>&#125;<br><br>&amp;-item &#123;<br>height: 98rpx;<br>font-family: PingFangSC-Regular;<br>font-weight: 400;<br>font-size: 24rpx;<br>color: #212121;<br>letter-spacing: 0;<br>line-height: 98rpx;<br>text-align: center;<br>&#125;<br><br>.notcurrYear &#123;<br>height: 40rpx;<br>font-family: PingFangSC-SNaNpxibold;<br>font-weight: 600;<br>font-size: 24rpx;<br>color: #212121;<br>letter-spacing: 0;<br>line-height: 40rpx;<br>background: #FFFFFF;<br><br>padding-left: 26rpx;<br>&#125;<br>&#125;<br><br>&amp;-right &#123;<br>height: calc(100% - 24rpx - 24rpx);<br>width: calc(100% - 218rpx);<br>background: #FFFFFF;<br><br>padding: 24rpx 0;<br><br>display: flex;<br>flex-wrap: wrap;<br>justify-content: space-evenly;<br><br>overflow-y: auto;<br><br>&gt;view &#123;<br>display: flex;<br>flex-flow: column;<br>align-items: space;<br>justify-content: space-evenly;<br>margin-bottom: 3.5%;<br>&#125;<br><br>.selected &#123;<br>// width: 114px;<br>width: 43%;<br>height: 98rpx;<br>background: rgba(255, 121, 121, 0.10);<br>border: 2rpx solid #FF2B2B;<br><br>border-radius: 12px;<br><br>&gt;view:nth-of-type(1) &#123;<br>font-family: PingFangSC-SNaNpxibold;<br>font-weight: 600;<br>font-size: 32rpx;<br>color: #FF2B2B;<br>letter-spacing: 0;<br>text-align: center;<br>line-height: 32rpx;<br>&#125;<br><br>&gt;view:nth-of-type(2) &#123;<br>font-family: PingFangSC-Regular;<br>font-weight: 400;<br>font-size: 20rpx;<br>color: #FF2B2B;<br>letter-spacing: 0;<br>text-align: center;<br>line-height: 20rpx;<br>&#125;<br>&#125;<br><br>.disable &#123;<br>height: 98rpx;<br>width: 43%;<br>background: #F1F1F1;<br>border-radius: 24rpx;<br>// width: 116px;<br><br>&gt;view:nth-of-type(1) &#123;<br>font-family: PingFangSC-SNaNpxibold;<br>font-weight: 600;<br>font-size: 32rpx;<br>color: #505050;<br>letter-spacing: 0;<br>text-align: center;<br>line-height: 32rpx;<br>&#125;<br><br>&gt;view:nth-of-type(2) &#123;<br>font-family: PingFangSC-Regular;<br>font-weight: 400;<br>font-size: 20rpx;<br>color: #505050;<br>letter-spacing: 0;<br>text-align: center;<br>line-height: 20rpx;<br>&#125;<br>&#125;<br><br>.default &#123;<br>height: 98rpx;<br>border: 2rpx solid #DFDFDF;<br>border-radius: 24rpx;<br>// width: 114px;<br>// flex: 1;<br>width: 43%;<br><br>&gt;view:nth-of-type(1) &#123;<br>font-family: PingFangSC-SNaNpxibold;<br>font-weight: 600;<br>font-size: 32rpx;<br>color: #212121;<br>letter-spacing: 0;<br>text-align: center;<br>line-height: 32rpx;<br>&#125;<br><br>&gt;view:nth-of-type(2) &#123;<br>font-family: PingFangSC-Regular;<br>font-weight: 400;<br>font-size: 20rpx;<br>color: #212121;<br>letter-spacing: 0;<br>text-align: center;<br>line-height: 20rpx;<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br><br>&amp;-down &#123;<br>height: calc(121rpx - 44rpx);<br>padding: 22rpx 24rpx;<br>width: calc(100% - 48rpx);<br><br>// position: absolute;<br>bottom: 10rpx;<br><br>button &#123;<br>width: 100%;<br>height: 84rpx;<br>background: #F74761;<br>border-radius: 16rpx;<br><br>font-family: PingFangSC-Medium;<br>font-weight: 500;<br>font-size: 28rpx;<br>color: #FFFFFF;<br>letter-spacing: 0;<br>line-height: 84rpx;<br>&#125;<br><br>button::after &#123;<br>border: none;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h1 id="2-引入组件"><a href="#2-引入组件" class="headerlink" title="2.引入组件"></a>2.引入组件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> serviceTime <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/service-time.vue&quot;</span><br></code></pre></td></tr></table></figure><h1 id="3-定义组件"><a href="#3-定义组件" class="headerlink" title="3.定义组件"></a>3.定义组件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-comment">//定义组件</span><br><span class="hljs-attr">components</span>: &#123;<br><span class="hljs-string">&#x27;service-time&#x27;</span>: serviceTime,<br>&#125;,<br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><br><span class="hljs-attr">obj</span>: &#123;<br><span class="hljs-comment">//选择服务时间</span><br><span class="hljs-attr">selectServiceTime</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">productId</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-attr">order</span>: &#123;&#125;<br>&#125;<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h1 id="4-使用组件"><a href="#4-使用组件" class="headerlink" title="4.使用组件"></a>4.使用组件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;page-meta :page-style=&quot;&#x27;overflow:&#x27;+(obj.show?&#x27;hidden&#x27;:&#x27;visible&#x27;)&quot;&gt;&lt;/page-meta&gt;<br>&lt;view class=&quot;order-page&quot; :class=&quot;[themeClass]&quot; style=&quot;position: relative;background-color: #FFF;min-height: 100vh;&quot;&gt;<br><br>&lt;!-- 时间选择框 --&gt;<br>&lt;service-time v-if=&quot;obj.selectServiceTime&quot; v-model=&quot;obj&quot; :obj=&quot;obj&quot;&gt;<br>&lt;/service-time&gt;<br><br>&lt;/view&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h1 id="5-子组件中改变父组件中双向绑定的值"><a href="#5-子组件中改变父组件中双向绑定的值" class="headerlink" title="5.子组件中改变父组件中双向绑定的值"></a>5.子组件中改变父组件中双向绑定的值</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">that.<span class="hljs-property">obj</span>.<span class="hljs-property">selectServiceTime</span> = <span class="hljs-literal">false</span><br>that.<span class="hljs-property">obj</span>.<span class="hljs-property">show</span> = <span class="hljs-literal">false</span><br>that.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, that.<span class="hljs-property">obj</span>)<span class="hljs-comment">//向input事件传值</span><br></code></pre></td></tr></table></figure><h1 id="6-v-model双向绑定原理"><a href="#6-v-model双向绑定原理" class="headerlink" title="6.v-model双向绑定原理"></a>6.v-model双向绑定原理</h1><p class="note note-success">v-model 是 v-bind:value(:value) 加 v-on:input(@input) 的简写形式<br/>:value用于父组件向子组件传值<br/>@input监听事件，监听子组件中触发的事件</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js中null和undefined的区别</title>
    <link href="/2022/12/06/js%E4%B8%ADnull%E5%92%8Cundefined%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/12/06/js%E4%B8%ADnull%E5%92%8Cundefined%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1658248165140-f58976e1551d?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzAyOTM0Mjk&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Resource Database™ on Unsplash"></p><blockquote><p>Happiness is not in the mere possession of money; it lies in the joy of achievement, in the thrill of creative effort.<br>— <cite>Franklin D. Roosevelt</cite></p></blockquote><p class="note note-primary">undefind 是全局对象的一个属性，当一个变量没有被赋值或者一个函数没有返回值或者某个对象不存在某个属性却去访问或者函数定义了形参但没有传递实参，这时候都是undefined。</p><p class="note note-primary">undefined通过typeof判断类型是'undefined'。undefined == undefined undefined === undefined 。</p><p class="note note-primary">null代表对象的值未设置，相当于一个对象没有设置指针地址就是null。null通过typeof判断类型是'object'。</p><p><em>null === null null == null null == undefined null !== undefined</em></p><h1 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h1><p>undefined 表示一个变量初始状态值，而 null 则表示一个变量被人为的设置为空对象，而不是原始状态。</p><p>在实际使用过程中，不需要对一个变量显式的赋值 undefined，当需要释放一个对象时，直接赋值为 null 即可。 让一个变量为null，直接给该变量赋值为null即可。</p><p>null 其实属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为JavaScript 数据类型在底层都是以二进制的形式表示的，二进制的前三位为 0 会被 typeof 判断为对象类型，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。 对象被赋值了null 以后，对象对应的堆内存中的值就是游离状态了，GC 会择机回收该值并释放内存。</p><p>因此，需要释放某个对象，就将变量设置为 null，即表示该对象已经被清空，目前无效状态。</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li>null是一个引用内存地址为空的对象。</li><li>undefined是一个被定义但未被初始化的变量。</li><li>undefined不是关键字，而null是关键字。</li><li>undefined和null被转换为布尔值的时候，两者都为false。</li><li>undefined在和null进行==比较时两者相等，全等于比较时两者不等</li><li>使用Number()对undefined和null进行类型转换，null为0，undefined为NaN</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sudo和su的区别</title>
    <link href="/2022/12/05/sudo%E5%92%8Csu%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/12/05/sudo%E5%92%8Csu%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>sudo ：以root权限执行命令，不需要把当前用户切换到root账户<br>su：切换到root账户</p><p>su [账户名称]：切换到对应的账户</p><p><code>sudo su</code> 环境用的是目标用户(root)的环境<br><code>sudo -s</code> 环境用的是当前用户本身的环境</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于BigDecimal和Integer计算的坑</title>
    <link href="/2022/12/02/%E5%85%B3%E4%BA%8EBigDecimal%E5%92%8CInteger%E8%AE%A1%E7%AE%97%E7%9A%84%E5%9D%91/"/>
    <url>/2022/12/02/%E5%85%B3%E4%BA%8EBigDecimal%E5%92%8CInteger%E8%AE%A1%E7%AE%97%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h3 id="1-BigDecimal"><a href="#1-BigDecimal" class="headerlink" title="1. BigDecimal"></a>1. BigDecimal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0</span>);<br><br>balance = balance.subtract(atTheSameReward);<span class="hljs-comment">// balance.subtract(atTheSameReward)返回新的对象 直接赋值 balance的引用指向就变了 </span><br></code></pre></td></tr></table></figure><ul><li>BigDecimal进行加减乘除时会返回一个新的对象。</li><li>BigDecimal都是不可变的（immutable）的，在进行每一步运算时，都会产生一个新的对象，所以在做加减乘除运算时千万要保存操作后的值。</li></ul><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221202160552.png"></p><p>引用间赋值只是把对象内存复制给被赋值的引用：</p><p>ZERO是存储在栈中的对象的引用；存储对象的内存地址。new BigDecimal(0)是存储在堆中的对象。<br><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221202160614.png"></p><p>当被赋值的引用改变时，改变的只是当前引用中存储的对象内存地址，把当前的内存地址替换成被赋值的新的内存地址。<br>而原先旧的内存地址指向的对象不会发生任何改变（可以看到ZERO指向的对象没有发生任何改变,结果还是0）<br><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221202160659.png"></p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p><strong>引用间的赋值，只是改变了被赋值的引用指向的对象。不会对原先指向的对象造成任何改变。（_当没有任何引用指向原先的对象时,该对象会被清空_）</strong></p><h3 id="2-Integer"><a href="#2-Integer" class="headerlink" title="2.Integer"></a>2.Integer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">aaa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">153</span>);  <br><br>aaa += <span class="hljs-number">1</span>;<span class="hljs-comment">//返回新的对象 直接赋值 aaa的引用指向就变了 指向新的对象</span><br><br></code></pre></td></tr></table></figure><p>Integer进行加减乘除时会返回一个新的对象</p><p>计算前对象指向：<br><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221202155702.png"></p><p>计算并赋值后，对象的地址改变了：<br><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221202155745.png"></p>]]></content>
    
    
    <categories>
      
      <category>tips</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装nvim</title>
    <link href="/2022/11/29/%E5%AE%89%E8%A3%85nvim/"/>
    <url>/2022/11/29/%E5%AE%89%E8%A3%85nvim/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1616161561026-80c044824130?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Njk3MzQ1Mjc&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Maxim Tolchinskiy on Unsplash"></p><h3 id="1-安装nvim"><a href="#1-安装nvim" class="headerlink" title="1.安装nvim"></a>1.安装nvim</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">brew install nvim<br></code></pre></td></tr></table></figure><h3 id="2-安装vim-plug插件管理器"><a href="#2-安装vim-plug插件管理器" class="headerlink" title="2.安装vim-plug插件管理器"></a>2.安装vim-plug插件管理器</h3><h4 id="安装curl"><a href="#安装curl" class="headerlink" title="安装curl"></a>安装<code>curl</code></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install curl<br></code></pre></td></tr></table></figure><p>vim-plug的github网址为：<code>https://github.com/junegunn/vim-plug</code></p><h4 id="用github上的安装命令"><a href="#用github上的安装命令" class="headerlink" title="用github上的安装命令"></a>用github上的安装命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sh -c <span class="hljs-string">&#x27;curl -fLo &quot;$&#123;XDG_DATA_HOME:-$HOME/.local/share&#125;&quot;/nvim/site/autoload/plug.vim --create-dirs \</span><br><span class="hljs-string">       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#x27;</span><br><br></code></pre></td></tr></table></figure><h4 id="运行完之后可能会遇到一个问题"><a href="#运行完之后可能会遇到一个问题" class="headerlink" title="运行完之后可能会遇到一个问题"></a>运行完之后可能会遇到一个问题</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">【“curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused”】错误<br></code></pre></td></tr></table></figure><p><strong>对于这种错误可以采用添加配置的方式来解决</strong><br>修改文件<code>/etc/hosts</code>解决</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo nvim /etc/hosts<br></code></pre></td></tr></table></figure><p>然后添加配置信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">185.199.110.133 raw.githubusercontent.com<br></code></pre></td></tr></table></figure><p>添加完之后再次运行github上的安装脚本命令就可以了</p><h3 id="3-给nvim添加配置文件"><a href="#3-给nvim添加配置文件" class="headerlink" title="3.给nvim添加配置文件"></a>3.给nvim添加配置文件</h3><p>配置文件的添加路径是：<code>~/.config/nvim/init.vim</code></p><p class="note note-warning">没有这个文件可以自行创建<br/>创建完成后使用指令进行编辑：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo nvim ~/.config/nvim/init.vim<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>call plug<span class="hljs-comment">#begin()</span><br><br>中间是需要安装的插件<br><br>call plug<span class="hljs-comment">#end()</span><br></code></pre></td></tr></table></figure><p>中间可以选择安装的插件在网站<code>https://vimawesome.com/</code> 上<br>选择的是<code>VimPlug</code>方法</p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221129232359.png"></p><p>“中间是需要安装的插件”:替换成<code>Plug &#39;scrooloose/nerdtree&#39;</code></p><p>进入nvim命令模式执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">:<span class="hljs-built_in">source</span> %  <br>:PlugInstall<br></code></pre></td></tr></table></figure><p>等待插件安装完毕</p>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java websocket客户端接收消息</title>
    <link href="/2022/11/29/java%20websocket%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF/"/>
    <url>/2022/11/29/java%20websocket%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="1-需要引入的依赖"><a href="#1-需要引入的依赖" class="headerlink" title="1.需要引入的依赖"></a>1.需要引入的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.java-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Java-WebSocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-客户端代码"><a href="#2-客户端代码" class="headerlink" title="2.客户端代码"></a>2.客户端代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ase.business.websocket;  <br>  <br><span class="hljs-keyword">import</span> java.net.URI;  <br><span class="hljs-keyword">import</span> java.net.URISyntaxException;  <br><span class="hljs-keyword">import</span> java.util.*;  <br>  <br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;  <br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;  <br><span class="hljs-keyword">import</span> com.ase.business.util.RealTimeUtils;  <br><span class="hljs-keyword">import</span> com.ase.framework.core.SqlSessionProxy;  <br><span class="hljs-keyword">import</span> com.ase.framework.mapper.JsonRpcLogMapper;  <br><span class="hljs-keyword">import</span> com.ase.framework.pojo.JsonRpcErrorLog;  <br><span class="hljs-keyword">import</span> com.ase.framework.pojo.JsonRpcLog;  <br><span class="hljs-keyword">import</span> com.ase.framework.util.LogsUtils;  <br><span class="hljs-keyword">import</span> org.java_websocket.WebSocket;  <br><span class="hljs-keyword">import</span> org.java_websocket.client.WebSocketClient;  <br><span class="hljs-keyword">import</span> org.java_websocket.drafts.Draft;  <br><span class="hljs-keyword">import</span> org.java_websocket.handshake.ServerHandshake;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientWebSocket</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSocketClient</span> &#123;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 数据库会话连接  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionProxy sqlSessionProxy;  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 错误日志mapper  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JsonRpcLogMapper jsonRpcLogMapper;  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * webSocket连接  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ClientWebSocket clientWebSocket;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientWebSocket</span><span class="hljs-params">(URI serverUri)</span> &#123;  <br>        <span class="hljs-built_in">super</span>(serverUri);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientWebSocket</span><span class="hljs-params">(URI serverUri, Draft protocolDraft)</span> &#123;  <br>        <span class="hljs-built_in">super</span>(serverUri, protocolDraft);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientWebSocket</span><span class="hljs-params">(URI serverUri, Draft protocolDraft, Map&lt;String, String&gt; httpHeaders, <span class="hljs-type">int</span> connectTimeout)</span> &#123;  <br>        <span class="hljs-built_in">super</span>(serverUri, protocolDraft, httpHeaders, connectTimeout);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onOpen</span><span class="hljs-params">(ServerHandshake shake)</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;WebSocket建立连接&quot;</span>);  <br>        System.out.println(<span class="hljs-string">&quot;握手...&quot;</span>);  <br>        <span class="hljs-keyword">for</span> (Iterator&lt;String&gt; it = shake.iterateHttpFields(); it.hasNext(); ) &#123;  <br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> it.next();  <br>            System.out.println(key + <span class="hljs-string">&quot;:&quot;</span> + shake.getFieldValue(key));  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String paramString)</span> &#123;  <br>  <br>        System.out.println(<span class="hljs-string">&quot;接收到消息：&quot;</span> + paramString);  <br>  <br>        <span class="hljs-comment">//处理自己的业务  </span><br>        <span class="hljs-keyword">try</span> &#123;  <br>            RealTimeUtils.invoke(ClientWebSocket.sqlSessionProxy, paramString);  <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>  <br>            sqlSessionProxy.rollback();  <br>  <br>            e.printStackTrace();  <br>  <br>            <span class="hljs-type">JsonRpcLog</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonRpcLog</span>();  <br>  <br>            log.setRequstJson(<span class="hljs-string">&quot;&quot;</span>);  <br>            <span class="hljs-comment">//记录错误信息  </span><br>            log.setResponseJson(e.getMessage());  <br>            log.setBrower(<span class="hljs-string">&quot;&quot;</span>);  <br>            log.setUserHostAddress(<span class="hljs-string">&quot;&quot;</span>);  <br>            log.setStatusCode(<span class="hljs-string">&quot;&quot;</span>);  <br>            log.setStartTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());  <br>            log.setEndTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());  <br>  <br>            log.setStartTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());  <br>  <br>            jsonRpcLogMapper.insert(log);  <br>  <br>        &#125; <span class="hljs-keyword">finally</span> &#123;  <br>            ClientWebSocket.sqlSessionProxy.commit();  <br>        &#125;  <br>  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClose</span><span class="hljs-params">(<span class="hljs-type">int</span> paramInt, String paramString, <span class="hljs-type">boolean</span> paramBoolean)</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;关闭...&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Exception e)</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;异常&quot;</span> + e);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 开启websocket连接  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">openWebSocketClient</span><span class="hljs-params">(SqlSessionProxy sqlSessionProxy)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>  <br>        ClientWebSocket.sqlSessionProxy = sqlSessionProxy;  <br>        ClientWebSocket.jsonRpcLogMapper = sqlSessionProxy.getMapper(JsonRpcLogMapper.class);  <br>  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-type">ClientWebSocket</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientWebSocket</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;ws://154.55.128.25:39001&quot;</span>));  <br>            client.connect();  <br>  <br>            clientWebSocket = client;  <br>  <br>            <span class="hljs-comment">//如果断线，则重连并重新发送验证信息  </span><br>            System.out.println(<span class="hljs-string">&quot;等待连接&quot;</span>);  <br>  <br>            <span class="hljs-comment">//异步 定时器判断是否需要重连 心跳机制  </span><br>            <span class="hljs-type">Timer</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();  <br>            t.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;  <br>                <span class="hljs-meta">@Override</span>  <br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;  <br>  <br>                    <span class="hljs-keyword">if</span> (!clientWebSocket.getReadyState().equals(WebSocket.READYSTATE.OPEN)) &#123;  <br>                        <span class="hljs-keyword">try</span> &#123;  <br>                            clientWebSocket.close();  <br>                            System.out.println(<span class="hljs-string">&quot;连接超时，断开连接&quot;</span>);  <br>                            System.out.println(<span class="hljs-string">&quot;断线重连&quot;</span>);  <br>                            clientWebSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientWebSocket</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;ws://154.55.128.25:39001&quot;</span>));  <br>                            clientWebSocket.connect();  <br>                        &#125; <span class="hljs-keyword">catch</span> (URISyntaxException e) &#123;  <br>                            e.printStackTrace();  <br>                        &#125;  <br>                    &#125;  <br>                &#125;  <br>            &#125;, <span class="hljs-number">5000</span>, <span class="hljs-number">5000</span>);<span class="hljs-comment">//第一个参数控制第一次延迟5000毫秒执行 然后休息5000毫秒循环执行  </span><br>  <br><span class="hljs-comment">//            client.send(&quot;asd&quot;);  </span><br>        &#125; <span class="hljs-keyword">catch</span> (URISyntaxException e) &#123;  <br>            e.printStackTrace();  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 开启websocket连接 （测试）  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-type">ClientWebSocket</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientWebSocket</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;ws://154.55.128.25:39001&quot;</span>));  <br>            client.connect();  <br>  <br>            clientWebSocket = client;  <br>  <br>            <span class="hljs-comment">//如果断线，则重连并重新发送验证信息  </span><br>            System.out.println(<span class="hljs-string">&quot;等待连接&quot;</span>);  <br>  <br>            <span class="hljs-comment">//定时器判断是否需要重连  </span><br>            <span class="hljs-type">Timer</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();  <br>            t.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;  <br>                <span class="hljs-meta">@Override</span>  <br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;  <br>  <br>                    <span class="hljs-keyword">if</span> (!clientWebSocket.getReadyState().equals(WebSocket.READYSTATE.OPEN)) &#123;  <br>                        <span class="hljs-keyword">try</span> &#123;  <br>                            clientWebSocket.close();  <br>                            System.out.println(<span class="hljs-string">&quot;连接超时，断开连接&quot;</span>);  <br>                            System.out.println(<span class="hljs-string">&quot;断线重连&quot;</span>);  <br>                            clientWebSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientWebSocket</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;ws://154.55.128.25:39001&quot;</span>));  <br>                            clientWebSocket.connect();  <br>                        &#125; <span class="hljs-keyword">catch</span> (URISyntaxException e) &#123;  <br>                            e.printStackTrace();  <br>                        &#125;  <br>                    &#125;  <br>                &#125;  <br>            &#125;, <span class="hljs-number">5000</span>, <span class="hljs-number">5000</span>);<span class="hljs-comment">//第一个参数控制第一次延迟5000毫秒执行 然后休息5000毫秒循环执行  </span><br>  <br><span class="hljs-comment">//            client.send(&quot;asd&quot;);  </span><br>        &#125; <span class="hljs-keyword">catch</span> (URISyntaxException e) &#123;  <br>            e.printStackTrace();  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">// 得到错误对象  </span><br>    <span class="hljs-keyword">private</span> JSONObject <span class="hljs-title function_">getErrorJsonObject</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String messageString, String idString)</span> &#123;  <br>  <br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();  <br>        jObject.put(<span class="hljs-string">&quot;jsonrpc&quot;</span>, <span class="hljs-string">&quot;2.0&quot;</span>);  <br>  <br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">errorJsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();  <br>        errorJsonObject.put(<span class="hljs-string">&quot;code&quot;</span>, code);  <br>        errorJsonObject.put(<span class="hljs-string">&quot;message&quot;</span>, messageString);  <br>  <br>        jObject.put(<span class="hljs-string">&quot;error&quot;</span>, errorJsonObject);  <br>        jObject.put(<span class="hljs-string">&quot;id&quot;</span>, idString);  <br>  <br>        <span class="hljs-keyword">return</span> jObject;  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>websocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux中的source命令</title>
    <link href="/2022/11/28/Linux%E4%B8%AD%E7%9A%84source%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/11/28/Linux%E4%B8%AD%E7%9A%84source%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="1、source命令是什么？"><a href="#1、source命令是什么？" class="headerlink" title="1、source命令是什么？"></a>1、source命令是什么？</h3><p class="note note-success">source命令也称为“点命令”，也就是一个点符号（.），是bash的内部命令。注意：该命令通常用命令“.”来替代</p><h3 id="2、source命令-功能（能干什么）？"><a href="#2、source命令-功能（能干什么）？" class="headerlink" title="2、source命令 功能（能干什么）？"></a>2、source命令 功能（能干什么）？</h3><p class="note note-success">source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。因为linux所有的操作都会变成文件的格式存在</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>brew install 和 brew cask install 的区别</title>
    <link href="/2022/11/28/brew%20install%20%E5%92%8C%20brew%20cask%20install%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/11/28/brew%20install%20%E5%92%8C%20brew%20cask%20install%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>Homebrew 是一款 Mac OS 平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。</p><p>Homebrew 通过简单的一条指令，就可以实现包管理，不需要关心各种依赖和文件路径的情况。</p><p>Homebrew 的两个术语：</p><ul><li>  Formulae：软件包，包括了这个软件的依赖、源码位置及编译方法等；</li><li>  Casks：已经编译好的应用包，如图形界面程序等。</li></ul><p>Homebrw相关的几个文件夹用途：</p><ul><li>  bin：用于存放所安装程序的启动链接（相当于快捷方式）</li><li>  etc：brew安装程序的配置文件默认存放路径</li><li>  Library：Homebrew 系统自身文件夹</li><li>  Cellar：通过brew安装的程序将以 [程序名/版本号] 存放于本目录下</li></ul><p>常用的 brew 命令：</p><ul><li>  查看brew版本：brew -v</li><li>  更新brew版本：brew update</li><li>  本地软件库列表：brew list</li><li>  查看软件库版本：brew list –versions</li><li>  查找软件包：brew search xxx （xxx为要查找软件的关键词）</li><li>  <strong>安装软件包：brew install xxx （xxx为软件包名称）</strong></li><li>  卸载软件包：brew uninstall xxx</li><li>  <strong>安装软件：brew cask install xxx（xxx为软件名称）</strong></li><li>  卸载软件：brew cask uninstall xxx</li><li>  查找软件安装位置：which xxx （xxx为软件名称）</li></ul><p>Homebrew 提供了两种安装软件的方式，brew install 和 brew cask install，下面对两种方式进行一些解释说明。</p><h2 id="1-brew-install"><a href="#1-brew-install" class="headerlink" title="1. brew install"></a>1. brew install</h2><p>brew 是下载源码解压，然后 ./configure &amp;&amp; make install ，同时会包含相关依存库，并自动配置好各种环境变量。</p><blockquote><p>Homebrew is the easiest and most flexible way to install the UNIX tools Apple didn’t include with macOS.</p></blockquote><p>对于对程序员只需通过简单的指令，就能快速安装和升级本地的各种开发环境，非常快捷方便。</p><h2 id="2-brew-cask-install"><a href="#2-brew-cask-install" class="headerlink" title="2. brew cask install"></a>2. brew cask install</h2><p>brew cask 是针对已经编译好了的应用包（.dmg/.pkg）下载解压，然后放在统一的目录中（Caskroom），省掉了自己下载、解压、安装等步骤。</p><blockquote><p>Homebrew-Cask extends Homebrew and brings its elegance, simplicity, and speed to macOS applications and large binaries alike.</p></blockquote><p>这个对一般用户来说会比较方便，包含很多在 AppStore 里没有的常用软件。</p><p>简单来说，</p><ul><li>  brew install 用来安装一些不带界面的命令行工具和第三方库。</li><li>  brew cask install 用来安装一些带界面的应用软件。</li></ul>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>Homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>去除ssh密码</title>
    <link href="/2022/11/27/%E5%8E%BB%E9%99%A4ssh%E5%AF%86%E7%A0%81/"/>
    <url>/2022/11/27/%E5%8E%BB%E9%99%A4ssh%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1580711508381-9934107eb02c?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Njk1NjQxNTM&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Birmingham Museums Trust on Unsplash"></p><h1 id="1、在终端下输入ssh-keygen-p"><a href="#1、在终端下输入ssh-keygen-p" class="headerlink" title="1、在终端下输入ssh-keygen -p"></a>1、在终端下输入ssh-keygen -p</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -p<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> the key is (/Users/username/.ssh/id_rsa):<br></code></pre></td></tr></table></figure><h1 id="2、系统会提示选择需要修改的私钥"><a href="#2、系统会提示选择需要修改的私钥" class="headerlink" title="2、系统会提示选择需要修改的私钥"></a>2、系统会提示选择需要修改的私钥</h1><p>可以直接回车，默认是/Users/username/.ssh/id_rsa</p><h1 id="3、选好文件后按回车，会提示你输入旧密码："><a href="#3、选好文件后按回车，会提示你输入旧密码：" class="headerlink" title="3、选好文件后按回车，会提示你输入旧密码："></a>3、选好文件后按回车，会提示你输入旧密码：</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Enter old passphrase:<br></code></pre></td></tr></table></figure><h1 id="4-输入好后会提示输入新密码："><a href="#4-输入好后会提示输入新密码：" class="headerlink" title="4.输入好后会提示输入新密码："></a>4.输入好后会提示输入新密码：</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Enter new passphrase (empty <span class="hljs-keyword">for</span> no passphrase):<br></code></pre></td></tr></table></figure><h1 id="5-如果直接回车，会提示确认新密码，再直接回车，此时以前设置的私钥密码就被清除了："><a href="#5-如果直接回车，会提示确认新密码，再直接回车，此时以前设置的私钥密码就被清除了：" class="headerlink" title="5.如果直接回车，会提示确认新密码，再直接回车，此时以前设置的私钥密码就被清除了："></a>5.如果直接回车，会提示确认新密码，再直接回车，此时以前设置的私钥密码就被清除了：</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Enter same passphrase again:<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux export 命令</title>
    <link href="/2022/11/27/Linux%20export%20%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/11/27/Linux%20export%20%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1653200256772-06b9e87b40f6?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Njk1NjMzNjc&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Yu Kato on Unsplash"></p><p> <a href="https://www.runoob.com/linux/linux-command-manual.html"><img src="https://www.runoob.com/images/up.gif" alt="Linux 命令大全"> Linux 命令大全</a></p><p>Linux export 命令用于设置或显示环境变量。</p><p>在 shell 中执行程序时，shell 会提供一组环境变量。export 可新增，修改或删除环境变量，供后续执行的程序使用。export 的效力仅限于该次登陆操作。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> [-fnp][变量名称]=[变量设置值]<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><p class="note note-success">-f 代表[变量名称]中为函数名称。<br/>-n 删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。<br/>-p 列出所有的shell赋予程序的环境变量。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>列出当前所有的环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># export -p //列出当前的环境变量值</span><br><span class="hljs-built_in">declare</span> -x HOME=“/root“<br><span class="hljs-built_in">declare</span> -x LANG=“zh_CN.UTF-8“<br><span class="hljs-built_in">declare</span> -x LANGUAGE=“zh_CN:zh“<br><span class="hljs-built_in">declare</span> -x LESSCLOSE=“/usr/bin/lesspipe %s %s“<br><span class="hljs-built_in">declare</span> -x LESSOPEN=“| /usr/bin/lesspipe %s“<br><span class="hljs-built_in">declare</span> -x LOGNAME=“root“<br><span class="hljs-built_in">declare</span> -x LS_COLORS=““<br><span class="hljs-built_in">declare</span> -x MAIL=“/var/mail/root“<br><span class="hljs-built_in">declare</span> -x OLDPWD<br><span class="hljs-built_in">declare</span> -x PATH=“/opt/toolchains/arm920t-eabi/bin:/opt/toolchains/arm920t-eabi/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games“<br><span class="hljs-built_in">declare</span> -x PWD=“/root“<br><span class="hljs-built_in">declare</span> -x SHELL=“/bin/bash“<br><span class="hljs-built_in">declare</span> -x SHLVL=“1“<br><span class="hljs-built_in">declare</span> -x SPEECHD_PORT=“6560“<br><span class="hljs-built_in">declare</span> -x SSH_CLIENT=“192.168.1.65 1674 22“<br><span class="hljs-built_in">declare</span> -x SSH_CONNECTION=“192.168.1.65 1674 192.168.1.3 22“<br><span class="hljs-built_in">declare</span> -x SSH_TTY=“/dev/pts/2“<br><span class="hljs-built_in">declare</span> -x TERM=“XTERM“<br><span class="hljs-built_in">declare</span> -x USER=“root“<br><span class="hljs-built_in">declare</span> -x XDG_SESSION_COOKIE=“93b5d3d03e032c0cf892a4474bebda9f-1273864738.954257-340206484“<br></code></pre></td></tr></table></figure><p>定义环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># export MYENV //定义环境变量</span><br><span class="hljs-comment"># export -p //列出当前的环境变量</span><br><span class="hljs-built_in">declare</span> -x HOME=“/root“<br><span class="hljs-built_in">declare</span> -x LANG=“zh_CN.UTF-8“<br><span class="hljs-built_in">declare</span> -x LANGUAGE=“zh_CN:zh“<br><span class="hljs-built_in">declare</span> -x LESSCLOSE=“/usr/bin/lesspipe %s %s“<br><span class="hljs-built_in">declare</span> -x LESSOPEN=“| /usr/bin/lesspipe %s“<br><span class="hljs-built_in">declare</span> -x LOGNAME=“root“<br><span class="hljs-built_in">declare</span> -x LS_COLORS=““<br><span class="hljs-built_in">declare</span> -x MAIL=“/var/mail/root“<br><span class="hljs-built_in">declare</span> -x MYENV<br><span class="hljs-built_in">declare</span> -x OLDPWD<br><span class="hljs-built_in">declare</span> -x PATH=“/opt/toolchains/arm920t-eabi/bin:/opt/toolchains/arm920t-eabi/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games“<br><span class="hljs-built_in">declare</span> -x PWD=“/root“<br><span class="hljs-built_in">declare</span> -x SHELL=“/bin/bash“<br><span class="hljs-built_in">declare</span> -x SHLVL=“1“<br><span class="hljs-built_in">declare</span> -x SPEECHD_PORT=“6560“<br><span class="hljs-built_in">declare</span> -x SSH_CLIENT=“192.168.1.65 1674 22“<br><span class="hljs-built_in">declare</span> -x SSH_CONNECTION=“192.168.1.65 1674 192.168.1.3 22“<br><span class="hljs-built_in">declare</span> -x SSH_TTY=“/dev/pts/2“<br><span class="hljs-built_in">declare</span> -x TERM=“XTERM“<br><span class="hljs-built_in">declare</span> -x USER=“root“<br><span class="hljs-built_in">declare</span> -x XDG_SESSION_COOKIE=“93b5d3d03e032c0cf892a4474bebda9f-1273864738.954257-340206484“<br></code></pre></td></tr></table></figure><p>定义环境变量赋值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># export MYENV=7 //定义环境变量并赋值</span><br><span class="hljs-comment"># export -p</span><br><span class="hljs-built_in">declare</span> -x HOME=“/root“<br><span class="hljs-built_in">declare</span> -x LANG=“zh_CN.UTF-8“<br><span class="hljs-built_in">declare</span> -x LANGUAGE=“zh_CN:zh“<br><span class="hljs-built_in">declare</span> -x LESSCLOSE=“/usr/bin/lesspipe %s %s“<br><span class="hljs-built_in">declare</span> -x LESSOPEN=“| /usr/bin/lesspipe %s“<br><span class="hljs-built_in">declare</span> -x LOGNAME=“root“<br><span class="hljs-built_in">declare</span> -x LS_COLORS=““<br><span class="hljs-built_in">declare</span> -x MAIL=“/var/mail/root“<br><span class="hljs-built_in">declare</span> -x MYENV=“7“<br><span class="hljs-built_in">declare</span> -x OLDPWD<br><span class="hljs-built_in">declare</span> -x PATH=“/opt/toolchains/arm920t-eabi/bin:/opt/toolchains/arm920t-eabi/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games“<br><span class="hljs-built_in">declare</span> -x PWD=“/root“<br><span class="hljs-built_in">declare</span> -x SHELL=“/bin/bash“<br><span class="hljs-built_in">declare</span> -x SHLVL=“1“<br><span class="hljs-built_in">declare</span> -x SPEECHD_PORT=“6560“<br><span class="hljs-built_in">declare</span> -x SSH_CLIENT=“192.168.1.65 1674 22“<br><span class="hljs-built_in">declare</span> -x SSH_CONNECTION=“192.168.1.65 1674 192.168.1.3 22“<br><span class="hljs-built_in">declare</span> -x SSH_TTY=“/dev/pts/2“<br><span class="hljs-built_in">declare</span> -x TERM=“XTERM“<br><span class="hljs-built_in">declare</span> -x USER=“root“<br><span class="hljs-built_in">declare</span> -x XDG_SESSION_COOKIE=“93b5d3d03e032c0cf892a4474bebda9f-1273864738.954257-340206484“<br></code></pre></td></tr></table></figure><p> <a href="https://www.runoob.com/linux/linux-command-manual.html"><img src="https://www.runoob.com/images/up.gif" alt="Linux 命令大全"> Linux 命令大全</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>echo、touch、cat的常用功能</title>
    <link href="/2022/11/27/echo%E3%80%81touch%E3%80%81cat%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/11/27/echo%E3%80%81touch%E3%80%81cat%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1584727638120-6819c82e954b?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Njk1NjE5ODk&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Europeana on Unsplash"></p><h3 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch:创建文件"></a>touch:创建文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">touch</span> filename<br></code></pre></td></tr></table></figure><h3 id="echo-向文件中写入内容-gt-gt-追加，-gt-覆盖"><a href="#echo-向文件中写入内容-gt-gt-追加，-gt-覆盖" class="headerlink" title="echo:向文件中写入内容(&gt;&gt;追加，&gt;覆盖)"></a>echo:向文件中写入内容(&gt;&gt;追加，&gt;覆盖)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> 内容&gt;&gt;文件<br><span class="hljs-built_in">echo</span> 内容&gt;文件<br></code></pre></td></tr></table></figure><h3 id="cat-一次显示整个文件"><a href="#cat-一次显示整个文件" class="headerlink" title="cat:一次显示整个文件"></a>cat:一次显示整个文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> filename<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac上JDK多版本管理</title>
    <link href="/2022/11/26/mac%E4%B8%8AJDK%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <url>/2022/11/26/mac%E4%B8%8AJDK%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1654854759158-2756e1aa3b99?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Njk0MzU5OTE&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Guns on Unsplash"></p><blockquote><p>The only real failure in life is not to be true to the best one knows.<br>— <cite>Buddha</cite></p></blockquote><p>我的Mac上已经有一个 oracle JDK8的版本了，但因为我是m1pro芯片，所以x86架构的jdk效率运行起来会打折扣，于是我打算下载支持arm架构的openjdk1.8使用，arm版的jdk在效率上是高于现在使用的jdk的。</p><h2 id="安装openJDK-8"><a href="#安装openJDK-8" class="headerlink" title="安装openJDK 8"></a>安装openJDK 8</h2><p>通过Homebrew 安装JDK 8，可以先通过<code>brew cask info java</code>查看目前Java的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ brew tap AdoptOpenJDK/openjdk<br>$ brew install --cask &lt;version&gt;<br> <br><span class="hljs-comment">##java8</span><br>$ brew install --cask adoptopenjdk8<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">zhangchenghong@zhangchenghongdeMacBook-Pro ~ % java -version<br>openjdk version <span class="hljs-string">&quot;1.8.0_352&quot;</span><br>OpenJDK Runtime Environment (Zulu 8.66.0.15-CA-macos-aarch64) (build 1.8.0_352-b08)<br>OpenJDK 64-Bit Server VM (Zulu 8.66.0.15-CA-macos-aarch64) (build 25.352-b08, mixed mode)<br></code></pre></td></tr></table></figure><p>但是另一个问题来了，我电脑上原来安装的JDK8去哪呢？我如何在不同的版本中随意切换呢？比如像Node的<code>nvm</code>，Ruby的<code>rvm</code>，Python的<code>pyenv</code>等。答案是我们可以通过<code>jenv</code>来实现相同的效果。</p><h2 id="安装-jEnv，管理多版本jdk"><a href="#安装-jEnv，管理多版本jdk" class="headerlink" title="安装 jEnv，管理多版本jdk"></a>安装 jEnv，管理多版本jdk</h2><ol><li> 安装 jEnv</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ brew install jenv<br>$ <span class="hljs-built_in">exec</span> <span class="hljs-variable">$SHELL</span> -l<br></code></pre></td></tr></table></figure><p>安装完成之后，然后检查是否安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ jenv doctor<br>[OK]    No JAVA_HOME <span class="hljs-built_in">set</span><br>[ERROR] Java binary <span class="hljs-keyword">in</span> path is not <span class="hljs-keyword">in</span> the jenv shims.<br>[ERROR] Please check your path, or try using /path/to/java/home is not a valid path to java installation.<br>    PATH : /usr/local/Cellar/jenv/0.5.2/libexec/libexec:/Users/xxx/.cargo/bin:/Users/xxx/.pyenv/shims:/Users/username/.pyenv:/Users/xxx/.nvm/versions/node/v8.11.4/bin:/Users/xxx/bin:/usr/local/bin:/Users/xxx/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Users/xxx/Documents/Projects/golang/bin<br>[ERROR] Jenv is not loaded <span class="hljs-keyword">in</span> your zsh<br>[ERROR] To fix :    <span class="hljs-built_in">cat</span> <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(jenv init -)</span>&quot;</span> &gt;&gt; /Users/xxx/.zshrc<br></code></pre></td></tr></table></figure><p>在这里如果按照提示执行<code>cat eval &quot;$(jenv init -)&quot; &gt;&gt; /Users/xxx/.zshrc</code>：可能会得到如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(jenv init -)</span>&quot;</span> &gt;&gt; /Users/xxx/.zshrc<br><span class="hljs-built_in">cat</span>: <span class="hljs-built_in">eval</span>: No such file or directory<br><span class="hljs-built_in">cat</span>: <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/Users/xxx/.jenv/shims:<span class="hljs-variable">$&#123;PATH&#125;</span>&quot;</span><br><span class="hljs-built_in">export</span> JENV_SHELL=zsh<br><span class="hljs-built_in">export</span> JENV_LOADED=1<br><span class="hljs-built_in">unset</span> JAVA_HOME<br><span class="hljs-built_in">source</span> <span class="hljs-string">&#x27;/usr/local/Cellar/jenv/0.5.2/libexec/libexec/../completions/jenv.zsh&#x27;</span><br>jenv <span class="hljs-built_in">rehash</span> 2&gt;/dev/null<br><span class="hljs-function"><span class="hljs-title">jenv</span></span>() &#123;<br>  <span class="hljs-built_in">typeset</span> <span class="hljs-built_in">command</span><br>  <span class="hljs-built_in">command</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> -gt 0 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">shift</span><br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$command</span>&quot;</span> <span class="hljs-keyword">in</span><br>  enable-plugin|<span class="hljs-built_in">rehash</span>|shell|shell-options)<br>    <span class="hljs-built_in">eval</span> `jenv <span class="hljs-string">&quot;sh-<span class="hljs-variable">$command</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>`;;<br>  *)<br>    <span class="hljs-built_in">command</span> jenv <span class="hljs-string">&quot;<span class="hljs-variable">$command</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>;;<br>  <span class="hljs-keyword">esac</span><br>&#125;: No such file or directory<br></code></pre></td></tr></table></figure><p>经过一番搜索，得到如下的解决办法，主要就是将<code>cat</code>替换为<code>echo</code>，这里我已经给jEnv提了个<a href="https://links.jianshu.com/go?to=https://github.com/jenv/jenv/pull/265">PR</a>，以消除这个干扰。</p><ul><li>  Bash用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bash_profile<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(jenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bash_profile<br>$ <span class="hljs-built_in">exec</span> <span class="hljs-variable">$SHELL</span> -l<br></code></pre></td></tr></table></figure><ul><li>  Zsh用户</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs zsh">$ echo &#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc<br>$ echo &#x27;eval &quot;$(jenv init -)&quot;&#x27; &gt;&gt; ~/.zshrc<br>$ exec $SHELL -l<br></code></pre></td></tr></table></figure><p>然后再次执行<code>jenv doctor</code>，得到如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[OK]    No JAVA_HOME <span class="hljs-built_in">set</span><br>[ERROR] Java binary <span class="hljs-keyword">in</span> path is not <span class="hljs-keyword">in</span> the jenv shims.<br>[ERROR] Please check your path, or try using /path/to/java/home is not a valid path to java installation.<br>    PATH : /usr/local/Cellar/jenv/0.5.2/libexec/libexec:/Users/xxx/.jenv/shims:/Users/xxx/.cargo/bin:/Users/xxx/.pyenv/shims:/Users/username/.pyenv:/Users/xxx/.cargo/bin:/Users/xxx/.pyenv/shims:/Users/username/.pyenv:/Users/xxx/.nvm/versions/node/v8.11.4/bin:/Users/xxx/bin:/usr/local/bin:/Users/xxx/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Users/xxx/Documents/Projects/golang/bin:/Users/xxx/Documents/Projects/golang/bin<br>[OK]    Jenv is correctly loaded<br></code></pre></td></tr></table></figure><p>为了能够正确的设置<code>JAVA_HOME</code>，最好开启<code>export</code>插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ jenv enable-plugin <span class="hljs-built_in">export</span><br>$ <span class="hljs-built_in">exec</span> <span class="hljs-variable">$SHELL</span> -l<br></code></pre></td></tr></table></figure><h2 id="管理不同版本的JDK"><a href="#管理不同版本的JDK" class="headerlink" title="管理不同版本的JDK"></a>管理不同版本的JDK</h2><h3 id="添加JDK"><a href="#添加JDK" class="headerlink" title="添加JDK"></a>添加JDK</h3><p>添加最新安装的JDK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ jenv add $(/usr/libexec/java_home)<br></code></pre></td></tr></table></figure><p>如果<code>/usr/libexec/java_home</code>所指的位置不是你想要的，也可以手动指定目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_191.jdk/Contents/Home/<br></code></pre></td></tr></table></figure><h3 id="查看JDK版本"><a href="#查看JDK版本" class="headerlink" title="查看JDK版本"></a>查看JDK版本</h3><p>执行<code>jenv versions</code>：</p><h3 id="切换JDK版本"><a href="#切换JDK版本" class="headerlink" title="切换JDK版本"></a>切换JDK版本</h3><ul><li>Global<br>  设置全局模式下的JDK版本：</li></ul><p><code>exec $SHELL -l</code> :安装软件配置完环境变量后执行更新操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ jenv global 13<br>$ <span class="hljs-built_in">exec</span> <span class="hljs-variable">$SHELL</span> -l <br>$ java -version<br></code></pre></td></tr></table></figure><ul><li>Local<br>  在某个工作目录下设置JDK版本，会在当前目录下创建一个<code>.java-version</code>的文件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ jenv <span class="hljs-built_in">local</span> 1.8<br>$ <span class="hljs-built_in">exec</span> <span class="hljs-variable">$SHELL</span> -l <br>$ java -version<br></code></pre></td></tr></table></figure><ul><li>Shell<br>  设置当前Shell session中的JDK版本：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ jenv shell 1.8<br>$ java -version<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><ul><li>  <a href="https://links.jianshu.com/go?to=http://www.jenv.be/">http://www.jenv.be/</a></li><li>  <a href="https://links.jianshu.com/go?to=https://github.com/jenv/jenv">https://github.com/jenv/jenv</a></li><li>  <a href="https://links.jianshu.com/go?to=https://emcorrales.com/blog/install-oracle-jdk-macos-homebrew">https://emcorrales.com/blog/install-oracle-jdk-macos-homebrew</a></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>jdk</tag>
      
      <tag>openJdk</tag>
      
      <tag>jEnv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac安装oh-my-zsh</title>
    <link href="/2022/11/25/mac%E5%AE%89%E8%A3%85oh-my-zsh/"/>
    <url>/2022/11/25/mac%E5%AE%89%E8%A3%85oh-my-zsh/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1583934555852-537536e49071?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NjkzNjg4MjI&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Europeana on Unsplash"></p><p class="note note-primary">Argue for your limitations, and sure enough they're yours.> — <cite>Richard Bach</cite></p><p>常规的安装流程</p><h1 id="1、下载安装shell脚本"><a href="#1、下载安装shell脚本" class="headerlink" title="1、下载安装shell脚本"></a>1、下载安装shell脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><h1 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span><br></code></pre></td></tr></table></figure><h1 id="2、运行"><a href="#2、运行" class="headerlink" title="2、运行"></a>2、运行</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c ./install <br></code></pre></td></tr></table></figure><p>但问题有时候没有这样简单，可能出现如下问题</p><p>1、下载install.sh 出错：Failed to connect to raw.githubusercontent.com port 443: Connection refused<br>解决办法：手动复制后面链接到浏览器，你大概是可能看到这样一个网页，然后把这里面的内容复制到 install.sh脚本，然后执行这个脚本。</p><p>2、执行脚本的时候系统可能提示你权限不足 sh: ./install.sh: Permission denied<br>解决办法： 修改文本权限级别为 可读、可写、可执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 777 install.sh<br></code></pre></td></tr></table></figure><p>3、执行shell脚本你可能发现就卡在那里不动弹了（本质上应该是github上的一些内容被墙了。。）<br>解决办法： 修改install.sh 的内容,将地址换成gitee 的地址然后执行脚本<br>找到</p><p>将以下部分</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">REPO=<span class="hljs-variable">$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span><br>REMOTE=<span class="hljs-variable">$&#123;REMOTE:-https://github.com/<span class="hljs-variable">$&#123;REPO&#125;</span>.git&#125;</span><br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">REPO=<span class="hljs-variable">$&#123;REPO:-mirrors/oh-my-zsh&#125;</span><br>REMOTE=<span class="hljs-variable">$&#123;REMOTE:-https://gitee.com/<span class="hljs-variable">$&#123;REPO&#125;</span>.git&#125;</span><br></code></pre></td></tr></table></figure><p>4、mac 系统在10.7.3以后还可能出现这样一个问题bad interpreter: operation not permitted<br>解决办法：删除一个属性</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">xattr -rd com.apple.quarantine install.sh<br></code></pre></td></tr></table></figure><p>如果你想卸载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/.oh-my-zsh/tools<br><span class="hljs-built_in">chmod</span> +x uninstall.sh<br>./uninstall.sh<br><span class="hljs-built_in">rm</span> -rif .zshrc<br></code></pre></td></tr></table></figure><h3 id="1-更新"><a href="#1-更新" class="headerlink" title="1. 更新"></a>1. 更新</h3><ul><li>  禁用自动更新</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ~/.zshrc<br>DISABLE_AUTO_UPDATE=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><ul><li>手动更新oh-my-zsh<br><code>upgrade_oh_my_zsh</code></li></ul><h3 id="2-卸载"><a href="#2-卸载" class="headerlink" title="2. 卸载"></a>2. 卸载</h3><p><code>uninstall_oh_my_zsh zsh</code></p><h1 id="3-安装语法高亮插件zsh-syntax-highlighting"><a href="#3-安装语法高亮插件zsh-syntax-highlighting" class="headerlink" title="3.安装语法高亮插件zsh-syntax-highlighting"></a>3.安装语法高亮插件zsh-syntax-highlighting</h1><p>特殊命令和错误命令，会有高亮显示，使用Homebrew安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install zsh-syntax-highlighting<br></code></pre></td></tr></table></figure><p>安装成功后，编辑vim ~/.zshrc文件，在最后一刚增加下面配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh<br></code></pre></td></tr></table></figure><ul><li>  执行 source ~/.zshrc 使生效</li></ul><h1 id="4-解决iterm2-ohmyzsh主题乱码"><a href="#4-解决iterm2-ohmyzsh主题乱码" class="headerlink" title="4.解决iterm2 ohmyzsh主题乱码"></a>4.解决iterm2 ohmyzsh主题乱码</h1><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221202192829.png"></p><h1 id="5-解决zsh目录权限问题"><a href="#5-解决zsh目录权限问题" class="headerlink" title="5.解决zsh目录权限问题"></a>5.解决zsh目录权限问题</h1><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221202225709.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nvim ~/.zshrc<br></code></pre></td></tr></table></figure><p>在文件第一行加上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ZSH_DISABLE_COMPFIX=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221202225831.png"></p><h1 id="6-安装语法提示插件zsh-autosuggestions"><a href="#6-安装语法提示插件zsh-autosuggestions" class="headerlink" title="6.安装语法提示插件zsh-autosuggestions"></a>6.安装语法提示插件zsh-autosuggestions</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><h4 id="设置-zshrc，把zsh-autosuggestions添加到-Oh-My-Zsh-要加载的插件列表中"><a href="#设置-zshrc，把zsh-autosuggestions添加到-Oh-My-Zsh-要加载的插件列表中" class="headerlink" title="设置~/.zshrc，把zsh-autosuggestions添加到 Oh My Zsh 要加载的插件列表中"></a>设置<code>~/.zshrc</code>，把<code>zsh-autosuggestions</code>添加到 Oh My Zsh 要加载的插件列表中</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">plugins=(git zsh-autosuggestions)<br></code></pre></td></tr></table></figure><h4 id="使配置生效"><a href="#使配置生效" class="headerlink" title="使配置生效"></a>使配置生效</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">source ~/.zshrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>iterm2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a=a+b与a+=b的区别</title>
    <link href="/2022/11/25/a=a+b%E4%B8%8Ea+=b%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/11/25/a=a+b%E4%B8%8Ea+=b%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1653057677005-808191686c3a?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NjkzNDgyMjU&ixlib=rb-4.0.3&q=80&w=3840%C3%971600" alt="photo by Axel Ruffini on Unsplash"></p><blockquote><p>Trust your hunches. They’re usually based on facts filed away just below the conscious level.<br>— <cite>Joyce Brothers</cite></p></blockquote><p>+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>; <span class="hljs-comment">//byte 的长度是 -128～127</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>b = a + b; <span class="hljs-comment">// error : cannot convert from int to byte</span><br>b += a; <span class="hljs-comment">// ok</span><br></code></pre></td></tr></table></figure><blockquote><p>(因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>tips</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java实现http请求之CloseableHttpClient</title>
    <link href="/2022/11/23/java%E5%AE%9E%E7%8E%B0http%E8%AF%B7%E6%B1%82%E4%B9%8BCloseableHttpClient/"/>
    <url>/2022/11/23/java%E5%AE%9E%E7%8E%B0http%E8%AF%B7%E6%B1%82%E4%B9%8BCloseableHttpClient/</url>
    
    <content type="html"><![CDATA[<h3 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--fastjson--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="请求实例："><a href="#请求实例：" class="headerlink" title="请求实例："></a>请求实例：</h3><h4 id="get请求："><a href="#get请求：" class="headerlink" title="get请求："></a>get请求：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doGet</span><span class="hljs-params">(String url, String token)</span> &#123;<br><br>        <span class="hljs-comment">//创建HttpClient对象</span><br><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClientBuilder.create().build();<br><br>        <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br><br>        <span class="hljs-comment">//api_gateway_auth_token自定义header头，用于token验证使用</span><br><br>        httpGet.addHeader(<span class="hljs-string">&quot;api_gateway_auth_token&quot;</span>,tokenString);<br><br>        httpGet.addHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<br><br>            <span class="hljs-keyword">if</span> (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;<br><br>                <span class="hljs-comment">//返回json格式</span><br><br>                <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity());<br><br>                <span class="hljs-keyword">return</span> res;<br><br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><br>            e.printStackTrace();<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="post请求："><a href="#post请求：" class="headerlink" title="post请求："></a>post请求：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    * 以post方式调用第三方接口</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> url</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doPost</span><span class="hljs-params">(String url, JSONObject json)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == httpClient) &#123;<br><br>            httpClient = HttpClientBuilder.create().build();<br><br>        &#125;<br><br>        <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br><br>        <span class="hljs-comment">//api_gateway_auth_token自定义header头，用于token验证使用</span><br><br>        httpPost.addHeader(<span class="hljs-string">&quot;api_gateway_auth_token&quot;</span>, tokenString);<br><br>        httpPost.addHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-type">StringEntity</span> <span class="hljs-variable">se</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEntity</span>(json.toString());<br><br>            se.setContentEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>            <span class="hljs-comment">//发送json数据需要设置contentType</span><br><br>            se.setContentType(<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br><br>            <span class="hljs-comment">//设置请求参数</span><br><br>            httpPost.setEntity(se);<br><br>            <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpPost);<br><br>            <span class="hljs-keyword">if</span> (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;<br><br>                <span class="hljs-comment">//返回json格式</span><br><br>                <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity());<br><br>                <span class="hljs-keyword">return</span> res;<br><br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><br>            e.printStackTrace();<br><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>            <span class="hljs-keyword">if</span> (httpClient != <span class="hljs-literal">null</span>)&#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br><br>                    httpClient.close();<br><br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><br>                    e.printStackTrace();<br><br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关闭IPS</title>
    <link href="/2022/11/22/%E5%85%B3%E9%97%ADIPS/"/>
    <url>/2022/11/22/%E5%85%B3%E9%97%ADIPS/</url>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1482189349482-3defd547e0e9?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NjkxMjA3MTQ&ixlib=rb-4.0.3&q=80&w=1080&h=1920" alt="photo by Jessica Furtney on Unsplash"></p><p>关闭SIP<br>系统完整性保护是 OS X El Capitan 及更高版本所采用的一项安全技术，能够帮助防止潜在恶意软件修改 Mac 上受保护的文件和文件夹。系统完整性保护可以限制 root 用户帐户，以及 root 用户能够在 Mac 操作系统的受保护部分完成的操作。</p><p>通俗来说就是Windows系统的防火墙或者安卓手机的ROOT。</p><p>苹果应用商店的软件都是用沙盒运行的，无法访问系统文件，所以大部分软件都是阉割版的，例如<a href="https://foxirj.com/tencent-lemon">腾讯柠檬清理</a>之类的系统应用。</p><h2 id="关闭SIP影响"><a href="#关闭SIP影响" class="headerlink" title="关闭SIP影响"></a>关闭SIP影响</h2><ul><li>  xxx已损坏，无法打开，你应该将它移到废纸篓解决办法</li><li>  打不开 xxx，因为它来自身份不明的开发者</li><li>  打不开xxxx，因为 Apple 无法检查其是否包含恶意软件</li></ul><p><strong>目前最新的10.15.x系统使用破解软件基本上都需要关闭SIP才可以打开，就算是正版软件也有大量需要关闭SIP的，是需要永久关闭！例如TripMode。</strong></p><p>首先来检查系统是否已经禁用<a href="https://foxirj.com/tag/sip-system-integrity-protection-function" title="【查看含有[SIP系统完整性保护功能]标签的文章】">SIP系统完整性保护功能</a>。</p><p>打开终端输入以下代码即可。<strong>（全部复制以下代码）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">csrutil status<br></code></pre></td></tr></table></figure><p>未关闭 enabled：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">System Integrity Protection status: enabled<br></code></pre></td></tr></table></figure><p>已关闭 disabled：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">System Integrity Protection status: disabled<br></code></pre></td></tr></table></figure><p>以下是具体关闭SIP系统完整性保护功能教程：<strong>进入Recovery模式后只能使用触控板，鼠标无效。</strong></p><h2 id="Apple-ARM64处理器关闭方法："><a href="#Apple-ARM64处理器关闭方法：" class="headerlink" title="Apple ARM64处理器关闭方法："></a>Apple ARM64处理器关闭方法：</h2><p>1、关机长按【开机键】直至出现磁盘画面，点击【选项】&gt;【继续】</p><p>2、在顶部选择【实用工具】&gt;【终端】打开即可。</p><p>3、输入以下代码并回车，然后输入【y】再输入【开机密码】并回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">csrutil <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><p>4、显示以下代码即是成功关闭SIP了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">System Integrity Protection is off<br></code></pre></td></tr></table></figure><p>5、再输入以下代码重启电脑即可完成关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>常见问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>obsidian-Dataview 插件</title>
    <link href="/2022/11/21/obsidian-dataview%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/11/21/obsidian-dataview%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>推荐一款markdown编辑器-obsidian（黑曜石）。这是我用过功能最强大的md编辑器，支持安装海量插件，妥妥的生产力工具，可以用来记录和整理你的工作内容和学习笔记。</p><blockquote><p><strong>支持pc、移动端、平板多端同步</strong><br>  <strong>支持windows、mac、linux</strong></p></blockquote><p>这里不过多赘述，可以去b站或百度搜索相关视频。使用这个工具需要一定的学习成本</p><p>官网：<br><a href="https://obsidian.md/">Obsidian</a></p><h3 id="Dataview-插件"><a href="#Dataview-插件" class="headerlink" title="Dataview 插件"></a>Dataview 插件</h3><p>假设现在到了周五临近下班的时间，我们需要<strong>快速将 5 篇日报和 3 场会议记录整合成一篇周报</strong>，如果是以前使用传统文档记录，我们可能需要<strong>分别打开 8 个文件</strong>，来回切换窗口，然后慢慢地将它们复制粘贴在一起，这真是一件既费心又烦人的事。</p><p><img src="https://cdn.sspai.com/2022/03/30/article/b1446a2e0ddce5fe7eb0eb5c9a25a99c?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>而同样的事情如果发生在 Obsidian 中，事情则会变得轻松不少。</p><p>如下图所示，当我在周报文件夹创建文档，触发了 Templater 的模板，而这个模板则用了 Dataview 语法进行了配置。我利用 Dataview 插件，自动汇总了过去一周的所有日报和会议记录：</p><p><img src="https://cdn.sspai.com/2022/03/30/713136122b0b089f4e37950512c7bea9.gif"></p><p>你可以 <code>Ctrl</code>  + 鼠标左键点击 ，来打开同一份文档。左侧窗口使用 <code>Ctrl+E</code> 进入阅读视图，鼠标悬停在日报标题上方，通过弹出的小窗获取周报所需要的信息，然后就可以在右侧编辑视图下快速输入了。</p><p><img src="https://cdn.sspai.com/2022/03/30/article/9e40ab0889f561bca740a5c82f0f48e1?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><h4 id="Dataview-配置方法"><a href="#Dataview-配置方法" class="headerlink" title="Dataview 配置方法"></a>Dataview 配置方法</h4><p>将下面这段代码放到 Templater 模板库中，然后命名为 <code>周报模板</code></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">‍‍‍‍‍```dataview<br>list from <span class="hljs-string">&quot;工作&quot;</span><br>‍‍‍‍‍```<br></code></pre></td></tr></table></figure><p>然后再设置当 <code>在周报文件夹创建文档</code> ，则 <code>调用周报模板</code></p><p><img src="https://cdn.sspai.com/2022/03/30/article/fb14dae52dede984786e5edc6569b535?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>但是你会发现，上面那段代码会汇总 <code>工作</code> 文件夹中的<strong>所有文件</strong>，因为我们还没添加过滤条件</p><p><img src="https://cdn.sspai.com/2022/03/30/article/dc4d537407d95838d4e47c7ee7a0205c?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>显然我们需要的只有那些创建时间在一周之内的日报和会议记录文档，所以我们还需要两个步骤</p><ol><li> 为需要的文档打标签，分别是 <code>创建时间</code>、<code>日报</code>、以及 <code>会议记录</code></li><li> 让 Dataview 筛选过滤这些标签</li></ol><h4 id="用-YAML-语言为文档打标签"><a href="#用-YAML-语言为文档打标签" class="headerlink" title="用 YAML 语言为文档打标签"></a>用 YAML 语言为文档打标签</h4><p>你可以在日报最开头手动输入下面的内容，<strong>注意是英文输入法下的冒号，并且冒号后面需要空格</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-string">创建时间:</span> <span class="hljs-number">2022-03-22</span> <br><span class="hljs-string">标签:</span> <span class="hljs-string">日报</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>也可以用 Templater 插件在创建日报文档时自动插入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-string">创建时间:</span> &lt;%<span class="language-ruby"> tp.file.creation_date () </span>%&gt;<br><span class="hljs-string">标签:</span> <span class="hljs-string">日报</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>好了现在我们可以让 Dataview 插件正确过滤<strong>创建时间在 7 日之内</strong>，并且<strong>包含日报标签</strong>的文档了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">‍‍‍‍‍‍```dataview<br>list <span class="hljs-keyword">from</span> &quot;Work&quot;<br><span class="hljs-keyword">where</span> 创建时间 <span class="hljs-operator">&gt;=</span> <span class="hljs-type">date</span>(today) <span class="hljs-operator">-</span> dur(<span class="hljs-number">7</span> days)<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">contains</span>(标签,&quot;日报&quot;)<br>sort 创建时间 <span class="hljs-keyword">desc</span><br>‍‍‍‍‍‍```<br></code></pre></td></tr></table></figure><p><img src="https://cdn.sspai.com/2022/03/30/article/676b941239e27bb7982ceda162ca675f?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>后面，我还会反复提到这个插件，你可以自行阅读 <a href="https://blacksmithgu.github.io/obsidian-dataview/">Dataview 插件开发者文档</a>，学习更多高端操作，也可以点击下面大图，参考 Dataview 的部分语法。</p><p><img src="https://cdn.sspai.com/2022/04/01/31d1b8c94d35dcc45313378d721429bf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p>]]></content>
    
    
    <categories>
      
      <category>推荐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>obsidian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“xxx” 已损坏,打不开.您应该将它移到废纸篓,提示解决</title>
    <link href="/2022/11/20/%E2%80%9Cxxx%E2%80%9D%20%E5%B7%B2%E6%8D%9F%E5%9D%8F,%E6%89%93%E4%B8%8D%E5%BC%80.%E6%82%A8%E5%BA%94%E8%AF%A5%E5%B0%86%E5%AE%83%E7%A7%BB%E5%88%B0%E5%BA%9F%E7%BA%B8%E7%AF%93,%E6%8F%90%E7%A4%BA%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/11/20/%E2%80%9Cxxx%E2%80%9D%20%E5%B7%B2%E6%8D%9F%E5%9D%8F,%E6%89%93%E4%B8%8D%E5%BC%80.%E6%82%A8%E5%BA%94%E8%AF%A5%E5%B0%86%E5%AE%83%E7%A7%BB%E5%88%B0%E5%BA%9F%E7%BA%B8%E7%AF%93,%E6%8F%90%E7%A4%BA%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>打开终端输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo xattr -r -d com.apple.quarantine <br></code></pre></td></tr></table></figure><p>命令后面要加空格</p><p>然后把安装程序往终端里拖。<br>输入mac开机密码即可。</p>]]></content>
    
    
    <categories>
      
      <category>常见问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网穿透部署</title>
    <link href="/2022/11/20/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/11/20/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-操作系统"><a href="#1-操作系统" class="headerlink" title="1.操作系统"></a>1.操作系统</h1><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221003011415.png" alt="图片"><br><a href="https://www.deepin.org/index/zh">Deepin - 基于Linux的开源国产操作系统(软件生态好，缺点不够流畅)</a></p><p><strong>官网</strong><br><a href="https://www.ubuntu.org.cn/global">Ubuntu | 全球领先的用于个人电脑、平板及手机的操作系统</a></p><p><strong>我使用的版本</strong><br><a href="https://releases.ubuntu.com/22.04/ubuntu-22.04.1-desktop-amd64.iso">Ubuntu乌班图-桌面办公基本不用想了，优点流畅</a></p><h1 id="2-内网穿透原理"><a href="#2-内网穿透原理" class="headerlink" title="2.内网穿透原理"></a>2.内网穿透原理</h1><p><a href="https://ngrok.com/download">ngrok - 下载</a></p><h2 id="1-核心思想"><a href="#1-核心思想" class="headerlink" title="1.核心思想"></a>1.核心思想</h2><p><strong>内网穿透的核心思想就是“映射”和“转发”，把内网设备的端口映射到公网设备的端口上，来进行流量转发。</strong></p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221004231048.png"></p><p>简单地画一下示意图如上，基础设施由两个核心设备组成:</p><p>服务端：拥有公网IP的设备一台，即上图“公网服务器”，<strong>开放2个端口7000和6000</strong>，用于公网通信。<br>客户端：要访问的内网设备一台，即上图“内网家用电脑”，开放实际应用服务所需的端口（比如ssh服务，默认22端口），并将配置的公网映射端口6000告知服务端。<strong>所以服务端开放的那个端口6000实际上是客户端告诉它的。</strong><br>（以上端口除22以外均为自定义端口，无特<br>殊含义。)</p><h2 id="2-内网穿透原理和常用方法"><a href="#2-内网穿透原理和常用方法" class="headerlink" title="2.内网穿透原理和常用方法"></a>2.内网穿透原理和常用方法</h2><p>既然内网主机不能直接访问，那就在公网弄个服务器。</p><p>因为内网主机可以访问公网主机，然后将内网主机和公网主机进行连接，并且保持连接。</p><p>如果公网主机接收到的请求，通过链接转发给内网主机即可。</p><p>将内网服务进行公网映射，服务通常从端口提供服务，例如：</p><ul><li>ssh服务，端口好似22</li><li>web服务，端口是80和443</li><li>远程桌面服务，端口是3389，win专业版支持远程桌面</li><li>redis服务，端口是6379</li><li>jellyfin视频站，端口是8096</li><li>  我的世界 游戏服务，端口是25565<br><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221005130330.png" alt="图片"></li></ul><p><strong>参考文献：</strong><a href="https://blog.csdn.net/u010531178/article/details/124476585">(15条消息) 内网穿透原理和实现思路介绍_布啦豆的博客-CSDN博客_内网穿透原理</a></p><h1 id="3-使用ngrok-ittun穿透部署"><a href="#3-使用ngrok-ittun穿透部署" class="headerlink" title="3.使用ngrok-ittun穿透部署"></a>3.使用ngrok-ittun穿透部署</h1><p><strong>解压 并复制文件到/usr/local/bin目录下</strong></p><p><code>sudo tar xvzf ~/Downloads/ngrok-v3-stable-linux-amd64.tgz -C /usr/local/bin</code></p><h3 id="1-安装ngrok"><a href="#1-安装ngrok" class="headerlink" title="1. 安装ngrok"></a>1. 安装ngrok</h3><p><code>curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc &gt;/dev/null &amp;&amp; echo &quot;deb https://ngrok-agent.s3.amazonaws.com buster main&quot; | sudo tee /etc/apt/sources.list.d/ngrok.list &amp;&amp; sudo apt update &amp;&amp; sudo apt install ngrok</code></p><p><code>snap install ngrok</code></p><p> <em>若提示 snap不是可执行的命令，则先安装snap</em></p><p><code>sudo apt update</code><br><code>sudo apt install -y snapd</code> </p><p>登录 <a href="https://dashboard.ngrok.com/">https://dashboard.ngrok.com/</a> 注册一个账户，获取你的token。<br><strong>注意：验证码是谷歌的服务不开vpn出不来。</strong></p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221003012348.png"></p><p>账号注册成功后你会收到一份邮件，点击邮件中的链接验证身份。**(必须，否侧ngrok不给你代理)**</p><p>添加你的token<br><code>ngrok config add-authtoken &lt;token&gt;</code></p><p>`./ngrok config add-authtoken 你的token</p><h3 id="2-开通一个端口通道"><a href="#2-开通一个端口通道" class="headerlink" title="2.开通一个端口通道"></a>2.开通一个端口通道</h3><p><strong>开通http端口通道，映射本机80端口（用于web网络服务）</strong><br><code>ngrok http 80</code></p><p><strong>打开 22 端口TCP转发，并指定公网服务器地区（用于ssh连接）</strong><br><code>ngrok tcp 22 --log=stdout &gt; &quot;$HOME/ngrok.log&quot; --region ap &amp;</code></p><p><em>其中 region 的 ap 代表 ngrok 新加坡节点，访问速度相比美国节点会快一些。访问 <a href="https://ngrok.com/docs#config-options">https://ngrok.com/docs#config-options</a> 可以查看支持的所有区域。</em></p><p>不指定地区默认是jp日本。同一账号下，同一地区只能有一个会话。（开启订阅无限制）</p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221005131907.png"></p><h1 id="4-使用sunny-ngrok穿透"><a href="#4-使用sunny-ngrok穿透" class="headerlink" title="4.使用sunny-ngrok穿透"></a>4.使用sunny-ngrok穿透</h1><p>准备：<br>先去官网注册账号，2块钱完成实名认证。<a href="https://ngrok.cc/">官网</a></p><p>开通你需要的隧道规格服务。</p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221005144415.png"></p><p>完成后，在这个页面会出现你开通的隧道。拿到你的隧道ID<br><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221005144530.png"></p><h2 id="1-下载对应版本的客户端"><a href="#1-下载对应版本的客户端" class="headerlink" title="1.下载对应版本的客户端"></a>1.下载对应版本的客户端</h2><p><a href="https://www.ngrok.cc/download.html">Sunny-Ngrok内网转发</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo mv sunny /usr/local/bin/sunny<br>sudo chmod +x /usr/local/bin/sunny<br></code></pre></td></tr></table></figure><h2 id="2-启动隧道"><a href="#2-启动隧道" class="headerlink" title="2.启动隧道"></a>2.启动隧道</h2><p>Mac、Linux、树莓派的使用方式是一样的。Windows才会不一样。但是它们的启动方式都是通过隧道id启动，隧道id可以在隧道管理的列表里面获得。这里以映射http服务为例。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">./sunny clientid 隧道id<br></code></pre></td></tr></table></figure><p>启动多个隧道</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./sunny clientid 隧道id,隧道id<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221005144141.png"></p><p>要想后台运行可以使用 setsid 命令(会话断开不会杀死隧道进程)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">setsid ./sunny clientid 隧道<span class="hljs-built_in">id</span> &amp;<br></code></pre></td></tr></table></figure><h2 id="3-开机自启"><a href="#3-开机自启" class="headerlink" title="3.开机自启"></a>3.开机自启</h2><p>编写启动脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo vim /etc/init.d/sunny<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh -e</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## BEGIN INIT INFO</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Provides:          ngrok.cc</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Required-Start:    <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Required-Stop:     <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default-Start:     2 3 4 5</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default-Stop:      0 1 6</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Short-Description: autostartup of ngrok <span class="hljs-keyword">for</span> Linux</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## END INIT INFO</span></span><br><br>NAME=sunny<br>DAEMON=/usr/local/bin/$NAME<br>PIDFILE=/var/run/$NAME.pid<br><br>[ -x &quot;$DAEMON&quot; ] || exit 0<br><br>case &quot;$1&quot; in<br>  start)<br>      if [ -f $PIDFILE ]; then<br>        echo &quot;$NAME already running...&quot;<br>        echo -e &quot;\033[1;35mStart Fail\033[0m&quot;<br>      else<br>        echo &quot;Starting $NAME...&quot;<br>        start-stop-daemon -S -p $PIDFILE -m -b -o -q -x $DAEMON -- clientid 隧道id || return 2<br>        echo -e &quot;\033[1;32mStart Success\033[0m&quot;<br>    fi<br>    ;;<br>  stop)<br>        echo &quot;Stoping $NAME...&quot;<br>        start-stop-daemon -K -p $PIDFILE -s TERM -o -q || return 2<br>        rm -rf $PIDFILE<br>        echo -e &quot;\033[1;32mStop Success\033[0m&quot;<br>    ;;<br>  restart)<br>    $0 stop &amp;&amp; sleep 2 &amp;&amp; $0 start<br>    ;;<br>  *)<br>    echo &quot;Usage: $0 &#123;start|stop|restart&#125;&quot;<br>    exit 1<br>    ;;<br>esac<br>exit 0<br></code></pre></td></tr></table></figure><p>把代码里面的【隧道id】替换成自己的隧道id</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo chmod 755 /etc/init.d/sunny<br>sudo /etc/init.d/sunny start<br>sudo /etc/init.d/sunny start    #启动<br>sudo /etc/init.d/sunny stop     #停止<br>sudo /etc/init.d/sunny restart  #重启<br></code></pre></td></tr></table></figure><hr><p>Ubuntu、树莓派、Debian系列的系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">cd /etc/init.d<br>sudo update-rc.d sunny defaults 90    #加入开机启动<br>sudo update-rc.d -f sunny remove  #取消开机启动<br></code></pre></td></tr></table></figure><h1 id="5-使用公网IP服务器，搭建frp内网穿透环境。"><a href="#5-使用公网IP服务器，搭建frp内网穿透环境。" class="headerlink" title="5.使用公网IP服务器，搭建frp内网穿透环境。"></a>5.使用公网IP服务器，搭建frp内网穿透环境。</h1><h2 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h2><h3 id="1-下载frp库"><a href="#1-下载frp库" class="headerlink" title="1.下载frp库:"></a>1.下载frp库:</h3><p>建议去官网，之前在别人博客下的发现有挖矿病毒。</p><h3 id="2-解压frp压缩包"><a href="#2-解压frp压缩包" class="headerlink" title="2.解压frp压缩包"></a>2.解压frp压缩包</h3><p><code>tar -zxvf frp_0.33.0_linux_amd64.tar.gz</code></p><h3 id="3-进入解压目录"><a href="#3-进入解压目录" class="headerlink" title="3.进入解压目录"></a>3.进入解压目录</h3><p><code>cd frp_0.33.0_linux_amd64/</code></p><h3 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4.修改配置文件"></a>4.修改配置文件</h3><p><code>vi frps.ini</code></p><p>配置文件内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-comment"># frp监听的端口，默认是7000，可以改成其他的</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-comment"># 授权码，请改成更复杂的</span><br><span class="hljs-attr">token</span> = <span class="hljs-number">52010</span>  <span class="hljs-comment"># 这个token之后在客户端会用到</span><br><br><span class="hljs-comment"># frp管理后台端口，请按自己需求更改</span><br><span class="hljs-attr">dashboard_port</span> = <span class="hljs-number">7500</span><br><span class="hljs-comment"># frp管理后台用户名和密码，请改成自己的</span><br><span class="hljs-attr">dashboard_user</span> = admin<br><span class="hljs-attr">dashboard_pwd</span> = admin<br><span class="hljs-attr">enable_prometheus</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># frp日志配置</span><br><span class="hljs-attr">log_file</span> = /var/log/frps.log<br><span class="hljs-attr">log_level</span> = info<br><span class="hljs-attr">log_max_days</span> = <span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><h3 id="5-设置启动frp服务"><a href="#5-设置启动frp服务" class="headerlink" title="5.设置启动frp服务"></a>5.设置启动frp服务</h3><p>注册服务加入开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo mkdir -p /etc/frp<br>sudo cp frps.ini /etc/frp<br>sudo cp frps /usr/bin<br>sudo cp systemd/frps.service /usr/lib/systemd/system/<br><br>sudo systemctl enable frps<br>sudo systemctl start frps<br></code></pre></td></tr></table></figure><h3 id="6-防火墙开放"><a href="#6-防火墙开放" class="headerlink" title="6.防火墙开放"></a>6.防火墙开放</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">ufw allow 7000<br>ufw allow 7500<br></code></pre></td></tr></table></figure><p>7000和7500两个端口分别对应frps.ini配置中的bind_port和dashboard_port</p><h3 id="7-验证服务端是否启动成功"><a href="#7-验证服务端是否启动成功" class="headerlink" title="7. 验证服务端是否启动成功"></a>7. 验证服务端是否启动成功</h3><p>访问：http://服务器IP:后台管理端口” ，输入用户名和密码可以查看连接状态<br>如：<a href="http://1.177.88.135:7500/">1.117.90.135:7500</a>/，用户名和密码分别对应frps.ini文件中的dashboard_user和dashboard_pwd  </p><p><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221018112304.png"><br><img src="https://cdn.staticaly.com/gh/GuoAccount/obsidianImage/main/img/20221018112356.png"></p><p>如果上述步骤没有问题，则说明frp的服务端配置成功了，也就意味着内网穿透你已经成功了一半.</p><h2 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h2><h3 id="1-进入解压目录"><a href="#1-进入解压目录" class="headerlink" title="1.进入解压目录"></a>1.进入解压目录</h3><p>[[内网穿透部署#3.进入解压目录]]</p><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><p><code>vi frpc.ini  (注意哦，不是frps.ini)</code></p><p>配置文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">客户端配置</span><br>[common]<br>server_addr = 服务器ip<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">与frps.ini的bind_port一致</span><br>server_port = 7000<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">与frps.ini的token一致</span><br>token = 52010<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置ssh服务</span><br>[ssh]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">这个自定义，之后再ssh连接的时候要用</span><br>remote_port = 6000 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置http服务，可用于小程序开发、远程调试等，如果没有可以不写下面的</span><br>[web]<br>type = http<br>local_ip = 127.0.0.1<br>local_port = 8080<br><span class="hljs-meta prompt_"># </span><span class="language-bash">web域名</span><br>subdomain = test.hijk.pw<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自定义的远程服务器端口，例如8080</span><br>remote_port = 8080<br></code></pre></td></tr></table></figure><p>`</p><h3 id="3-防火墙开放"><a href="#3-防火墙开放" class="headerlink" title="3.防火墙开放"></a>3.防火墙开放</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">ufw allow 7000<br>ufw allow 7500<br></code></pre></td></tr></table></figure><h3 id="4-客户端开机自启"><a href="#4-客户端开机自启" class="headerlink" title="4.客户端开机自启"></a>4.客户端开机自启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo mkdir -p /etc/frp<br>sudo cp frpc.ini /etc/frp<br>sudo cp frpc /usr/bin<br>sudo cp systemd/frpc.service /usr/lib/systemd/system/<br><br>sudo systemctl enable frpc<br>sudo systemctl start frpc<br></code></pre></td></tr></table></figure><h3 id="5-测试穿透是否配置成功"><a href="#5-测试穿透是否配置成功" class="headerlink" title="5. 测试穿透是否配置成功"></a>5. 测试穿透是否配置成功</h3><p><code>ssh 用户名@服务端ip  -p 端口号</code><br><font color="yellow">如果请求成功，那么恭喜你成功内网穿透！</font></p><h2 id="3-参考文献"><a href="#3-参考文献" class="headerlink" title="3.参考文献"></a>3.参考文献</h2><p><a href="https://blog.csdn.net/weixin_43922901/article/details/109261700?spm=1001.2014.3001.5506">(9条消息) 使用frp配置内网访问（穿透）教程（超详细，简单）_*Lisen的博客-CSDN博客_frp</a></p><h1 id="6-使用NPS实现内网穿透"><a href="#6-使用NPS实现内网穿透" class="headerlink" title="6.使用NPS实现内网穿透"></a>6.使用NPS实现内网穿透</h1><p>安装包：<a href="https://github.com/ehang-io/nps/releases">Releases · ehang-io/nps (github.com)</a></p><p>教程：<a href="https://ehang-io.github.io/">NPS教程</a></p>]]></content>
    
    
    <categories>
      
      <category>开发部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim常用命令(1)</title>
    <link href="/2022/11/19/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(1)/"/>
    <url>/2022/11/19/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="1、文本全局替换"><a href="#1、文本全局替换" class="headerlink" title="1、文本全局替换"></a>1、文本全局替换</h1><p>执行:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs VIm">%s/oldstr/newstr/g<br></code></pre></td></tr></table></figure><p> 说明：  </p><p> :%s - 表示搜索替换<br> oldstr - 被替换的字符串<br> newstr - 要替换的字符串<br> g - Global，表示全局替换（如果没有”/g”，则只替换每行的第一个</p><h1 id="2、一次复制多行"><a href="#2、一次复制多行" class="headerlink" title="2、一次复制多行"></a>2、一次复制多行</h1><p>执行”yyp”，会将光标所在的一行复制一遍并添加到下方；<br>执行”yynp”，会将光标所在的一行复制n遍并添加到下方，将n换成实际数字即可；<br>执行”nyyp”，会将从光标行开始的n行复制一遍添加到下方，将n换成实际数字即可。</p><h1 id="3、一次删除多行"><a href="#3、一次删除多行" class="headerlink" title="3、一次删除多行"></a>3、一次删除多行</h1><p> 执行”dd”，会将光标所在的一行删除；<br> 执行”ndd”，会将从光标行开始的n行删除，将n换成实际数字即可；</p><h1 id="4、快速移动到文件头和文件尾"><a href="#4、快速移动到文件头和文件尾" class="headerlink" title="4、快速移动到文件头和文件尾"></a>4、快速移动到文件头和文件尾</h1><p>  执行”gg”，会快速移动到文件头位置；<br>  执行”Shift+G”，会快速移动到文结尾位置。  </p><h1 id="5、快速移动到行首和行尾"><a href="#5、快速移动到行首和行尾" class="headerlink" title="5、快速移动到行首和行尾"></a>5、快速移动到行首和行尾</h1><p> 执行”$”，会快速移动到行位；<br> 执行”^”，会快速移动到行首</p><h1 id="6-文本位置跳转"><a href="#6-文本位置跳转" class="headerlink" title="6.文本位置跳转"></a>6.文本位置跳转</h1><p><code>G</code> 跳转到文章最后一行<br><code>gg</code>跳转到文章第一行<br><code>zz</code>当前光标位置展示在屏幕中央</p><h1 id="7-全选"><a href="#7-全选" class="headerlink" title="7.全选"></a>7.全选</h1><p>全选（高亮显示）：按esc后，然后ggvG或者ggVG</p><p>全部复制：按esc后，然后ggyG</p><p>全部删除：按esc后，然后dG</p>]]></content>
    
    
    <categories>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（httpclient）Java请求第三方接口获取数据</title>
    <link href="/2022/11/19/Java%E8%AF%B7%E6%B1%82%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%88httpclient%EF%BC%89/"/>
    <url>/2022/11/19/Java%E8%AF%B7%E6%B1%82%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%88httpclient%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>pom文件添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--HttpClient--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--fastjson--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h2 id="第二步：代码实现"><a href="#第二步：代码实现" class="headerlink" title="第二步：代码实现"></a>第二步：代码实现</h2><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doGet</span><span class="hljs-params">(String url, String charset, String token)</span> &#123;<br>        <span class="hljs-comment">//1.生成HttpClient对象并设置参数</span><br>        <span class="hljs-type">HttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpClient</span>();<br>        <span class="hljs-comment">//设置Http连接超时为10秒</span><br>        httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">//2.生成GetMethod对象并设置参数</span><br>        <span class="hljs-type">GetMethod</span> <span class="hljs-variable">getMethod</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetMethod</span>(url);<br>        <span class="hljs-comment">//设置get请求超时为30秒</span><br>        getMethod.getParams().setParameter(HttpMethodParams.SO_TIMEOUT, <span class="hljs-number">30000</span>);<br>        <span class="hljs-comment">//设置请求重试处理，用的是默认的重试处理：请求三次</span><br>        getMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultHttpMethodRetryHandler</span>());<br>        <span class="hljs-keyword">if</span> (!token.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            postMethod.addRequestHeader(<span class="hljs-string">&quot;Authorization&quot;</span>, token);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//3.执行HTTP GET 请求</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> httpClient.executeMethod(getMethod);<br>            <span class="hljs-comment">//4.判断访问的状态码</span><br>            <span class="hljs-keyword">if</span> (statusCode != HttpStatus.SC_OK) &#123;<br>                System.err.println(<span class="hljs-string">&quot;请求出错：&quot;</span> + getMethod.getStatusLine());<br>            &#125;<br>            <span class="hljs-comment">//读取HTTP响应内容，这里简单打印网页内容</span><br>            <span class="hljs-comment">//读取为字节数组</span><br>            <span class="hljs-type">byte</span>[] responseBody = getMethod.getResponseBody();<br>            response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(responseBody, charset);<br>            <span class="hljs-comment">//读取为InputStream，在网页内容数据量大时候推荐使用</span><br>            <span class="hljs-comment">//InputStream response = getMethod.getResponseBodyAsStream();</span><br>        &#125; <span class="hljs-keyword">catch</span> (HttpException e) &#123;<br>            <span class="hljs-comment">//发生致命的异常，可能是协议不对或者返回的内容有问题</span><br>            System.out.println(<span class="hljs-string">&quot;请检查输入的URL!&quot;</span>);<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">//发生网络异常</span><br>            System.out.println(<span class="hljs-string">&quot;发生网络异常!&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放连接</span><br>            getMethod.releaseConnection();<br>        &#125;<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;        <br><br></code></pre></td></tr></table></figure><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * post请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url 请求的路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  jsonstr请求的信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doPost</span><span class="hljs-params">(String url, String jsonstr,String token)</span> &#123;<br>        <span class="hljs-type">HttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpClient</span>();<br>        <span class="hljs-type">PostMethod</span> <span class="hljs-variable">postMethod</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PostMethod</span>(url);<br><br>        postMethod.addRequestHeader(<span class="hljs-string">&quot;accept&quot;</span>, <span class="hljs-string">&quot;*/*&quot;</span>);<br>        postMethod.addRequestHeader(<span class="hljs-string">&quot;connection&quot;</span>, <span class="hljs-string">&quot;Keep-Alive&quot;</span>);<br>        <span class="hljs-comment">//设置json格式传送</span><br>        postMethod.addRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>        <span class="hljs-comment">//必须设置下面这个Header</span><br><span class="hljs-comment">//        postMethod.addRequestHeader(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36&quot;);</span><br><span class="hljs-keyword">if</span> (!token.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            postMethod.addRequestHeader(<span class="hljs-string">&quot;Authorization&quot;</span>, token);<br>        &#125;<br><span class="hljs-type">RequestEntity</span> <span class="hljs-variable">requestEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRequestEntity</span>(jsonstr,<span class="hljs-string">&quot;json&quot;</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        postMethod.setRequestEntity(requestEntity);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> httpClient.executeMethod(postMethod);<br>            System.out.println(code);<br>            <span class="hljs-keyword">if</span> (code == <span class="hljs-number">200</span>) &#123;<br>                res = postMethod.getResponseBodyAsString();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>api</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac安装brew包管理工具</title>
    <link href="/2022/11/18/mac%E5%AE%89%E8%A3%85brew%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/11/18/mac%E5%AE%89%E8%A3%85brew%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p>brew 是 Mac 下的一个包管理工具，类似于 centos 下的 yum，ubuntu中的apt。<br>可以很方便地进行安装/卸载/更新各种软件包。例如：nodejs,svn,tomcat,mysql, mongodb 等等，可以用来快速搭建各种本地环境，程序员必备工具</p><h3 id="安装-brew"><a href="#安装-brew" class="headerlink" title="安装 brew"></a>安装 brew</h3><p>首先要通过如下命令安装 brew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/ruby -e <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="安装-卸载-更新"><a href="#安装-卸载-更新" class="headerlink" title="安装/卸载/更新"></a>安装/卸载/更新</h4><p>以 nodejs 为例，执行下面命令即可，安装目录在 <code>/usr/local/Cellar</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install nodejs<br></code></pre></td></tr></table></figure><p>如果需要更新或卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew upgrade nodejs<br>brew remove nodejs<br></code></pre></td></tr></table></figure><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew list                   <span class="hljs-comment"># 列出当前安装的软件</span><br>brew list [软件包名]         <span class="hljs-comment"># 查看安装目录</span><br>brew search nodejs          <span class="hljs-comment"># 查询与 nodejs 相关的可用软件</span><br>brew info nodejs            <span class="hljs-comment"># 查询 nodejs 的安装信息</span><br></code></pre></td></tr></table></figure><p>如果需要指定版本，可以在 <code>brew search</code> 查看有没有需要的版本，在 <code>@</code> 后面指定版本号，例如 <code>brew install thrift@0.9</code></p><h2 id="brew-services"><a href="#brew-services" class="headerlink" title="brew services"></a>brew services</h2><p><code>brew services</code> 是一个非常强大的工具，可以用来管理各种服务的启停，有点像 linux 里面的 services，非常方便，以 elasticsearch 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install elasticsearch          <span class="hljs-comment"># 安装 elasticsearch</span><br>brew services start elasticsearch   <span class="hljs-comment"># 启动 elasticsearch</span><br>brew services stop elasticsearch    <span class="hljs-comment"># 停止 elasticsearch</span><br>brew services restart elasticsearch <span class="hljs-comment"># 重启 elasticsearch</span><br>brew services list                  <span class="hljs-comment"># 列出当前的状态</span><br></code></pre></td></tr></table></figure><p>brew services 服务相关配置以及日志路径</p><ul><li>  配置路径：<code>/usr/local/etc/</code></li><li>  日志路径：<code>/usr/local/var/log</code></li></ul><h2 id="已经安装Homebrew-想要替换源"><a href="#已经安装Homebrew-想要替换源" class="headerlink" title="已经安装Homebrew,想要替换源"></a>已经安装<code>Homebrew</code>,想要替换源</h2><ul><li>  中科大</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> HOMEBREW_BREW_GIT_REMOTE=<span class="hljs-string">&quot;https://mirrors.ustc.edu.cn/brew.git&quot;</span><br>brew update<br></code></pre></td></tr></table></figure><ul><li>  清华</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> HOMEBREW_BREW_GIT_REMOTE=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span><br>brew update<br></code></pre></td></tr></table></figure><ul><li>  阿里</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 替换brew.git:</span><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span><br>git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git<br><span class="hljs-comment"># 替换homebrew-core.git:</span><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span><br>git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git<br><span class="hljs-comment"># 应用生效</span><br>brew update<br><span class="hljs-comment"># 替换homebrew-bottles:</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile<br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><ul><li>  腾讯</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">腾讯源<br><br>替换brew.git:<br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span><br>git remote set-url origin https://mirrors.cloud.tencent.com/homebrew/brew.git<br><br>替换homebrew-core.git:<br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span><br>git remote set-url origin https://mirrors.cloud.tencent.com/homebrew/homebrew-core.git<br><br><span class="hljs-comment"># 刷新源</span><br>brew update<br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li>  brew 官网：<a href="https://brew.sh/">https://brew.sh/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>brew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac安装SVN</title>
    <link href="/2022/11/18/mac%E5%AE%89%E8%A3%85SVN/"/>
    <url>/2022/11/18/mac%E5%AE%89%E8%A3%85SVN/</url>
    
    <content type="html"><![CDATA[<p> 安装SVN</p><p>打开<code>终端</code>，输入如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install subversion<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>svn</tag>
      
      <tag>arm64</tag>
      
      <tag>M1</tag>
      
      <tag>M1Pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成微信小程序二维码</title>
    <link href="/2022/11/18/%E7%94%9F%E6%88%90%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C%E7%BB%B4%E7%A0%81%EF%BC%88POST%E8%AF%B7%E6%B1%82%EF%BC%89/"/>
    <url>/2022/11/18/%E7%94%9F%E6%88%90%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C%E7%BB%B4%E7%A0%81%EF%BC%88POST%E8%AF%B7%E6%B1%82%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="生成微信小程序二维码"><a href="#生成微信小程序二维码" class="headerlink" title="生成微信小程序二维码"></a>生成微信小程序二维码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * 生成微信小程序二维码</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">filePath</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *         本地生成二维码路径</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">page</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *         当前小程序相对页面 必须是已经发布的小程序存在的页面（否则报错），例如 pages/index/index, 根路径前不要填加 /,不能携带参数（参数请放在scene字段里），如果不填写这个字段，默认跳主页面</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">scene</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *         最大32个可见字符，只支持数字，大小写英文以及部分特殊字符：!#$&amp;&#x27;()*+,/:;=?@-._~，其它字符请自行编码为合法字符（因不支持%，中文无法使用 urlencode 处理，请使用其他编码方式）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">accessToken</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *         接口调用凭证</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">env_version</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *         要打开的小程序版本。正式版为 &quot;release&quot;，体验版为 &quot;trial&quot;，开发版为 &quot;develop&quot;。默认是正式版。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateQrCode</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> filePath, <span class="hljs-built_in">String</span> page, <span class="hljs-built_in">String</span> scene, <span class="hljs-built_in">String</span> accessToken,<span class="hljs-built_in">String</span> env_version</span>) &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-comment">//调用微信接口生成二维码</span><br><br>            <span class="hljs-variable constant_">URL</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&quot;https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=&quot;</span> + accessToken);<br><br>            <span class="hljs-title class_">HttpURLConnection</span> httpURLConnection = (<span class="hljs-title class_">HttpURLConnection</span>) url.<span class="hljs-title function_">openConnection</span>();<br><br>            httpURLConnection.<span class="hljs-title function_">setRequestMethod</span>(<span class="hljs-string">&quot;POST&quot;</span>);<span class="hljs-comment">// 提交模式</span><br><br>            <span class="hljs-comment">// conn.setConnectTimeout(10000);//连接超时 单位毫秒</span><br><br>            <span class="hljs-comment">// conn.setReadTimeout(2000);//读取超时 单位毫秒</span><br><br>            <span class="hljs-comment">// 发送POST请求必须设置如下两行</span><br><br>            httpURLConnection.<span class="hljs-title function_">setDoOutput</span>(<span class="hljs-literal">true</span>);<br><br>            httpURLConnection.<span class="hljs-title function_">setDoInput</span>(<span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">// 获取URLConnection对象对应的输出流</span><br><br>            <span class="hljs-title class_">PrintWriter</span> printWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(httpURLConnection.<span class="hljs-title function_">getOutputStream</span>());<br><br>            <span class="hljs-comment">// 发送请求参数</span><br><br>            <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> paramJson = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>();<br><br>            <span class="hljs-comment">//这就是你二维码里携带的参数 String型  名称不可变</span><br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;scene&quot;</span>, scene);<br><br>            <span class="hljs-comment">//注意该接口传入的是page而不是path</span><br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;page&quot;</span>, page);<br><br>            <span class="hljs-comment">//这是设置扫描二维码后跳转的页面</span><br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-number">200</span>);<br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;is_hyaline&quot;</span>, <span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">//是否检查pages路径 默认true</span><br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;check_path&quot;</span>, <span class="hljs-literal">false</span>);<br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;auto_color&quot;</span>, <span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">//版本</span><br><br>            paramJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;env_version&quot;</span>,env_version);<br><br>            printWriter.<span class="hljs-title function_">write</span>(paramJson.<span class="hljs-title function_">toString</span>());<br><br>            <span class="hljs-comment">// flush输出流的缓冲</span><br><br>            printWriter.<span class="hljs-title function_">flush</span>();<br><br>            <span class="hljs-comment">//开始获取数据</span><br><br>            <span class="hljs-title class_">BufferedInputStream</span> bis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(httpURLConnection.<span class="hljs-title function_">getInputStream</span>());<br><br>            <span class="hljs-title class_">OutputStream</span> os = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath));<br><br>            int len;<br><br>            byte[] arr = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">1024</span>];<br><br>            <span class="hljs-keyword">while</span> ((len = bis.<span class="hljs-title function_">read</span>(arr)) != -<span class="hljs-number">1</span>) &#123;<br><br>                os.<span class="hljs-title function_">write</span>(arr, <span class="hljs-number">0</span>, len);<br><br>                os.<span class="hljs-title function_">flush</span>();<br><br>            &#125;<br><br>            os.<span class="hljs-title function_">close</span>();<br><br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br><br>            e.<span class="hljs-title function_">printStackTrace</span>();<br><br>        &#125;<br><br><span class="hljs-comment">//        System.out.println(&quot;打开地址查看生成的二维码：&quot; + filePath);</span><br><br><span class="hljs-comment">//        return filePath;</span><br><br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决maven gexin依赖问题</title>
    <link href="/2022/11/16/%E8%A7%A3%E5%86%B3maven%20gexin%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/16/%E8%A7%A3%E5%86%B3maven%20gexin%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h1><p>在使用“个推”开源组件时，发现 maven 一直无法下载依赖，报错如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console">Cannot resolve com.gexin.platform:gexin-rp-sdk-base:4.0.0.38<br>Cannot resolve com.gexin.platform:gexin-rp-sdk-http:4.1.2.3<br>Cannot resolve com.gexin.platform:gexin-rp-sdk-template:4.0.0.31<br>Cannot resolve com.gexin.platform:gexin-rp-fastjson:1.0.0.7<br></code></pre></td></tr></table></figure><h1 id="2、解决办法"><a href="#2、解决办法" class="headerlink" title="2、解决办法"></a>2、解决办法</h1><p>分 2 个步骤：</p><h2 id="①修改-maven-的配置文件-settings-xml-的镜像配置如下："><a href="#①修改-maven-的配置文件-settings-xml-的镜像配置如下：" class="headerlink" title="①修改 maven 的配置文件 settings.xml 的镜像配置如下："></a>①修改 maven 的配置文件 settings.xml 的镜像配置如下：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*,!getui-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 其中 【,!getui-nexus】表示 getui-nexus 这个依赖不从 aliyun 进行下载（如果有其它不从阿里云仓库下载的也是使用逗号 , 分隔）。</p><h2 id="②在项目的-pom-xml-配置里增加-getui-nexus-的仓库配置，如下："><a href="#②在项目的-pom-xml-配置里增加-getui-nexus-的仓库配置，如下：" class="headerlink" title="②在项目的 pom.xml 配置里增加 getui-nexus 的仓库配置，如下："></a>②在项目的 pom.xml 配置里增加 getui-nexus 的仓库配置，如下：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 个推依赖仓库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>getui-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://mvn.gt.getui.com/nexus/content/repositories/releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span>  <br>    <span class="hljs-comment">&lt;!-- 个推配置--&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">gexin.rp.sdk.base.version</span>&gt;</span>4.0.0.26<span class="hljs-tag">&lt;/<span class="hljs-name">gexin.rp.sdk.base.version</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">gexin.rp.sdk.http.version</span>&gt;</span>4.1.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">gexin.rp.sdk.http.version</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">gexin.rp.sdk.template.version</span>&gt;</span>4.0.0.20<span class="hljs-tag">&lt;/<span class="hljs-name">gexin.rp.sdk.template.version</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">gexin.rp.fastjson.version</span>&gt;</span>1.0.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">gexin.rp.fastjson.version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>       <br>         <span class="hljs-comment">&lt;!-- 个推 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.gexin.platform<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gexin-rp-sdk-base<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;gexin.rp.sdk.base.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.gexin.platform<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gexin-rp-sdk-http<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;gexin.rp.sdk.http.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.gexin.platform<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gexin-rp-sdk-template<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;gexin.rp.sdk.template.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.gexin.platform<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gexin-rp-fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;gexin.rp.fastjson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3、重启-IDEA-即可生效"><a href="#3、重启-IDEA-即可生效" class="headerlink" title="3、重启 IDEA 即可生效"></a>3、重启 IDEA 即可生效</h1>]]></content>
    
    
    <categories>
      
      <category>常见问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql之根据经纬度按距离排序</title>
    <link href="/2022/11/16/Mysql%20%E4%B9%8B%E6%A0%B9%E6%8D%AE%E7%BB%8F%E7%BA%AC%E5%BA%A6%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/11/16/Mysql%20%E4%B9%8B%E6%A0%B9%E6%8D%AE%E7%BB%8F%E7%BA%AC%E5%BA%A6%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、方式一"><a href="#一、方式一" class="headerlink" title="一、方式一"></a>一、方式一</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">st_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。<br>SELECT *,<br>(st_distance(point(lng,lat),point(116.3424590000,40.0497810000))*111195/1000 ) as juli FROM table ORDER BY juli ASC <br></code></pre></td></tr></table></figure><h2 id="二、方式二"><a href="#二、方式二" class="headerlink" title="二、方式二"></a>二、方式二</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select *, ROUND(6378.138*2*ASIN(SQRT(POW(SIN((&#123;$lat&#125;*PI()/180-lat*PI()/180)/2),2)+COS(&#123;$lat&#125;*PI()/180)*COS(lat*PI()/180)*POW(SIN((&#123;$lng&#125;*PI()/180-lng*PI()/180)/2),2)))*1000) AS juli from table order by juli asc<br></code></pre></td></tr></table></figure><p>原理：</p><ul><li>MYSQL空间函数<br>  返回球体上两个点和/或多点之间的最小球面距离（以米为单位）</li></ul><h3 id="函数st-distance-sphere-和-st-distance"><a href="#函数st-distance-sphere-和-st-distance" class="headerlink" title="函数st_distance_sphere 和 st_distance"></a>函数st_distance_sphere 和 st_distance</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> st_distance_sphere(POINT(<span class="hljs-number">121.590346</span>, <span class="hljs-number">31.388096</span>),POINT(<span class="hljs-number">121.590345</span>, <span class="hljs-number">31.388095</span>)) <span class="hljs-keyword">AS</span> distant<br></code></pre></td></tr></table></figure><p>结果（单位：米）<br>0.14620023407776306</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> st_distance(POINT(<span class="hljs-number">121.590346</span>, <span class="hljs-number">31.388096</span>),POINT(<span class="hljs-number">121.590345</span>, <span class="hljs-number">31.388095</span>))<span class="hljs-operator">*</span><span class="hljs-number">111195</span> <span class="hljs-keyword">AS</span> distant<br></code></pre></td></tr></table></figure><p>结果：<br>0.15725347695038774</p><blockquote><p>st_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。</p></blockquote><p>为什么不一样呢？</p><blockquote><p>因为在不同纬度，每度的长度是不一样的。所以 st_distance_sphere 的结果是准确的。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>echart</title>
    <link href="/2022/11/15/echart/"/>
    <url>/2022/11/15/echart/</url>
    
    <content type="html"><![CDATA[<h3 id="1-echart鼠标放上去显示数据"><a href="#1-echart鼠标放上去显示数据" class="headerlink" title="1.echart鼠标放上去显示数据"></a>1.echart鼠标放上去显示数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// 基于准备好的dom，初始化echarts实例</span><br><span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;latest_pv&#x27;</span>));<br><br><span class="hljs-comment">// 指定图表的配置项和数据</span><br><span class="hljs-keyword">var</span> option = &#123;<br>    <span class="hljs-attr">xAxis</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>        <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;&#123;$d1&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d2&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d3&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d4&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d5&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d6&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;$d7&#125;&#x27;</span>]<br>    &#125;,<br>    <span class="hljs-attr">yAxis</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">series</span>: [&#123;<br>        <span class="hljs-attr">data</span>: [&#123;$uv1&#125;, &#123;$uv2&#125;, &#123;$uv3&#125;, &#123;$uv4&#125;, &#123;$uv5&#125;, &#123;$uv6&#125;, &#123;$uv7&#125;],<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span><br>    &#125;],<br>    tooltip : &#123;<span class="hljs-comment">//主要是这块的功能</span><br>        <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;axis&#x27;</span>,<br>        <span class="hljs-attr">axisPointer</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;cross&#x27;</span>,<br>            <span class="hljs-attr">label</span>: &#123;<br>                <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;#6a7985&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    &#125;;<br><br><span class="hljs-comment">// 使用刚指定的配置项和数据显示图表。</span><br>myChart.<span class="hljs-title function_">setOption</span>(option);<br></code></pre></td></tr></table></figure><p> <a href="https://www.cnblogs.com/chenyingying0/archive/2020/09/02/13602645.html">echarts鼠标移上去显示数据 - 陈莺莺呀 - 博客园 (cnblogs.com)</a> </p><h3 id="2-去除保存按钮"><a href="#2-去除保存按钮" class="headerlink" title="2.去除保存按钮"></a>2.去除保存按钮</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">toolbox</span>: &#123;<br>      <span class="hljs-attr">feature</span>: &#123;<br>          <span class="hljs-attr">saveAsImage</span>: &#123;<br>              <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span><br>          &#125;<br>      &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure><h3 id="3-Echarts-柱状图设置颜色"><a href="#3-Echarts-柱状图设置颜色" class="headerlink" title="3.Echarts 柱状图设置颜色"></a>3.Echarts 柱状图设置颜色</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">option2</span>: &#123;<br>            <span class="hljs-attr">xAxis</span>: &#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>                <span class="hljs-attr">data</span>: [],<br>            &#125;,<br>            <span class="hljs-attr">yAxis</span>: &#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">series</span>: [<br>                &#123;<br>                    <span class="hljs-attr">data</span>: [],<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>                    <span class="hljs-attr">showBackground</span>: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-attr">backgroundStyle</span>: &#123;<br>                        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgba(111, 162, 135, 0.2)&#x27;</span><br>                    &#125;,<br>                    <span class="hljs-attr">itemStyle</span>: &#123;<br>                        <span class="hljs-attr">normal</span>: &#123;<br>                            <span class="hljs-comment">//这里是颜色</span><br>                            <span class="hljs-attr">color</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) &#123;<br>                                <span class="hljs-comment">//注意，如果颜色太少的话，后面颜色不会自动循环，最好多定义几个颜色</span><br>                                <span class="hljs-keyword">var</span> colorList = [<span class="hljs-string">&#x27;#00A3E0&#x27;</span>,<span class="hljs-string">&#x27;#FFA100&#x27;</span>, <span class="hljs-string">&#x27;#ffc0cb&#x27;</span>, <span class="hljs-string">&#x27;#CCCCCC&#x27;</span>, <span class="hljs-string">&#x27;#BBFFAA&#x27;</span>,<span class="hljs-string">&#x27;#749f83&#x27;</span>, <span class="hljs-string">&#x27;#ca8622&#x27;</span>];<br>                                <span class="hljs-keyword">return</span> colorList[params.<span class="hljs-property">dataIndex</span>]<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>            ]<br>        &#125;,<br><br></code></pre></td></tr></table></figure><p> <a href="https://blog.csdn.net/qq_45222558/article/details/124553831">(3条消息) Echarts 柱状图设置颜色_Logan星的博客-CSDN博客_echarts柱状图颜色设置</a> </p><h1 id="4-文字倾斜"><a href="#4-文字倾斜" class="headerlink" title="4.文字倾斜"></a>4.文字倾斜</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//xAxis 中</span><br>  <span class="hljs-attr">axisLabel</span>: &#123;  <br>     <span class="hljs-attr">interval</span>:<span class="hljs-number">0</span>,  <br>     <span class="hljs-attr">rotate</span>:<span class="hljs-number">40</span>  <br>  &#125;<br>  <span class="hljs-comment">//option中和xAxis同级 控制x轴内容距离 底部距离</span><br>  <span class="hljs-attr">grid</span>: &#123;  <br>  <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;10%&#x27;</span>,  <br>  <span class="hljs-attr">bottom</span>:<span class="hljs-string">&#x27;35%&#x27;</span>  <br>  &#125;<br></code></pre></td></tr></table></figure><p><a href="http://www.wjhsh.net/qingqinglanlan-p-8334370.html">echarts x轴文字显示不全(推荐-xAxis文字倾斜比较全面的3种做法值得推荐) (wjhsh.net)</a><img src="https://gitee.com/g2s19980817/image/raw/master/img/20170330155103733.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java笔记（持续更新）</title>
    <link href="/2022/11/15/java%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <url>/2022/11/15/java%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h1><h5 id="一、静态类和非静态类之间的区别"><a href="#一、静态类和非静态类之间的区别" class="headerlink" title="一、静态类和非静态类之间的区别"></a>一、静态类和非静态类之间的区别</h5><ol><li>内部静态类不需要有指向外部类的引用。但非静态内部类需要持有对外部类的引用</li><li>非静态内部类能够访问外部类的静态和非静态成员。静态类不能访问外部类的非静态成员。他只能访问外部类的静态成员</li><li>一个非静态内部类不能脱离外部类实体被创建，一个非静态内部类可以访问外部类的数据和方法，因为他就在外部类里面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: OutClass</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: xf</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 19.6.27 10:59</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutClass</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  全局静态变量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;i love java&quot;</span>;<br>     <span class="hljs-comment">// 创建静态类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">staticInnerClass</span>&#123;<br>         <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMsg</span><span class="hljs-params">()</span> &#123;<br>             System.out.println(<span class="hljs-string">&quot;静态内部类展示信息:&quot;</span>+msg);<br>         &#125;<br><br>    &#125;<br>    <span class="hljs-comment">// 创建非静态内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">disPlayMsg</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;非静态内部类展示信息:&quot;</span>+msg);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建静态内部类实例</span><br>        <span class="hljs-type">staticInnerClass</span> <span class="hljs-variable">sic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutClass</span>.staticInnerClass();<br>        sic.showMsg();<br><br>        <span class="hljs-comment">// 创建非静态内部类实例,需要先创建外部类的实例 OutClass().new</span><br>        <span class="hljs-type">InnerClass</span> <span class="hljs-variable">ic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutClass</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerClass</span>();<br>        ic.disPlayMsg();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="二、迭代器"><a href="#二、迭代器" class="headerlink" title="二、迭代器"></a>二、迭代器</h5><p>迭代器 it 的两个基本操作是 next 、hasNext 和 remove。</p><p>调用 it.next() 会返回迭代器的下一个元素，并且更新迭代器的状态。</p><p>调用 it.hasNext() 用于检测集合中是否还有元素。</p><p>调用 it.remove() 将迭代器返回的元素删除。</p><h1 id="集合排序"><a href="#集合排序" class="headerlink" title="集合排序"></a>集合排序</h1><h2 id="1-Comparable"><a href="#1-Comparable" class="headerlink" title="1.Comparable"></a>1.Comparable</h2><p>Comparable可以认为是一个<strong>内比较器</strong>，实现了Comparable接口的类有一个特点，就是这些类是可以和自己比较的，至于具体和另一个实现了Comparable接口的类如何比较，则依赖compareTo方法的实现，compareTo方法也被称为<strong>自然比较方法</strong>。如果开发者add进入一个Collection的对象想要Collections的sort方法帮你自动进行排序的话，那么这个对象必须实现Comparable接口。compareTo方法的返回值是int，有三种情况：</p><p>1、比较者大于被比较者（也就是compareTo方法里面的对象），那么返回正整数</p><p>2、比较者等于被比较者，那么返回0</p><p>3、比较者小于被比较者，那么返回负整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Domain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Domain&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> String str;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Domain</span><span class="hljs-params">(String str)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.str = str;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Domain domain)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.str.compareTo(domain.str) &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.str.compareTo(domain.str) == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStr</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-Comparator"><a href="#2-Comparator" class="headerlink" title="2.Comparator"></a>2.Comparator</h2><p>Comparator可以认为是是一个<strong>外比较器</strong>，个人认为有两种情况可以使用实现Comparator接口的方式：</p><p>1、一个对象不支持自己和自己比较（没有实现Comparable接口），但是又想对两个对象进行比较</p><p>2、一个对象实现了Comparable接口，但是开发者认为compareTo方法中的比较方式并不是自己想要的那种比较方式</p><p>Comparator接口里面有一个compare方法，方法有两个参数T o1和T o2，是泛型的表示方式，分别表示待比较的两个对象，方法返回值和Comparable接口一样是int，有三种情况：</p><p>1、o1大于o2，返回正整数</p><p>2、o1等于o2，返回0</p><p>3、o1小于o3，返回负整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DomainComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Domain&gt;<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Domain domain1, Domain domain2)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (domain1.getStr().compareTo(domain2.getStr()) &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (domain1.getStr().compareTo(domain2.getStr()) == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br> List&lt;GrabFilfox&gt; collect = grabFilfoxeList.stream().filter(a -&gt; minerid.equals(a.getMinerId())).collect(Collectors.toList());<br>            Collections.sort(collect, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;GrabFilfox&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(GrabFilfox o1, GrabFilfox o2)</span> &#123;<br>                    Long sortLong=o2.getTime().getTime()-o1.getTime().getTime();<br>                    <span class="hljs-keyword">if</span> (sortLong&gt;<span class="hljs-number">0</span>)&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sortLong&lt;<span class="hljs-number">0</span>)&#123;<br>                        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下，两种比较器Comparable和Comparator，后者相比前者有如下优点：</p><h3 id="1、如果实现类没有实现Comparable接口，又想对两个类进行比较（或者实现类实现了Comparable接口，但是对compareTo方法内的比较算法不满意），那么可以实现Comparator接口，自定义一个比较器，写比较算法"><a href="#1、如果实现类没有实现Comparable接口，又想对两个类进行比较（或者实现类实现了Comparable接口，但是对compareTo方法内的比较算法不满意），那么可以实现Comparator接口，自定义一个比较器，写比较算法" class="headerlink" title="1、如果实现类没有实现Comparable接口，又想对两个类进行比较（或者实现类实现了Comparable接口，但是对compareTo方法内的比较算法不满意），那么可以实现Comparator接口，自定义一个比较器，写比较算法"></a>1、如果实现类没有实现Comparable接口，又想对两个类进行比较（或者实现类实现了Comparable接口，但是对compareTo方法内的比较算法不满意），那么可以实现Comparator接口，自定义一个比较器，写比较算法</h3><h3 id="2、实现Comparable接口的方式比实现Comparator接口的耦合性-要强一些，如果要修改比较算法，要修改Comparable接口的实现类，而实现Comparator的类是在外部进行比较的，不需要对实现类有任何修-改。从这个角度说，其实有些不太好，尤其在我们将实现类的-class文件打成一个-jar文件提供给开发者使用的时候。实际上实现Comparator-接口的方式后面会写到就是一种典型的策略模式。"><a href="#2、实现Comparable接口的方式比实现Comparator接口的耦合性-要强一些，如果要修改比较算法，要修改Comparable接口的实现类，而实现Comparator的类是在外部进行比较的，不需要对实现类有任何修-改。从这个角度说，其实有些不太好，尤其在我们将实现类的-class文件打成一个-jar文件提供给开发者使用的时候。实际上实现Comparator-接口的方式后面会写到就是一种典型的策略模式。" class="headerlink" title="2、实现Comparable接口的方式比实现Comparator接口的耦合性 要强一些，如果要修改比较算法，要修改Comparable接口的实现类，而实现Comparator的类是在外部进行比较的，不需要对实现类有任何修 改。从这个角度说，其实有些不太好，尤其在我们将实现类的.class文件打成一个.jar文件提供给开发者使用的时候。实际上实现Comparator 接口的方式后面会写到就是一种典型的策略模式。"></a>2、实现Comparable接口的方式比实现Comparator接口的耦合性 要强一些，如果要修改比较算法，要修改Comparable接口的实现类，而实现Comparator的类是在外部进行比较的，不需要对实现类有任何修 改。从这个角度说，其实有些不太好，尤其在我们将实现类的.class文件打成一个.jar文件提供给开发者使用的时候。实际上实现Comparator 接口的方式后面会写到就是一种典型的<strong>策略模式</strong>。</h3><h3 id="3-Boolean值，返回给前端字段时，前缀不能带is，因为序列化传输的时候is会被去除掉。"><a href="#3-Boolean值，返回给前端字段时，前缀不能带is，因为序列化传输的时候is会被去除掉。" class="headerlink" title="3.Boolean值，返回给前端字段时，前缀不能带is，因为序列化传输的时候is会被去除掉。"></a><font color="red">3.Boolean值，返回给前端字段时，前缀不能带is，因为序列化传输的时候is会被去除掉。</font></h3><h1 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h1><h2 id="1-Java-Lambda-表达式"><a href="#1-Java-Lambda-表达式" class="headerlink" title="1.Java Lambda 表达式"></a>1.Java Lambda 表达式</h2><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>[^函数]: function:(x,y)===f（x,y）类似最常见的f（x）这都是函数，函数定义是，有定义域A、值域B和对应法则f（function）f（x）=x*2 这里f就是对应法则</p><p>以下是lambda表达式的重要特征:</p><ul><li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值。</li><li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号。</li><li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</li></ul><h2 id="Lambda-表达式实例"><a href="#Lambda-表达式实例" class="headerlink" title="Lambda 表达式实例"></a>Lambda 表达式实例</h2><p>Lambda 表达式的简单例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 不需要参数,返回值为 5  </span><br>() -&gt; <span class="hljs-number">5</span>  <br><span class="hljs-comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span><br>x -&gt; <span class="hljs-number">2</span> * x  <br><span class="hljs-comment">// 3. 接受2个参数(数字),并返回他们的差值  </span><br>(x, y) -&gt; x – y  <br><span class="hljs-comment">// 4. 接收2个int型整数,返回他们的和  </span><br>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) -&gt; x + y    <br><span class="hljs-comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span><br>(String s) -&gt; System.out.print(s)<br></code></pre></td></tr></table></figure><h1 id="多线程：Lambda-表达式创建线程"><a href="#多线程：Lambda-表达式创建线程" class="headerlink" title="多线程：Lambda 表达式创建线程"></a>多线程：Lambda 表达式创建线程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//新建线程1.8之前使用匿名内部类</span><br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>               System.out.println(<span class="hljs-string">&quot;开启一个新线程&quot;</span>);<br>           &#125;<br>       &#125;).start();<br>       <span class="hljs-comment">//1.8使用lambda</span><br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; System.out.println(<span class="hljs-string">&quot;lambda开启线程&quot;</span>)).start();<br></code></pre></td></tr></table></figure><h5 id="stream流中间操作，转换流：flatMap"><a href="#stream流中间操作，转换流：flatMap" class="headerlink" title="stream流中间操作，转换流：flatMap"></a>stream流中间操作，转换流：flatMap</h5><p>flatMap可以把流中的一条元素返回多个流，（自动化展开，扁平化处理。例如：就是把一个集合对象展开，返回集合中的元素，然后返回的元素被流包裹）然后把多条流串联起来。</p><p>map也是一个转换流，只不过是一对一的转换流，把流转换成流中元素函数处理后的新的流。（类似JS中map遍历，返回循环体每次对遍历元素处理后的结果，返回处理后的集合）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>     strings.add(<span class="hljs-string">&quot;1&quot;</span>);<br>     strings.add(<span class="hljs-string">&quot;2&quot;</span>);<br>     strings.add(<span class="hljs-string">&quot;3&quot;</span>);<br><br>     <span class="hljs-type">AddressVO</span> <span class="hljs-variable">addressVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressVO</span>();<br><br>     addressVO.setId(<span class="hljs-number">0L</span>);<br>     addressVO.setContent(strings);<br><br>     <span class="hljs-type">AddressVO</span> <span class="hljs-variable">addressVO2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressVO</span>();<br><br>     addressVO2.setId(<span class="hljs-number">1L</span>);<br>     addressVO2.setContent(strings);<br><br>     ArrayList&lt;AddressVO&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>     arrayList.add(addressVO);<br>     arrayList.add(addressVO2);<br><br>     List&lt;Object&gt; collect = arrayList.stream().flatMap((Function&lt;AddressVO, Stream&lt;?&gt;&gt;) addressVO1 -&gt; addressVO1.getContent().stream()).collect(Collectors.toList());<br><br>     <span class="hljs-keyword">for</span> (Object o:collect)&#123;<br><br>         System.out.println(o);<br>     &#125;<br></code></pre></td></tr></table></figure><p><img src="/file/20220815180900.png"></p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>1.设计模式：代理模式</p><p>代理对象可以察觉到它代理的实例对象的调用，在代理对象中就可以加入自己的业务代码。</p><p><strong>实现<strong><strong>AOP</strong></strong>的两种技术**</strong>(<strong><strong>方式</strong></strong>)** </p><h5 id="JDK的Proxy技术"><a href="#JDK的Proxy技术" class="headerlink" title="JDK的Proxy技术"></a>JDK的Proxy技术</h5><p>在使用Proxy代理对象的时候，对需要代理的实例对象由一些要求，目标对象必须实现了接口 </p><p>原理就是去实现目标对象实现的所有接口，创建一个它的实现类作为代理类 </p><p>接口：StudentService创建它的代理类，就创建一个StudentServiceImpl去 </p><p>实现StudentService的所有接口 </p><h5 id="CGLIB技术实现"><a href="#CGLIB技术实现" class="headerlink" title="CGLIB技术实现"></a>CGLIB技术实现</h5><p>这个API创建代理类的时候即使目标类没有实现任何接口也可以创建代理对象 </p><p>原理就是创建一个目标类的子类作为代理对象。</p><h5 id="使用注解创建"><a href="#使用注解创建" class="headerlink" title="使用注解创建"></a>使用注解创建</h5><p>步骤1：创建接口。创建接口的实现类作为目标类。</p><p>步骤2：创建切面类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>:  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>:     </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Component</span> 被Spring管理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Aspect</span> 声明他是一个aop的类（切面类）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br>    <span class="hljs-comment">/*声明一个切入点，连接点是一个方法，切入点就是被选中的方法 * 被选中的方法可能不止一个，我们定义一个方法用来代表切入点 * UserService.*:UserService中的所有方法 * 把UserService中的所以方法都配置成了切入点 * antMethod方法就作为所有切入点的代表 * */</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.aop.service.UserService.*(..))&quot;)</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">antMethod</span><span class="hljs-params">()</span>&#123;&#125; <br>    <br>    <span class="hljs-comment">/*在目标方法执行前执行*/</span> <br>    <span class="hljs-meta">@Before(&quot;anyMethod()&quot;)</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doBeforeCheck</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>); <br>    &#125;<br>    <span class="hljs-comment">/*在目标方法执行后执行*/</span> <br>    <span class="hljs-meta">@AfterReturning(&quot;anyMethod()&quot;)</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterReturning</span><span class="hljs-params">()</span>&#123; <br>        System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/*无论目标方法是否出现异常都执行 */</span> <br>    <span class="hljs-meta">@After(&quot;anyMethod()&quot;)</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfter</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;最终通知&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在切面类中创建切入点。在切入点中创建连接点。</p><p>步骤3：给切入点配置通知。</p><p>实现效果：调用目标类的方法，会给目标类的对应方法调用通知。</p><h1 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h1><p> 1.原子类<a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&chksm=ebd5d441dca25d57185e386175c0259e2c812e69b840dcaeb86365175f5e17251d04f9779071&idx=1&mid=2247494509&scene=21&sn=f2ec89e631bea4b11e6e3640b0b0e42a#wechat_redirect">相比于普通的锁</a>，粒度更细、效率更高(除了高度竞争的情况下) 。（原子操作线程安全）。<br><img src="/file/20221017154826.png"></p><p> <a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/1880992">原子操作_百度百科 (baidu.com)</a> </p><h1 id="Servlet-post接收form-data参数值java"><a href="#Servlet-post接收form-data参数值java" class="headerlink" title="Servlet post接收form-data参数值java"></a>Servlet post接收form-data参数值java</h1><p>编写接口的时候，使用“multipart/form-data”传输时，如果使用request.getParameter（）接收参数，数值会为null，可以使用下面方法接受数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 针对post请求，设置允许接收中文</span><br>        request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;添加任务&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">DiskFileItemFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DiskFileItemFactory</span>();   <br>            <span class="hljs-type">ServletFileUpload</span> <span class="hljs-variable">upload</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletFileUpload</span>(factory);   <br>            upload.setHeaderEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);  <br>            <span class="hljs-type">List</span> <span class="hljs-variable">items</span> <span class="hljs-operator">=</span> upload.parseRequest(request);  <br>            <span class="hljs-type">Map</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();   <br>            <span class="hljs-keyword">for</span>(Object object:items)&#123;  <br>                <span class="hljs-type">FileItem</span> <span class="hljs-variable">fileItem</span> <span class="hljs-operator">=</span> (FileItem) object;   <br>                <span class="hljs-keyword">if</span> (fileItem.isFormField()) &#123;   <br>                    params.put(fileItem.getFieldName(), fileItem.getString(<span class="hljs-string">&quot;utf-8&quot;</span>));<span class="hljs-comment">//如果你页面编码是utf-8的   </span><br>                &#125;  <br>            &#125;   <br>            <span class="hljs-comment">//使用params.get获取参数值</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">send_time</span> <span class="hljs-operator">=</span> (String) params.get(<span class="hljs-string">&quot;send_time&quot;</span>);<br>             。。。。。。。。<br><br>            <span class="hljs-comment">// 输出数据</span><br>            out.println(<span class="hljs-string">&quot;1&quot;</span>);   <br><br>        &#125; <span class="hljs-keyword">catch</span> (FileUploadException e1) &#123;<br>            e1.printStackTrace();<br>        &#125;   <br>        out.close();<br>    &#125;<br></code></pre></td></tr></table></figure><p>前提是需要导入commons-fileupload-1.3.jar 和 commons-io-2.5.jar 包<br>jar包下载：<br><a href="http://download.csdn.net/download/z740852294/10030503">http://download.csdn.net/download/z740852294/10030503</a></p><h1 id="线程安全的时间操作"><a href="#线程安全的时间操作" class="headerlink" title="线程安全的时间操作"></a>线程安全的时间操作</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取当前时间 （LocalDateTime（线程安全） 代替 Calendar（线程不安全））  </span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();  <br><span class="hljs-comment">//当前时间加分钟  </span><br>now = now.plusMinutes(testItems.getTestTime());  <br><span class="hljs-comment">//LocalDateTime 转 Date</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">deadline</span> <span class="hljs-operator">=</span> Date.from(now.atZone(ZoneId.systemDefault()).toInstant());<br></code></pre></td></tr></table></figure><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><p>1、不带参数的nextInt()会生成所有有效的整数（包含正数，负数，0）</p><p>2、带参的nextInt(int x)则会生成一个范围在0~x（不包含X）内的任意正整数</p><p>　　例如：int x=new Random.nextInt(100);</p><p>　　　　则x为一个0~99的任意整数</p><p>3、生成一个指定范围内的整数</p><p>1.Math.random()方法返回一个[0.0 , 1.0)的伪随机double类型的随机数</p><p>符合在[min,max]范围内的整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>    <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> min + (<span class="hljs-type">int</span>)(Math.random() * (max-min+<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>用nextInt方法生成区间范围内的随机整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Random rand=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br><span class="hljs-type">int</span> n1=rand.nextInt(<span class="hljs-number">100</span>);<span class="hljs-comment">//返回值在范围[0,100) 即[0,99]</span><br><span class="hljs-type">int</span> n2=rand.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<span class="hljs-comment">//[1,100]内的随机整数</span><br><span class="hljs-type">int</span> n3=rand.nextInt(<span class="hljs-number">80</span>)+<span class="hljs-number">10</span>;<span class="hljs-comment">//[10,89]内的随机整数</span><br><span class="hljs-type">int</span> n4=rand.nextInt(<span class="hljs-number">27</span>)+<span class="hljs-number">82</span>;<span class="hljs-comment">//[82,108]内的随机整数</span><br></code></pre></td></tr></table></figure><h1 id="java-POI-笔记"><a href="#java-POI-笔记" class="headerlink" title="java - POI 笔记"></a>java - POI 笔记</h1><p>当单元格内容是空时，可能会出现空指针的情况。</p><p>使用以下方式给单元格赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">c = row.getCell(j);  <br>  <br><span class="hljs-keyword">if</span> (c==<span class="hljs-literal">null</span>)&#123;  <br>    row.createCell(j).setCellValue(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFRichTextString</span>(<span class="hljs-string">&quot;&quot;</span>));  <br>    c = row.getCell(j);  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="java写入文件"><a href="#java写入文件" class="headerlink" title="java写入文件"></a>java写入文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/mapData.json&quot;</span>);  <br>  <br><span class="hljs-keyword">if</span>(!file.exists())&#123;  <br>    file.createNewFile();  <br>&#125;  <br>  <br><span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file.getAbsoluteFile());  <br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fileWriter);  <br>bw.write(jsonObject.toJSONString());  <br>bw.close();  <br>System.out.println(<span class="hljs-string">&quot;finish&quot;</span>);  <br>  <br></code></pre></td></tr></table></figure><h1 id="java中的包装类"><a href="#java中的包装类" class="headerlink" title="java中的包装类"></a>java中的包装类</h1>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
