<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fomalhaut🥝</title>
  
  
  <link href="https://www.fomal.cc/atom.xml" rel="self"/>
  
  <link href="https://www.fomal.cc/"/>
  <updated>2022-10-30T15:41:03.000Z</updated>
  <id>https://www.fomal.cc/</id>
  
  <author>
    <name>Fomalhaut🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客魔改教程总结(二)</title>
    <link href="https://www.fomal.cc/posts/5389e93f.html"/>
    <id>https://www.fomal.cc/posts/5389e93f.html</id>
    <published>2022-10-30T15:41:03.000Z</published>
    <updated>2022-10-30T15:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><b>魔改前必看（我当你们都懂了，太细节的就不写在教程中了🤣🤣🤣）：</b></p><ol><li>博客魔改有风险，如果博客魔改出问题了又没有备份，可通过此项目查看基础源码进行<strong>回滚</strong>：<a href="https://github.com/ccknbc-actions/blog-butterfly">ccknbc-actions/blog-butterfly</a>。</li><li>这部分魔改基本上都是大佬们造好的轮子，我按照大佬们的轮子结合自己的喜好进行魔改的，具体见我友人帐第一个栏目大佬们的网站，本处仅做一个总结，如有侵权请联系删除。</li><li>鉴于每个人的根目录名称都不一样，本帖<strong>博客根目录</strong>一律以<code>[BlogRoot]</code>指代。</li><li>本帖涉及魔改源码的内容，会使用<strong>diff代码块</strong>标识，复制时请<strong>不要忘记删除</strong>前面的<code>+、-</code>符号。</li><li>因为<code>.pug</code>和<code>.styl</code>以及<code>.yml</code>等对缩进要求较为严格，请尽量<strong>不要使用记事本等无法提供语法高亮的文本编辑器</strong>进行修改。</li><li>本帖基于<code>Butterfly主题</code>进行魔改方案编写，因此请读者优先掌握<a href="https://butterfly.js.org/">Butterfly主题官方文档</a>的内容后再来进行魔改。</li><li>魔改会过程常常引入<strong>自定义的css与js文件</strong>，方法见<a href="https://b.leonus.cn/2022/custom.html">Hexo博客添加自定义css和js文件</a>(太懒了不想自己写)</li></ol></div><h2 id="个人卡片渐变色">个人卡片渐变色</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></div></div><p>在<code>[BlogRoot]\css\custom.css</code>自定义样式的文件中引入如下代码（最后记得在<code>inject</code>配置项引入!!!）：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 侧边栏个人信息卡片动态渐变色 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    -<span class="number">45deg</span>,</span><br><span class="line">    <span class="number">#e8d8b9</span>,</span><br><span class="line">    <span class="number">#eccec5</span>,</span><br><span class="line">    <span class="number">#a3e9eb</span>,</span><br><span class="line">    <span class="number">#bdbdf0</span>,</span><br><span class="line">    <span class="number">#eec1ea</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgb</span>(<span class="number">66</span>, <span class="number">68</span>, <span class="number">68</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">400%</span> <span class="number">400%</span>;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">  -moz-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">  <span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> Gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> Gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> Gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 个人信息Follow me按钮 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &gt; <span class="selector-id">#card-info-btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3eb8be</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="顶部渐变条色加载条">顶部渐变条色加载条</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://www.chuckle.top/article/13d6481a.html">给Butterfly加上顶部加载条</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><p><img src="https://s1.vika.cn/space/2022/10/30/2a5cb2eb271f4135aae2c0e7be580164" alt="image-20221030160812710"></p></div></div><ol><li><p>新建<code>[BlogRoot]\css\progress_bar.css</code>文件，写入以下内容（或者你在<code>[BlogRoot]\css\custom.css</code>直接加也行，最后在配置文件记得引入即可）</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pace</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">pointer-events</span>: none;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">7rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eaecf2</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#e3e8f7</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace-inactive</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span> ease-in</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    -ms-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    -o-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="comment">/* linear-gradient(to right, #3494e6, #ec6ead) */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#43cea2</span>, <span class="number">#3866ca</span>);</span><br><span class="line">    <span class="attribute">animation</span>: gradient <span class="number">2s</span> ease infinite;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span><span class="selector-class">.pace-inactive</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">8px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>_config.butterfly.yml</code>的<code>inject</code>配置项加入刚刚的css样式和必须的js依赖：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xxx</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/static/css/progress_bar.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span> </span><br><span class="line">  <span class="attr">bottom:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">xxx</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;//npm.elemecdn.com/pace-js@1.2.4/pace.min.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h2 id="Bilibili视频适配">Bilibili视频适配</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><p><img src="https://s1.vika.cn/space/2022/10/30/cb5ee923f1544e369c4b91fafa4919b9" alt="image"></p></div></div><ol><li><p>在<code>[BlogRoot]\css\custom.css</code>自定义样式的文件中引入如下代码（这是我的，你可以自行微调）：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*哔哩哔哩视频适配*/</span></span><br><span class="line"><span class="selector-class">.aspect-ratio</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">75%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">3%</span> auto;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aspect-ratio</span> <span class="selector-tag">iframe</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">86%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接复制插入你的 <code>md</code> 文章就行，修改里面的 <code>aid</code> 为你视频的 <code>AV</code>号：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">center</span> <span class="attr">class</span>=<span class="string">&quot;aspect-ratio&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;iframe src=&quot;https://player.bilibili.com/player.html?aid=474023258&amp;&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0&quot; </span></span><br><span class="line"><span class="code">    scrolling=&quot;no&quot; </span></span><br><span class="line"><span class="code">    border=&quot;0&quot; </span></span><br><span class="line"><span class="code">    frameborder=&quot;no&quot; </span></span><br><span class="line"><span class="code">    framespacing=&quot;0&quot; </span></span><br><span class="line"><span class="code">    high_quality=1</span></span><br><span class="line"><span class="code">    danmaku=1 </span></span><br><span class="line"><span class="code">    allowfullscreen=&quot;true&quot;&gt; </span></span><br><span class="line"><span class="code">    &lt;/iframe&gt;</span></span><br><span class="line"><span class="code">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h2 id="文章页局部-html-代码不渲染">文章页局部 html 代码不渲染</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>在你的 md 文章页中，部分内容不想经过 Hexo 渲染，则包一层 <code>raw</code> 标签：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span>你的一些代码...<span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span>你的一些代码...<span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p>那么标签内的代码就不会被框架渲染了~</p>              </div>            </details><h2 id="文章H1-H6标题小风车转动效果">文章H1~H6标题小风车转动效果</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><div class="video"><video controls preload><source src='https://anzhiy.cn/video/风车样式效果预览.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><ol><li><p>修改主题配置文件<code>_config.butterfly.yml</code>文件的<code>beautify</code>配置项：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># site/post</span></span><br><span class="line">  <span class="comment"># title-prefix-icon: &#x27;\f0c1&#x27; 原内容</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="string">&#x27;\f863&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="string">&quot;#F47466&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>[BlogRoot]\css\custom.css</code> 中加入以下代码，可以自己调节一下转速:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 文章页H1-H6图标样式效果 */</span></span><br><span class="line"><span class="comment">/* 控制风车转动速度 4s那里可以自己调节快慢 */</span></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: ccc <span class="number">4s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: ccc <span class="number">4s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> ccc &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> ccc &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置风车颜色 */</span></span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h1</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ef50a8</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.55rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.23rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h2</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fb7061</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.35rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.12rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h3</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffbf00</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.22rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.95rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.09rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h4</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a9e000</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.05rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.09rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h5</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#57c850</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.7rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h6</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5ec1e0</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.66rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* s设置风车hover动效 6s那里可以自己调节快慢*/</span></span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--theme-color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--theme-color);</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: ccc <span class="number">6s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: ccc <span class="number">6s</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>_config.butterfly.yml</code>的<code>inject</code>配置项进行引入（不再赘述）。</p></li></ol>              </div>            </details><h2 id="右边的小猫咪-tzy大佬的">右边的小猫咪(tzy大佬的)</h2><h2 id="文章统计-Eurkon">文章统计(Eurkon)</h2><h2 id="百度API访客统计-Eurkon">百度API访客统计(Eurkon)</h2><h2 id="自定义域名邮箱">自定义域名邮箱</h2><h2 id="地图插件-Guo-Le’s-Blog">地图插件(Guo Le’s Blog)</h2><h2 id="自定义字体与css">自定义字体与css</h2><h2 id="abbrlink映射链接">abbrlink映射链接</h2><h2 id="页面样式微调">页面样式微调</h2><h2 id="代码框样式微调">代码框样式微调</h2><h2 id="评论系统部署与魔改">评论系统部署与魔改</h2><h2 id="PDF插件">PDF插件</h2><h2 id="夜间模式动画-店长">夜间模式动画(店长)</h2><h2 id="加载动画-HEO">加载动画(HEO)</h2><h2 id="文章加密插件">文章加密插件</h2><h2 id="禁用f12">禁用f12</h2><h2 id="自定义右键菜单">自定义右键菜单</h2><h2 id="魔改svg图标-店长">魔改svg图标(店长)</h2><h2 id="友链样式魔改">友链样式魔改</h2><h2 id="综合美化模块-基于winbox">综合美化模块(基于winbox)</h2><h2 id="博客宽屏适配">博客宽屏适配</h2><h2 id="导航栏魔改">导航栏魔改</h2><h2 id="夜间模式星空背景">夜间模式星空背景</h2><h2 id="背景樱花特效">背景樱花特效</h2><h2 id="github仓库配合Vercel做一个图床">github仓库配合Vercel做一个图床</h2><h2 id="侧边栏微博热搜插件">侧边栏微博热搜插件</h2><h2 id="夜间模式与白天模式两个背景">夜间模式与白天模式两个背景</h2><h2 id="鼠标样式魔改-LYXの小破站">鼠标样式魔改(LYXの小破站)</h2><h2 id="🍕🍕🍕大家有啥教程想看的可以在评论区留言，如果搭建过程中遇到不懂的可以加群咨询，进群密码：唐志远。">🍕🍕🍕大家有啥教程想看的可以在评论区留言，如果搭建过程中遇到不懂的可以加群咨询，进群密码：唐志远。</h2><img src="https://s1.vika.cn/space/2022/11/04/0bd8a1a7e8f64d6a8248d1d872c5a178" alt="二维码" style="zoom:50%;" />]]></content>
    
    
    <summary type="html">博客魔改教程总结(二)</summary>
    
    
    
    <category term="魔改教程" scheme="https://www.fomal.cc/categories/%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://www.fomal.cc/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://www.fomal.cc/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建基础教程(三)</title>
    <link href="https://www.fomal.cc/posts/3451f874.html"/>
    <id>https://www.fomal.cc/posts/3451f874.html</id>
    <published>2022-10-28T13:00:00.000Z</published>
    <updated>2022-10-28T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p>参考：<a href="https://tzy1997.com/articles/hexo1605/">基于 Hexo 从零开始搭建个人博客（五）</a>、<a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 安装文档(三) 主题配置-1</a>、<a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安装文档(四) 主题配置-2</a><br>阅读本篇前，请先阅读前面的文章：<a href="https://www.fomal.cc/posts/e593433d.html">Hexo 博客搭建基础教程 (一)</a>、<a href="https://www.fomal.cc/posts/4aa2d85f.html">Hexo 博客搭建基础教程 (二)</a><br>视频教程会同步至在我的B站账号<a href="https://space.bilibili.com/220757832">Fomalhaut1998a</a><br>注意：我的博客根目录路径为 【C:/Hexo-Blog/blog-demo】，下文所说的根目录都是此路径，将用[BlogRoot]代替。<br>修改站点配置文件<code>_config.yml</code>，路径为<code>[BlogRoot]\_config.yml</code><br>修改主题配置文件<code>_config.butterfly.yml</code>，路径为<code>[BlogRoot]\_config.butterfly.yml</code></p></div><h2 id="1-前言-3">1.前言</h2><ol><li>博客搭建过程遇到任何问题，优先在本页面搜索，检查是否已经有该配置教程。</li><li>遇到问题可以优先在文章评论区留言，注意留言时请填写正确的邮箱以确保能收到站长的回复。</li><li>实在解决不了的问题可添加站长的微信进行交流，备注自己的个人信息。</li></ol><h2 id="2-语言">2.语言</h2><p>修改站点配置文件<code>_config.yml</code>，默认语言是 en 。<br>主题支持三种语言：</p><ul><li>default(en)</li><li>zh-CN (简体中文)</li><li>zh-TW (繁体中文)</li></ul><h2 id="3-网站资料">3.网站资料</h2><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改站点配置文件<code>_config.yml</code>。部分参数如下，详细参数可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">title</td><td style="text-align:center">网站标题</td></tr><tr><td style="text-align:center">subtitle</td><td style="text-align:center">描述</td></tr><tr><td style="text-align:center">description</td><td style="text-align:center">网站描述</td></tr><tr><td style="text-align:center">keywords</td><td style="text-align:center">网站的关键词。支持多个关键词</td></tr><tr><td style="text-align:center">author</td><td style="text-align:center">您的名字</td></tr><tr><td style="text-align:center">language</td><td style="text-align:center">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td></tr><tr><td style="text-align:center">timezone</td><td style="text-align:center">网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai</td></tr></tbody></table><h2 id="4-导航菜单">4.导航菜单</h2><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">List||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><ul><li><p>必须是 <code>/xxx/</code>，后面<code>||</code>分开，然后写图标名，如果不想显示图标，图标名可不写</p></li><li><p>若主题版本大于 v4.0.0，可以直接在子目录里添加 hide 隐藏子目录，如下面的List</p></li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">List||fas</span> <span class="string">fa-list||hide:</span></span><br><span class="line">   <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><ul><li>文字可自行更改，中英文都可以</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">清单||fa</span> <span class="attr">fa-heartbeat:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">照片:</span> <span class="string">/Gallery/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">    <span class="string">电影:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>最终效果如下图所示：</p><p><img src="https://s1.vika.cn/space/2022/10/29/08530571ff2f44c3b7419bfdbf66f8c6" alt="image-20221029173243861"></p><h2 id="5-代码">5.代码</h2><h3 id="5-1-代码高亮主题">5.1 代码高亮主题</h3><p>Butterfly支持 6 种代码高亮样式：</p><ul><li>darker</li><li>pale night</li><li>light</li><li>ocean</li><li>mac</li><li>mac light</li></ul><p>修改主题配置文件<code>_config.butterfly.yml</code>。中的<code>highlight_theme</code>属性。</p><div class="tabs" id="代码高亮主题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#代码高亮主题-1">darker</button></li><li class="tab"><button type="button" data-href="#代码高亮主题-2">pale night</button></li><li class="tab"><button type="button" data-href="#代码高亮主题-3">light</button></li><li class="tab"><button type="button" data-href="#代码高亮主题-4">ocean</button></li><li class="tab"><button type="button" data-href="#代码高亮主题-5">mac</button></li><li class="tab"><button type="button" data-href="#代码高亮主题-6">mac light</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="代码高亮主题-1"><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">darker</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/05/31/62962018a84e7.webp" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码高亮主题-2"><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">pale</span> <span class="string">night</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/05/31/62961859b9e8c.webp" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码高亮主题-3"><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/05/31/629617b3de088.webp" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码高亮主题-4"><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">ocean</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/05/31/6296188b7c513.webp" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码高亮主题-5"><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/05/31/629618f4b4847.webp" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码高亮主题-6"><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/05/31/629618cb37ff7.webp" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="5-2-代码复制">5.2 代码复制</h3><p>修改主题配置文件<code>_config.butterfly.yml</code>中的<code>highlight_copy</code>属性，<code>true</code>表示可以复制。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2022/10/29/af884592171e423c9be632b82932d9d1" alt="image-20221029173420960"></p><h3 id="5-3-代码框展开-关闭">5.3 代码框展开/关闭</h3><p>修改主题配置文件<code>_config.butterfly.yml</code>。中的<code>highlight_shrink</code>属性。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代码框不展开，需点击 &#x27;&gt;&#x27; 打开</span></span><br></pre></td></tr></table></figure><p>在默认情况下，代码框自动展开，可设置是否所有代码框都关闭状态，点击&gt;可展开代码。</p><ul><li>true 全部代码框不展开，需点击&gt;打开</li><li>false 代码框展开，有&gt;点击按钮</li><li>none 不显示&gt;按钮</li></ul><p><img src="https://s1.vika.cn/space/2022/10/29/fd17fb642e08403bae6554df4ae714f0" alt="image-20221029173458309"></p><h3 id="5-4-代码换行">5.4 代码换行</h3><p>在默认情况下，Hexo 在编译的时候不会实现代码自动换行。如果你不希望在代码块的区域里有横向滚动条的话，那么你可以考虑开启这个功能。</p><p>修改主题配置文件<code>_config.butterfly.yml</code>。中的<code>code_word_wrap</code>属性。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="5-5-代码高度限制">5.5 代码高度限制</h3><p>可配置代码高度限制，超出的部分会隐藏，并显示展开按钮。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_height_limit:</span> <span class="literal">false</span> <span class="comment"># unit: px</span></span><br></pre></td></tr></table></figure><ol><li>单位是<code>px</code>，直接添加数字，如 200</li><li>实际限制高度为<code>highlight_height_limit + 30 px</code> ，多增加 30px 限制，目的是避免代码高度只超出highlight_height_limit 一点时，出现展开按钮，展开没内容。</li><li>不适用于隐藏后的代码块（ css 设置 <code>display: none</code>）。</li></ol><img src="https://s1.vika.cn/space/2022/10/29/86c397c8ec81428dadfb059b92716334" alt="image-20221029173522172" style="zoom:50%;" /><h2 id="6-社交图标">6.社交图标</h2><p><code>Butterfly</code>支持<a href="https://fontawesome.com/icons?from=io">font-awesome v6</a>图标。</p><p>书写格式：<code>图标名：url || 描述性文字</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/xxxxx</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:xxxxxx@gmail.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2022/10/29/97e3e8b88a6b4c75b6d042a6aa481ab2" alt="image-20221029173631192"></p><h2 id="7-顶部图">7.顶部图</h2><p>如果不要显示顶部图，可直接配置 <code>disable_top_img: true</code>。</p><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>index_img</td><td>主页的 top_img</td></tr><tr><td>default_top_img</td><td>默认的 top_img，当页面的 top_img 没有配置时，会显示 default_top_img</td></tr><tr><td>archive_img</td><td>归档页面的 top_img</td></tr><tr><td>tag_img</td><td>tag子页面 的 默认 top_img</td></tr><tr><td>tag_per_img</td><td>tag子页面的 top_img，可配置每个 tag 的 top_img</td></tr><tr><td>category_img</td><td>category 子页面 的 默认 top_img</td></tr><tr><td>category_per_img</td><td>category 子页面的 top_img，可配置每个 category 的 top_img</td></tr></tbody></table><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_img:</span> <span class="string">xxx.png</span></span><br></pre></td></tr></table></figure><p>其它页面 （tags/categories/自建页面）和文章页的<code>top_img</code>，请到对应的 md 页面设置<code>front-matter</code>中的<code>top_img</code>。</p><h2 id="8-文章置顶与封面">8.文章置顶与封面</h2><ol><li><p>你可以直接在文章的<code>front-matter</code>区域里添加<code>sticky: 1</code>属性来把这篇文章置顶。数值越大，置顶的优先级越大。</p></li><li><p>文章的markdown文档上，在<code>Front-matter</code>添加<code>cover</code>，并填上要显示的图片地址。如果不配置<code>cover</code>，可以设置显示默认的<code>cover</code>；如果不想在首页显示cover，可以设置为<code>false</code>。<br>修改主题配置文件<code>_config.butterfly.yml</code>。</p> <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="attr">default_cover:</span> </span><br></pre></td></tr></table></figure><p>当配置多张图片时，会随机选择一张作为cover，此时写法应为：</p> <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_cover:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg2.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg3.png</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://s1.vika.cn/space/2022/10/29/e9c6f655967b483690c4b8f8fd24b904" alt="image-20221029173703144"></p><h2 id="9-文章页相关配置">9.文章页相关配置</h2><h3 id="9-1-文章meta显示">9.1 文章meta显示</h3><p><code>post_meta</code>这个属性用于显示文章的相关信息的，修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主页文章日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章页日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br></pre></td></tr></table></figure><h3 id="9-2-文章版权和协议许可">9.2 文章版权和协议许可</h3><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">author_href:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure><p>由于<code>Hexo 4.1</code>开始，默认对网址进行解码，以至于如果是中文网址，会被解码，可设置<code>decode: true</code>来显示中文网址。如果有文章（例如：转载文章）不需要显示版权，可以在文章页<code>Front-matter</code>中单独设置。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">copyright:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>从<code>v3.0.0</code>开始，支持对单独文章设置版权信息，可以在文章Front-matter单独设置。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">post<span class="emphasis">_copyright:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author: xxxx</span><br><span class="line">copyright<span class="emphasis">_author_</span>href: https://xxxxxx.com</span><br><span class="line">copyright<span class="emphasis">_url: https://xxxxxx.com</span></span><br><span class="line"><span class="emphasis">copyright_</span>info: 此文章版权归xxxxx所有，如有转载，请註明来自原作者</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2022/10/29/39720529b18d48258f6f575d9694b009" alt="image-20221029173741784"></p><h3 id="9-3-文章打赏">9.3 文章打赏</h3><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">wechat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">alipay</span></span><br></pre></td></tr></table></figure><h3 id="9-4-文章目录TOC">9.4 文章目录TOC</h3><p>修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span> <span class="comment"># 文章页是否显示 TOC</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">false</span> <span class="comment"># 普通页面是否显示 TOC</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span> <span class="comment"># 是否显示章节数</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span><span class="comment"># 是否展开 TOC</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># for post 简洁模式（侧边栏只显示 TOC, 只对文章页有效 ）</span></span><br></pre></td></tr></table></figure><img src="https://s1.vika.cn/space/2022/10/29/b40a3447a5d043a5bf8623ecb2fe128a" alt="image-20221029173812311" style="zoom:50%;" /><h3 id="9-5-相关文章推荐">9.5 相关文章推荐</h3><p>相关文章推荐的原理是根据文章tags的比重来推荐，修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># 显示推荐文章数目</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># or created or updated 文章日期显示创建日或者更新日</span></span><br></pre></td></tr></table></figure><h3 id="9-6-文章锚点">9.6 文章锚点</h3><p>开启文章锚点后，当你在文章页进行滚动时，文章链接会根据标题ID进行替换。</p><p>注意: 每替换一次，会留下一个歷史记录。所以如果一篇文章有很多锚点的话，网页的歷史记录会很多。</p><p>修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># anchor</span></span><br><span class="line"><span class="comment"># when you scroll in post , the url will update according to header id.</span></span><br><span class="line"><span class="attr">anchor:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="9-7-文章过期提醒">9.7 文章过期提醒</h3><p>可设置是否显示文章过期提醒，以更新时间为基准。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Displays outdated notice for a post (文章过期提醒)</span></span><br><span class="line"><span class="attr">noticeOutdate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span> <span class="comment"># style: simple/flat</span></span><br><span class="line">  <span class="attr">limit_day:</span> <span class="number">365</span> <span class="comment"># 距离更新时间多少天才显示文章过期提醒</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span> <span class="comment"># position: top/bottom</span></span><br><span class="line">  <span class="attr">message_prev:</span> <span class="string">It</span> <span class="string">has</span> <span class="string">been</span> <span class="comment"># 天数之前的文字</span></span><br><span class="line">  <span class="attr">message_next:</span> <span class="string">days</span> <span class="string">since</span> <span class="string">the</span> <span class="string">last</span> <span class="string">update,</span> <span class="string">the</span> <span class="string">content</span> <span class="string">of</span> <span class="string">the</span> <span class="string">article</span> <span class="string">may</span> <span class="string">be</span> <span class="string">outdated.</span> <span class="comment"># 天数之后的文字</span></span><br></pre></td></tr></table></figure><h3 id="9-8-文章分页按钮">9.8 文章分页按钮</h3><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># post_pagination (分页)</span></span><br><span class="line"><span class="comment"># value: 1 || 2 || false# false:为关闭分页按钮；1:下一篇显示的是旧文章；2:下一篇显示的是新文章</span></span><br><span class="line"><span class="comment"># 1: The &#x27;next post&#x27; will link to old post</span></span><br><span class="line"><span class="comment"># 2: The &#x27;next post&#x27; will link to new post</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><img src="https://s1.vika.cn/space/2022/10/29/7e0ca16646c4487895c7f1f792d87f92" alt="image-20221029173929409" style="zoom:50%;" /><h2 id="10-头像">10.头像</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/assets/head.jpg</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span> <span class="comment"># true则会一直转圈</span></span><br></pre></td></tr></table></figure><img src="https://s1.vika.cn/space/2022/10/28/0904865b6c0c4e1080078bc34b836082" alt="image-20221028141401289" style="zoom:50%;" /><h2 id="11-文章内容复制相关配置">11.文章内容复制相关配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># copy settings</span></span><br><span class="line"><span class="comment"># copyright: Add the copyright information after copied content (复制的内容后面加上版权信息)</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span><span class="comment"># 是否开启网站复制权限</span></span><br><span class="line">  <span class="attr">copyright:</span><span class="comment"># 复制的内容后面加上版权信息</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span><span class="comment"># 是否开启复制版权信息添加</span></span><br><span class="line">    <span class="attr">limit_count:</span> <span class="number">50</span><span class="comment"># 字数限制，当复制文字大于这个字数限制时，将在复制的内容后面加上版权信息</span></span><br></pre></td></tr></table></figure><h2 id="12-Footer-设置">12.Footer 设置</h2><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2022</span><span class="comment"># 站点起始时间</span></span><br><span class="line">  <span class="attr">custom_text:</span><span class="comment"># 是一个给你用来在页脚自定义文本的选项。通常你可以在这里写声明文本等,支持 HTML。</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">false</span> <span class="comment"># Copyright of theme and framework</span></span><br></pre></td></tr></table></figure><p>可以参考tzy大佬的的<code>custom_text</code>填写示例：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_text:</span> <span class="string">I</span> <span class="string">wish</span> <span class="string">you</span> <span class="string">to</span> <span class="string">become</span> <span class="string">your</span> <span class="string">own</span> <span class="string">sun,</span> <span class="literal">no</span> <span class="string">need</span> <span class="string">to</span> <span class="string">rely</span> <span class="string">on</span> <span class="string">who&#x27;s</span> <span class="string">light.&lt;p&gt;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://hexo.io/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo&quot;</span> <span class="string">title=&quot;博客框架为Hexo&quot;&gt;&lt;/a&gt;&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://butterfly.js.org/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender&quot;</span> <span class="string">title=&quot;主题采用butterfly&quot;&gt;&lt;/a&gt;&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://www.jsdelivr.com/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr&quot;</span> <span class="string">title=&quot;本站使用JsDelivr为静态资源提供CDN加速&quot;&gt;&lt;/a&gt;</span> <span class="string">&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://vercel.com/</span> <span class="string">&quot;&gt;&lt;img src=&quot;</span><span class="string">https://img.shields.io/badge/Hosted-Vervel-brightgreen?style=flat&amp;logo=Vercel&quot;</span> <span class="string">title=&quot;本站采用双线部署，默认线路托管于Vercel&quot;&gt;&lt;/a&gt;&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://vercel.com/</span> <span class="string">&quot;&gt;&lt;img src=&quot;</span><span class="string">https://img.shields.io/badge/Hosted-Coding-0cedbe?style=flat&amp;logo=Codio&quot;</span> <span class="string">title=&quot;本站采用双线部署，联通线路托管于Coding&quot;&gt;&lt;/a&gt;&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://github.com/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub&quot;</span> <span class="string">title=&quot;本站项目由Gtihub托管&quot;&gt;&lt;/a&gt;&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris&quot;</span> <span class="string">title=&quot;本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可&quot;&gt;&lt;/a&gt;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/06/01/6296491902973.jpg" alt=""></p><p>对于部分人需要写 ICP 的，也可以写在custom_text里。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_text:</span> <span class="string">&lt;a</span> <span class="string">href=&quot;icp链接&quot;&gt;&lt;img</span> <span class="string">class=&quot;icp-icon&quot;</span> <span class="string">src=&quot;icp图片&quot;&gt;&lt;span&gt;备案号：xxxxxx&lt;/span&gt;&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="13-右下角按钮">13.右下角按钮</h2><h3 id="13-1-简繁转换">13.1 简繁转换</h3><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 默认按钮显示文字(网站是简体，应设置为&#x27;default: 繁&#x27;)</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">繁</span></span><br><span class="line">  <span class="comment"># the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span></span><br><span class="line">  <span class="comment"># 网站默认语言，1: 繁体中文, 2: 简体中文</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay 延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 当文字是简体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># 当文字是繁体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;簡&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="13-2-夜间模式">13.2 夜间模式</h3><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># dark 和 light 两种模式切换按钮</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Switch dark/light mode automatically (自動切換 dark mode和 light mode)</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 1  Following System Settings, if the system doesn&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>v2.0.0 开始增加一个选项，可开启自动切换light mode 和 dark mode。</p><ul><li><code>autoChangeMode: 1</code> 跟随系统而变化，不支持的浏览器/系统将按照时间晚上6点到早上6点之间切换为 dark mode。</li><li><code>autoChangeMode: 2</code>只按照时间 晚上6点到早上6点之间切换为 dark mode,其余时间为light mode。</li><li><code>autoChangeMode: false</code> 取消自动切换。</li></ul><h3 id="13-3-阅读模式">13.3 阅读模式</h3><p>阅读模式下会去掉除文章外的内容，避免干扰阅读。只会出现在文章页面，右下角会有阅读模式按钮。</p><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="14-侧边栏设置">14.侧边栏设置</h2><h3 id="14-1-排版">14.1 排版</h3><p>可自行决定哪个项目需要显示，可决定位置，也可以设置不显示侧边栏。</p><p>修改主题配置文件<code>_config.butterfly.yml</code>，下面是本人博客的配置项可以参考</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="comment"># fab fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">🛴前往小家...</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/fomalhaut1998</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">&lt;center&gt;主域名：&lt;br&gt;&lt;a</span> <span class="string">href=&quot;https://www.fomal.cc&quot;&gt;&lt;b&gt;&lt;font</span> <span class="string">color=&quot;#5ea6e5&quot;&gt;fomal.cc&lt;/font&gt;&lt;/b&gt;&lt;/a&gt;&amp;nbsp;|&amp;nbsp;&lt;a</span> <span class="string">href=&quot;https://www.fomal.cn&quot;&gt;&lt;b&gt;&lt;font</span> <span class="string">color=&quot;#5ea6e5&quot;&gt;fomal.cn&lt;/font&gt;&lt;/b&gt;&lt;/a&gt;&lt;br&gt;备用域名：&lt;br&gt;&lt;a</span> <span class="string">href=&quot;https://blog.fomal.cc&quot;&gt;&lt;b&gt;&lt;font</span> <span class="string">color=&quot;#5ea6e5&quot;&gt;blog.fomal.cc&lt;/font&gt;&lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;a</span> <span class="string">href=&quot;https://aa.fomal.cc&quot;&gt;&lt;b&gt;&lt;font</span> <span class="string">color=&quot;#5ea6e5&quot;&gt;aa.fomal.cc&lt;/font&gt;&lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;a</span> <span class="string">href=&quot;https://bb.fomal.cc&quot;&gt;&lt;b&gt;&lt;font</span> <span class="string">color=&quot;#5ea6e5&quot;&gt;bb.fomal.cc&lt;/font&gt;&lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;a</span> <span class="string">href=&quot;mailto:admin@fomal.cn&quot;&gt;📬：&lt;b&gt;&lt;font</span> <span class="string">color=&quot;#a591e0&quot;&gt;admin@fomal.cn&lt;/font&gt;&lt;/b&gt;&lt;/a&gt;&lt;/center&gt;</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">3</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_weibo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="14-2-访问人数-UV-和-PV">14.2 访问人数(UV 和 PV)</h3><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span>  <span class="comment"># 本站总访客数</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span>  <span class="comment"># 本站总访问量 </span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span>  <span class="comment"># 本文总阅读量</span></span><br></pre></td></tr></table></figure><h3 id="14-3-运行时间">14.3 运行时间</h3><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Time difference between publish date and now (網頁運行時間)</span></span><br><span class="line"><span class="comment"># Formal: Month/Day/Year Time or Year/Month/Day Time</span></span><br><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">8</span><span class="string">/9/2022</span> <span class="number">00</span><span class="string">:00:00</span></span><br><span class="line">  <span class="comment">##网页开通时间</span></span><br><span class="line">  <span class="comment">#格式: 月/日/年 时间</span></span><br><span class="line">  <span class="comment">#也可以写成 年/月/日 时间</span></span><br></pre></td></tr></table></figure><h3 id="14-4-最新评论">14.4 最新评论</h3><p><code>v3.1.0</code> 以上支持。如果未配置任何评论，前先不要开启该功能。<br>最新评论只会在刷新时才会去读取，并不会实时变化。<br>由于 API 有 访问次数限制，为了避免调用太多，主题默认存取期限为 10 分鐘。也就是説，调用后资料会存在 <code>localStorage</code> 里，10分鐘内刷新网站只会去 <code>localStorage</code> 读取资料。 10 分鐘期限一过，刷新页面时才会去调取 API 读取新的数据。（3.6.0 新增了 storage 配置，可自行配置缓存时间）。</p><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Aside widget - Newest Comments</span></span><br><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span>  <span class="comment"># 显示的数量</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="number">10</span> <span class="comment"># 设置缓存时间，单位 分钟 </span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="literal">true</span> <span class="comment"># 是否显示头像</span></span><br></pre></td></tr></table></figure><h2 id="15-网站背景">15.网站背景</h2><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图片格式 url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="comment"># 颜色（HEX值/RGB值/颜色单词/渐变色)</span></span><br><span class="line"><span class="comment"># 留空 不显示背景</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">url(https://source.fomal.cc/img/dm1.webp)</span></span><br></pre></td></tr></table></figure><p>如果你的网站根目录不是<code>'/'</code>，使用本地图片时，需加上你的根目录。<br>例如：网站是 <code>https://yoursite.com/blog</code>，引用一张<code>img/xx.png</code>图片，则设置<code>background</code>为 <code>url(/blog/img/xx.png)</code></p><h2 id="16-打字效果">16.打字效果</h2><p>详见：<a href="https://github.com/disjukr/activate-power-mode">activate-power-mode</a></p><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line"><span class="comment"># https://github.com/disjukr/activate-power-mode</span></span><br><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span> <span class="comment"># open particle animation (冒光特效)</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span> <span class="comment">#  open shake (抖動特效)</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-type-animation.gif" alt=""></p><h2 id="17-footer-背景">17.footer 背景</h2><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># footer是否显示图片背景(与top_img一致)</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><code>留空/false</code>：显示默认的颜色</li><li><code>图片链接</code>：显示所配置的图片</li><li><code>颜色包括HEX值 - #0000FF | RGB值 - rgb(0,0,255) | 颜色单词 - orange | 渐变色 - linear-gradient( 135deg, #E2B0FF 10%, #9F44D3 100%)</code>：对应的颜色</li><li><code>true</code>：显示跟 top_img 一样</li></ul><h2 id="18-背景特效">18.背景特效</h2><div class="tabs" id="背景特效"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#背景特效-1">静止彩带</button></li><li class="tab"><button type="button" data-href="#背景特效-2">动态彩带</button></li><li class="tab"><button type="button" data-href="#背景特效-3">canvas_nest</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="背景特效-1"><p>可设置每次刷新更换彩带，或者每次点击更换彩带。详细配置可查看<a href="https://github.com/hustcc/ribbon.js">canvas_ribbon</a></p><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">150</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">click_to_change:</span> <span class="literal">false</span>  <span class="comment">#設置是否每次點擊都更換彩带</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment"># false 手機端不顯示 true 手機端顯示</span></span><br></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-docs-canvas-ribbon.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="背景特效-2"><p>好看的彩带背景，会飘动。<br>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_fluttering_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># false 手机端不显示 true 手机端显示</span></span><br></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-canvas-ribbon-piao.gif" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="背景特效-3"><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,255&#x27;</span> <span class="comment">#color of lines, default: &#x27;0,0,0&#x27;; RGB values: (R,G,B).(<span class="doctag">note:</span> use &#x27;,&#x27; to separate.)</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.7</span> <span class="comment"># the opacity of line (0~1), default: 0.5.</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background, default: -1.</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># the number of lines, default: 99.</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment"># false 手機端不顯示 true 手機端顯示</span></span><br></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-canvas_nest.gif" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="19-鼠标点击效果">19.鼠标点击效果</h2><div class="tabs" id="鼠标点击效果"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#鼠标点击效果-1">烟花</button></li><li class="tab"><button type="button" data-href="#鼠标点击效果-2">爱心</button></li><li class="tab"><button type="button" data-href="#鼠标点击效果-3">文字</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="鼠标点击效果-1"><p><code>zIndex</code>建议只在<code>-1</code>和<code>9999</code>上选。<br><code>-1 </code>代表烟火效果在底部。<br><code>9999 </code>代表烟火效果在前面。</p><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span> <span class="comment"># -1 or 9999</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-firewall.gif" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="鼠标点击效果-2"><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点击出現爱心</span></span><br><span class="line"><span class="attr">click_heart:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/click_love.gif" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="鼠标点击效果-3"><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点击出现文字，文字可自行修改</span></span><br><span class="line"><span class="attr">ClickShowText:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">I</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LOVE</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">YOU</span></span><br><span class="line">  <span class="attr">fontSize:</span> <span class="string">15px</span></span><br><span class="line">  <span class="attr">random:</span> <span class="literal">false</span> <span class="comment"># 文字随机显示</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/click_word.gif" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="20-自定义字体和字体大小">20.自定义字体和字体大小</h2><h3 id="20-1-全局字体">20.1 全局字体</h3><p>修改主题配置文件<code>_config.butterfly.yml</code>中的<code>font-family</code>属性即可，如不需要配置，请留空。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Global font settings</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要不要修改)</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span> <span class="string">&#x27;15px&#x27;</span></span><br><span class="line">  <span class="attr">code-font-size:</span> <span class="string">&#x27;14px&#x27;</span></span><br><span class="line">  <span class="comment"># -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot; , &quot;Helvetica Neue&quot; , Lato, Roboto, &quot;PingFang SC&quot; , &quot;Microsoft JhengHei&quot; , &quot;Microsoft YaHei&quot; , sans-serif</span></span><br><span class="line">  <span class="comment"># Wenkai, consolas, -apple-system, &#x27;Quicksand&#x27;, &#x27;Nimbus Roman No9 L&#x27;, &#x27;PingFang SC&#x27;, &#x27;Hiragino Sans GB&#x27;, &#x27;Noto Serif SC&#x27;, &#x27;Microsoft Yahei&#x27;, &#x27;WenQuanYi Micro Hei&#x27;, &#x27;ST Heiti&#x27;, sans-serif;</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">var(--global-font),</span> <span class="string">Consolas_1,</span> <span class="string">-apple-system,</span> <span class="string">&#x27;Quicksand&#x27;</span><span class="string">,</span> <span class="string">&#x27;Nimbus Roman No9 L&#x27;</span><span class="string">,</span> <span class="string">&#x27;PingFang SC&#x27;</span><span class="string">,</span> <span class="string">&#x27;Hiragino Sans GB&#x27;</span><span class="string">,</span> <span class="string">&#x27;Noto Serif SC&#x27;</span><span class="string">,</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span><span class="string">,</span> <span class="string">&#x27;WenQuanYi Micro Hei&#x27;</span><span class="string">,</span> <span class="string">&#x27;ST Heiti&#x27;</span><span class="string">,</span> <span class="string">sans-serif;</span></span><br><span class="line">  <span class="comment"># consolas, ZhuZiAWan_light, &quot;Microsoft YaHei&quot;, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft JhengHei&quot;, sans-serif</span></span><br><span class="line">  <span class="comment"># Consolas_1, ZhuZiAWan_light, &quot;Microsoft YaHei&quot;, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft JhengHei&quot;, sans-serif</span></span><br><span class="line">  <span class="attr">code-font-family:</span> <span class="string">Consolas_1,</span> <span class="string">var(--global-font),</span> <span class="string">&quot;Microsoft YaHei&quot;</span><span class="string">,</span> <span class="string">Menlo,</span> <span class="string">&quot;PingFang SC&quot;</span><span class="string">,</span> <span class="string">&quot;Microsoft JhengHei&quot;</span><span class="string">,</span> <span class="string">sans-serif</span></span><br></pre></td></tr></table></figure><h3 id="20-2-Blog-标题字体">20.2 Blog 标题字体</h3><p>修改主题配置文件<code>_config.butterfly.yml</code>中的<code>blog_title_font</code>属性即可，如不需要配置，请留空。<br>如不需要使用网络字体，只需要把font_link留空就行。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Font settings for the site title and site subtitle</span></span><br><span class="line"><span class="comment"># https://fonts.googleapis.com/css?family=Titillium+Web&amp;display=swap</span></span><br><span class="line"><span class="comment"># Titillium Web, &#x27;PingFang SC&#x27; , &#x27;Hiragino Sans GB&#x27; , &#x27;Microsoft JhengHei&#x27; , &#x27;Microsoft YaHei&#x27; , sans-serif</span></span><br><span class="line"><span class="comment"># 左上角網站名字 主頁居中網站名字</span></span><br><span class="line"><span class="attr">blog_title_font:</span></span><br><span class="line">  <span class="attr">font_link:</span> </span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">var(--global-font)</span></span><br></pre></td></tr></table></figure><h2 id="21-网站副标题">21.网站副标题</h2><p>可设置主页中显示的网站副标题或者喜欢的座右铭。</p><p>修改主题配置文件<code>_config.butterfly.yml</code>中的<code>subtitle</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the subtitle on homepage (主頁subtitle)</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source 調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;Welcome to Fomalhaut🥝のTiny Home!🤣🤣🤣&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;Hope you have a nice day!🍭🍭🍭&quot;</span></span><br></pre></td></tr></table></figure><p>预览效果见本站主页：<a href="https://www.fomal.cc">Fomalhaut🥝</a></p><h2 id="22-页面加载动画preloader">22.页面加载动画preloader</h2><p>当进入网页时，因为加载速度的问题，可能会导致top_img图片出现断层显示，或者网页加载不全而出现等待时间，开启preloader后，会显示加载动画，等页面加载完，加载动画会消失。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载动画 Loading Animation</span></span><br><span class="line"><span class="attr">preloader:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="23-字数统计">23.字数统计</h2><ol><li>安装插件：在你的博客根目录，打开cmd命令窗口执行<code>npm install hexo-wordcount --save</code>。</li><li>开启配置：修改主题配置文件<code>_config.butterfly.yml</code>中的<code>wordcount</code>。</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="24-图片大图查看模式">24.图片大图查看模式</h2><p>只能开启一个。<br>如果你并不想为某张图片添加大图查看模式，你可以使用 html 格式引用图片，并为图片添加 no-lightbox class 名，例如：<code>&lt;img src=&quot;xxxx.jpg&quot; class=&quot;no-lightbox&quot;&gt;</code>。</p><div class="tabs" id="图片大图查看模式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#图片大图查看模式-1">fancybox(推荐)</button></li><li class="tab"><button type="button" data-href="#图片大图查看模式-2">medium_zoom</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="图片大图查看模式-1"><p>修改主题配置文件<code>_config.butterfly.yml</code>中<code>fancybox</code>属性</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fancybox http://fancyapps.com/fancybox/3/</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="图片大图查看模式-2"><p>修改主题配置文件<code>_config.butterfly.yml</code>中<code>medium_zoom</code>属性</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">medium_zoom:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="25-Pjax">25.Pjax</h2><p>当用户点击链接，通过 <code>ajax </code>更新页面需要变化的部分，然后使用 HTML5 的 <code>pushState</code> 修改浏览器的 URL 地址。这样可以不用重复加载相同的资源<code>（css/js）</code>， 从而提升网页的加载速度。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pjax [Beta]</span></span><br><span class="line"><span class="comment"># It may contain bugs and unstable, give feedback when you find the bugs.</span></span><br><span class="line"><span class="comment"># https://github.com/MoOx/pjax</span></span><br><span class="line"><span class="attr">pjax:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 对于一些第三方插件，有些并不支持 pjax 。</span></span><br><span class="line">  <span class="comment"># 你可以把网页加入到 exclude 里，这个网页会被 pjax 排除在外。</span></span><br><span class="line">  <span class="comment"># 点击该网页会重新加载网站。</span></span><br><span class="line">  <span class="attr">exclude:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">/music/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/no-pjax/</span></span><br></pre></td></tr></table></figure><p>注意：使用 pjax 后，一些自己DIY的js可能会无效，跳转页面时需要重新调用（例如朋友圈、说说等），具体请参考<a href="https://github.com/MoOx/pjax">Pjax文档</a>。</p><h2 id="26-Inject">26.Inject</h2><p>如想添加额外的 js/css/meta 等等东西，可以在 Inject 里添加，head(<code>&lt;/body&gt;</code>标签之前)， bottom(<code>&lt;/html&gt;</code>标签之前)。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="27-本地搜索系统">27.本地搜索系统</h2><ol><li><p>安装依赖：前往博客根目录，打开cmd命令窗口执行<code>npm install hexo-generator-search --save</code>。</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li><p>注入配置：修改站点配置文件<code>_config.yml</code>，添加如下代码：</p> <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>主题中开启搜索：在主题配置文件_config.butterfly.yml中修改以下内容：</p> <figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="addition">+  enable: true</span></span><br></pre></td></tr></table></figure></li><li><p>重新编译运行，即可看到效果：前往博客根目录，打开cmd命令窗口依次执行如下命令：</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo generate</span><br><span class="line">hexo s -p 8000</span><br></pre></td></tr></table></figure><p>详情可参考 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a></p></li></ol><p><img src="https://s1.vika.cn/space/2022/10/29/df8853f2baf342a2ba28968b80826693" alt="image-20221029174043726"></p>]]></content>
    
    
    <summary type="html">Hexo博客搭建基础教程(三)</summary>
    
    
    
    <category term="魔改教程" scheme="https://www.fomal.cc/categories/%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://www.fomal.cc/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建基础教程(二)</title>
    <link href="https://www.fomal.cc/posts/4aa2d85f.html"/>
    <id>https://www.fomal.cc/posts/4aa2d85f.html</id>
    <published>2022-10-27T18:00:00.000Z</published>
    <updated>2022-10-27T18:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p>这部分教程有参考tzy大佬的文章：<a href="https://tzy1997.com/articles/hexo1603/">基于 Hexo 从零开始搭建个人博客（三）</a>、<a href="https://tzy1997.com/articles/hexo1604/">基于 Hexo 从零开始搭建个人博客（四）</a><br>阅读本篇前，请先阅读前面的文章：<a href="https://www.fomal.cc/posts/e593433d.html">Hexo 博客搭建基础教程 (一)</a><br>视频教程会同步至在我的B站账号<a href="https://space.bilibili.com/220757832">Fomalhaut1998a</a></p></div><h2 id="1-前言-2">1.前言</h2><ol><li>博客搭建过程遇到任何问题，优先在本页面搜索，检查是否已经有该配置教程。</li><li>遇到问题可以优先在文章评论区留言，注意留言时请填写正确的邮箱以确保能收到站长的回复。</li><li>实在解决不了的问题可添加站长的微信进行交流，备注自己的个人信息。</li></ol><h2 id="2-Vercel部署与自定义域名">2.Vercel部署与自定义域名</h2><h3 id="2-1-Vercel部署">2.1 Vercel部署</h3><p>Vercel简介：<a href="https://vercel.com/dashboard">vercel</a>是一个代码托管平台，它能够托管你的静态html界面，甚至能够托管你的node.js与Python服务端脚本，是<strong>不想买服务器的懒人的福音</strong>！</p><p><strong>使用Vercel部署Hexo项目步骤：</strong></p><ol><li>首先需要一个Vercel账号，这里<strong>推荐用GitHub账户关联，这样你就可以在vercel中直接托管你的GitHub库中的项目了</strong>，实现开发部署一步到位（网络不流畅可以考虑挂梯子）。<br><img src="https://s1.vika.cn/space/2022/10/27/5ecde0efb97e4efe8c872c07f2b29301" alt="image-20221027223132537" style="zoom:33%;" /></li><li>当你用你的Github账户关联并绑定手机号登录之后，点击右上角的<code>Add New Project</code>创建新的项目，之后导入选项那里选择<code>Continue with Github</code>，这时候应该能看到你Github账号的仓库，选择你刚刚部署成功的存储静态博客的仓库<code>&lt;username&gt;.github.io</code>右边的<code>Import</code>选项，表示你要导入该仓库。<br><img src="https://s1.vika.cn/space/2022/10/27/13d509ad17d44a5ebf60d6bd7cde05f4" alt="image-20221027223231192" style="zoom:33%;" /><br><img src="https://s1.vika.cn/space/2022/10/27/23780c3fc63546559ff02d303f97e37d" alt="image-20221027223420282" style="zoom:50%;" /><br><img src="https://s1.vika.cn/space/2022/10/27/7e1c080e435648a1a27a0f21d19e979d" alt="image-20221027223742660" style="zoom: 33%;" /></li><li>起一个只能有字母、数字或者或者连字符的项目名称，然后其他默认，点击<code>Deploy</code>，等待一分钟即可部署成功，部署成功后电极<code>Continue to Dashboard</code>跳转到控制面板，下图所示就是控制面板，看到就代表成功部署到了，但是我们现在还不能访问他给出的域，因为GFW最近把Vercel屏蔽了。</li></ol><p>​<img src="https://s1.vika.cn/space/2022/10/27/09b5ce9b3ac64d2dad2acdf3cca92b5f" alt="image-20221027224225808" style="zoom: 33%;" /></p><img src="https://s1.vika.cn/space/2022/10/27/43c6816280914f6ebbab1d6ec345c8f9" alt="image-20221027224405464" style="zoom: 67%;" /><h3 id="2-2-绑定自定义域名">2.2 绑定自定义域名</h3><p>现在你的个人网站的地址是 <code>username.github.io</code>以及在Vercel上有一个<code>blog-demo-chi.vercel.app</code>。如果觉得不够定制化，可以购买一个专属域名。</p><div class="note info no-icon flat"><p>这一步不是必要的，如果目前还不想买域名可以先跳过。</p></div><p>腾讯云、阿里云等都是不错的域名代理商，建议选用<code>com</code>，<code>cn</code>或<code>cc</code>这类常用好记的顶域，对SEO比较友好，自定义部分的长度尽可能短别人才会更容易地记住你的网站，要知道域名就是你网站的卡片。此处以阿里云域名为例进行说明，购买域名后，实名认证进入阿里云控制台，点云解析进去，找到你刚买的域名，点进去添加Vercel所需的解析记录，注意博主这里是解析二级域名只需要解析一条即可。但是如果是一级域名，需要解析两个，一个是<code>@</code>，另外一个是<code>www</code>，Vercel建议是<code>@</code>的解析重定向至<code>www</code>。</p><p>以我的域名：<code>fomal.cc</code>为例进行说明</p><table><thead><tr><th style="text-align:center">主机记录</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">www</td><td style="text-align:center">解析后的域名为 <a href="http://www.fomal.cc">www.fomal.cc</a></td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">直接解析主域名 <a href="http://fomal.cc">fomal.cc</a></td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">泛解析，匹配其他所有域名 *.fomal.cc</td></tr><tr><td style="text-align:center">mail</td><td style="text-align:center">将域名解析为 <a href="http://mail.fomal.cc">mail.fomal.cc</a>，通常用于解析邮箱服务器</td></tr><tr><td style="text-align:center">二级</td><td style="text-align:center">如 <a href="http://abc.fomal.cc">abc.fomal.cc</a>，填写 abc</td></tr><tr><td style="text-align:center">手机网站</td><td style="text-align:center">如 <a href="http://m.fomal.cc">m.fomal.cc</a>，填写 m</td></tr><tr><td style="text-align:center">显性URL</td><td style="text-align:center">不支持泛解析（泛解析：将所有子域名解析到同一地址）</td></tr></tbody></table><div class="note info no-icon flat"><p>将域名指向云服务器，请选择「A」； 将域名指向另一个域名，请选择「CNAME」； 建立邮箱请选择「MX」，根据邮箱服务商提供的 MX 记录填写。</p></div><table><thead><tr><th style="text-align:center">记录类型</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">用来指定域名的 IPv4 地址（如 8.8.8.8），如果需要将域名指向一个 IP 地址，就需要添加 A 记录。</td></tr><tr><td style="text-align:center">CNAME</td><td style="text-align:center">如果需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录。</td></tr><tr><td style="text-align:center">MX</td><td style="text-align:center">如果需要设置邮箱，让邮箱能收到邮件，就需要添加 MX 记录。</td></tr><tr><td style="text-align:center">TXT</td><td style="text-align:center">在这里可以填写任何东西，长度限制 255。绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）</td></tr><tr><td style="text-align:center">NS</td><td style="text-align:center">域名服务器记录，如果需要将子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。</td></tr><tr><td style="text-align:center">AAAA</td><td style="text-align:center">用来指定主机名（或域名）对应的 IPv6 地址（例如：ff06:0:0:0:0:0:0:c3）记录。</td></tr><tr><td style="text-align:center">SRV</td><td style="text-align:center">记录了哪台计算机提供了哪个服务。格式为：服务的名字、点、协议的类型，例如：_xmpp-server_tcp。</td></tr><tr><td style="text-align:center">显性URL</td><td style="text-align:center">从一个地址 301 重定向到另一个地址的时候，就需要添加显性 URL 记录（注：DNSPod 目前只支持 301 重定向）。</td></tr><tr><td style="text-align:center">隐性URL</td><td style="text-align:center">类似于显性 URL，区别在于隐性 URL 不会改变地址栏的域名。</td></tr></tbody></table><p><strong>添加自定义域名的步骤：</strong></p><ol><li>点击Vercel控制面板右上角的<code>View Domains</code>查看当前的域，我们可以看到仅有Vercel给你预分配的一个域名，此时我们输入刚刚购买的域名，我这里以二级域名<code>demo.fomal.cc</code>为例进行说明，添加后他会提示你添加一条DNS解析记录。<br><img src="https://s1.vika.cn/space/2022/10/27/f0890ccf90d04ac7985a40558b8f0aad" alt="image-20221027224803563"><br><img src="https://s1.vika.cn/space/2022/10/27/3a1e809ca99a452fae6229d9b69134ad" alt="image-20221027224830609"><br><img src="https://s1.vika.cn/space/2022/10/27/1bd6bdd5cc924661a0bf779997240e86" alt="image-20221027225338126"><br><strong>PS</strong>：如果你是新买的域名，直接输入你新买的一级域名即可，例如<code>demo123.com</code>，他会推荐你将<code>demo123.com</code>重定向至<code>www.demo123.com</code>，点<code>ADD</code>即可，然后他会提示你添加两条解析记录，一个是<code>@</code>开头的和<code>CNAME</code>开头的，添加记录的方法和二级域名一致。<br><img src="https://s1.vika.cn/space/2022/10/27/66c6d6f8fac84481b788228c4222864d" alt="image-20221027225758503"><br><img src="https://s1.vika.cn/space/2022/10/27/d6dd5ec65e93439482a7ddd5833ebd9d" alt="image-20221027225808449"></li><li>在阿里云域名解析记录里面添加如下记录，其中记录类型对应<code>Type</code>，主机记录对应<code>Name</code>，记录值对应<code>Value</code>，其他的设置默认即可。<br><img src="https://s1.vika.cn/space/2022/10/27/83c253f0710f44c1b80bc662e4a97636" alt="image-20221027230049667" style="zoom: 80%;" /></li><li>回到Vercel刚刚查看域名的地方，如果操作没问题，应该会显示域名配置成功的提示，此时就可以通过自定义域名来访问我们搭建的网站了。<br><img src="https://s1.vika.cn/space/2022/10/27/9604de65a5524ba88d7e43f9412229d3" alt="image-20221027230357362"><br><img src="https://s1.vika.cn/space/2022/10/27/244bc979f30149778b9e1ffc7038ecd0" alt="image-20221027230421929" style="zoom: 67%;" /></li><li>当你有了新的域名之后，需要<code>[BlogRoot]\_config.yml</code>文件中的<code>url</code>配置项为自己的新域名，这样博客的文章链接才会正确生成。</li></ol><img src="https://s1.vika.cn/space/2022/10/28/fa95d5aef2ac45deb4a02400056047e1" alt="image-20221028113042788" style="zoom:50%;" /><h2 id="3-安装主题">3.安装主题</h2><p>本教程用的 🦋 hexo-theme-butterfly 主题 v4.5.0最新版，请放心食用。</p><p>本教程用的是npm方式安装的 <code>hexo-theme-butterfly</code>，后续魔改时更改的文件都是【C:/Hexo-Blog/blog-demo/node_modules/hexo-theme-butterfly】文件夹中的文件。如果你是<code>git clone</code>克隆方式安装的主题，请在【C:/Hexo-Blog/blog-demo/themes/butterfly】文件夹下修改对应的文件。</p><div class="tabs" id="主题安装方式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主题安装方式-1">npm安装(推荐)</button></li><li class="tab"><button type="button" data-href="#主题安装方式-2">Github安装</button></li><li class="tab"><button type="button" data-href="#主题安装方式-3">Gitee安装</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主题安装方式-1"><p>注意：此方法只支持 Hexo 5.0.0以上版本!</p><p>在你的博客根目录（我这里路径为【C:/Hexo-Blog/blog-demo】）打开<code>Git BASH</code>命令窗口执行<code>npm i hexo-theme-butterfly</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>安装成功后可在【C:/Hexo-Blog/blog-demo/node_modules】文件夹下找到hexo-theme-butterfly文件夹</p><div class="note info modern"><p>升级方法：在博客根目录下，运行 <code>npm update hexo-theme-butterfly</code>。<br>升级前请将<code>hexo-theme-butterfly</code>文件夹备份，npm更新会直接覆盖成新的包。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主题安装方式-2"><p>在你的博客根目录里（我这里路径为【C:/Hexo-Blog/blog-demo】），打开<code>Git BASH</code>工具，执行命令即可。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b 4.5.0 https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>安装成功后可在【C:/Hexo-Blog/blog-demo/themes】文件夹下找到<code>butterfly</code>文件夹，可以将<code>landscape</code>文件夹删掉。</p><div class="note info modern"><p>升级方法：在主题目录下，运行git pull</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主题安装方式-3"><p>在你的博客根目录里（我这里路径为【C:/Hexo-Blog/blog-demo】），打开<code>Git BASH</code>工具，执行命令即可。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b 4.5.0 https://gitee.com/iamjerryw/hexo-theme-butterfly.git themes/butterfly </span><br></pre></td></tr></table></figure><div class="note info modern"><p>升级方法：在主题目录下，运行git pull</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="4-应用主题">4.应用主题</h2><ol><li>修改站点配置文件<code>_config.yml</code>，把主题改为<code>butterfly</code> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li><li>如果你没有<code>pug</code>以及<code>stylus</code>的渲染器，请下载安装，这两个渲染器是<code>Butterfly</code>生成基础页面所需的依赖包： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li>为了减少升级主题后带来的不便，请使用以下方法（建议，可以不做，高度魔改的一般都不会升级主题了，不然魔改的会被覆盖掉）<br>把主题文件夹中的 <code>_config.yml</code> 复制到 Hexo 根目录里（我这里路径为【C:/Hexo-Blog/blog-demo】），同时重新命名为 <code>_config.butterfly.yml</code>。以后只需要在 <code>_config.butterfly.yml</code>进行配置即可生效。Hexo会自动合併主题中的<code>_config.yml</code>和 <code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度较高。</li></ol><h2 id="5-基础用法说明">5. 基础用法说明</h2><h3 id="5-1-Front-matter">5.1 Front-matter</h3><p><code>Front-matter</code> 是 markdown 文件最上方以<code>---</code>分隔的区域，用于指定个别档案的变数。</p><ul><li>Page Front-matter 用于页面配置</li><li>Post Front-matter 用于文章页配置</li></ul><div class="note info modern"><p>如果标注可选的参数，可根据自己需要添加，不用全部都写</p></div><p><strong>Page Front-matter：</strong></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">写法</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td>【必需】页面标题</td></tr><tr><td style="text-align:left">date</td><td>【必需】页面创建日期</td></tr><tr><td style="text-align:left">type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td style="text-align:left">updated</td><td>【可选】页面更新日期</td></tr><tr><td style="text-align:left">description</td><td>【可选】页面描述</td></tr><tr><td style="text-align:left">keywords</td><td>【可选】页面关键字</td></tr><tr><td style="text-align:left">comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td style="text-align:left">top_img</td><td>【可选】页面顶部图片</td></tr><tr><td style="text-align:left">mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td style="text-align:left">kates</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td style="text-align:left">aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td style="text-align:left">aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td style="text-align:left">highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><p><strong>Post Front-matter：</strong></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">aside:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><div class="note info modern"><p>注意：我的博客根目录路径为 【C:/Hexo-Blog/blog-demo】，下文所说的根目录都是此路径，将用[BlogRoot]代替。</p></div><h3 id="5-2-标签页">5.2 标签页</h3><ol><li><p>前往你的Hexo博客根目录，打开<code>Git Bash</code>执行如下命令：</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></li><li><p>在<code>[BlogRoot]\source\</code>会生成一个含有<code>index.md</code>文件的<code>tags</code>文件夹。</p></li><li><p>修改<code>[BlogRoot]\source\tags\index.md</code>，添加<code>type: &quot;tags&quot;</code>。</p> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-10-28 12:00:00</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-3-友情链接">5.3 友情链接</h3><ol><li><p>前往你的Hexo博客根目录，打开cmd命令窗口执行如下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure></li><li><p>在<code>[BlogRoot]\source\</code>会生成一个含有<code>index.md</code>文件的<code>link</code>文件夹</p></li><li><p>修改<code>[BlogRoot]\source\link\index.md</code>，添加<code>type: &quot;link&quot;</code></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: link</span><br><span class="line">date: 2022-10-28 12:00:00</span><br><span class="line"><span class="section">type: &quot;link&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li><li><p>前往<code>[BlogRoot]\source\_data</code>创建一个<code>link.yml</code>文件（如果沒有 <code>_data</code> 文件夹，请自行创建），并写入如下信息（根据你的需要写）：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="number">1</span><span class="string">.技术支持</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">本网站的搭建由以下开源作者提供技术支持</span></span><br><span class="line">  <span class="attr">link_list:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> </span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-cn/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网志框架</span></span><br><span class="line">      <span class="attr">siteshot:</span> <span class="string">https://source.fomal.cc/siteshot/hexo.io.jpg</span></span><br><span class="line">      </span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="number">2</span><span class="string">.友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">一些好朋友~~</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Fomalhaut🥝</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://fomal.cc/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">/assets/head.jpg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">Future</span> <span class="string">is</span> <span class="string">now</span> <span class="string">🍭🍭🍭</span></span><br><span class="line">      <span class="attr">siteshot:</span> <span class="string">https://source.fomal.cc/siteshot/www.fomal.cn.jpg</span></span><br></pre></td></tr></table></figure><p>class_name和class_desc支持 html 格式，如不需要，也可以留空。</p></li></ol><h3 id="5-4-图库">5.4 图库</h3><p>图库页面只是普通的页面，你只需要<code>hexo new page xxx</code>创建你的页面就行。</p><p>然后使用外挂标签 <code>galleryGroup</code>，具体用法请查看对应的内容。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% galleryGroup &#x27;封面专区&#x27; &#x27;本站用作文章封面的图片，不保证分辨率&#x27; &#x27;/box/Gallery/photo&#x27; https://source.fomal.cc/img/default<span class="emphasis">_cover_</span>61.webp %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% galleryGroup &#x27;背景专区&#x27; &#x27;收藏的一些的背景与壁纸，分辨率很高&#x27; &#x27;/box/Gallery/wallpaper&#x27; https://source.fomal.cc/img/dm11.webp %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="5-5-子页面">5.5 子页面</h3><p>子页面也是普通的页面，你只需要<code>hexo new page xxx</code>创建你的页面就行。</p><p>然后使用标签外挂 <code>gallery</code>，具体用法请查看对应的内容。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125; </span><br><span class="line">![<span class="string">p1</span>](<span class="link"> https://source.fomal.cc/img/default_cover_1.webp </span>) </span><br><span class="line">![<span class="string">p2</span>](<span class="link"> https://source.fomal.cc/img/default_cover_2.webp </span>) </span><br><span class="line">![<span class="string">p3</span>](<span class="link"> https://source.fomal.cc/img/default_cover_3.webp </span>) </span><br><span class="line">![<span class="string">p4</span>](<span class="link"> https://source.fomal.cc/img/default_cover_4.webp </span>) </span><br><span class="line">![<span class="string">p5</span>](<span class="link"> https://source.fomal.cc/img/default_cover_5.webp </span>) </span><br><span class="line">![<span class="string">p6</span>](<span class="link"> https://source.fomal.cc/img/default_cover_6.webp </span>) </span><br><span class="line">![<span class="string">p7</span>](<span class="link"> https://source.fomal.cc/img/default_cover_7.webp </span>) </span><br><span class="line">![<span class="string">p8</span>](<span class="link"> https://source.fomal.cc/img/default_cover_8.webp </span>) </span><br><span class="line">![<span class="string">p9</span>](<span class="link"> https://source.fomal.cc/img/default_cover_9.webp </span>) </span><br><span class="line">![<span class="string">p10</span>](<span class="link"> https://source.fomal.cc/img/default_cover_10.webp </span>) </span><br><span class="line">![<span class="string">p11</span>](<span class="link"> https://source.fomal.cc/img/default_cover_11.webp </span>) </span><br><span class="line">![<span class="string">p12</span>](<span class="link"> https://source.fomal.cc/img/default_cover_12.webp </span>) </span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-404页面">5.6 404页面</h3><p>主題內置了一个简单的404页面，可在设置中开放。</p><p>如需本地预览，请访问 <a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&quot;页面沒有找到&quot;</span></span><br><span class="line">  <span class="attr">background:</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Hexo博客搭建基础教程(二)</summary>
    
    
    
    <category term="魔改教程" scheme="https://www.fomal.cc/categories/%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://www.fomal.cc/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建基础教程(一)</title>
    <link href="https://www.fomal.cc/posts/e593433d.html"/>
    <id>https://www.fomal.cc/posts/e593433d.html</id>
    <published>2022-10-25T18:00:00.000Z</published>
    <updated>2022-10-27T18:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p>这部分教程有参考tzy大佬的文章：<a href="https://tzy1997.com/articles/hexo1601/">基于 Hexo 从零开始搭建个人博客（一）</a>、<a href="https://tzy1997.com/articles/hexo1602/">基于 Hexo 从零开始搭建个人博客（二）</a><br>全程我将会用一个完全空白的虚拟机带着大家进行搭建，大家可以放心食用🍖🍖🍖<br>视频教程会同步至在我的B站账号<a href="https://space.bilibili.com/220757832">Fomalhaut1998a</a></p></div><h2 id="1-前言">1.前言</h2><ol><li>博客搭建过程遇到任何问题，优先在本页面搜索，检查是否已经有该配置教程。</li><li>遇到问题可以优先在文章评论区留言，注意留言时请填写正确的邮箱以确保能收到站长的回复。</li><li>实在解决不了的问题可添加站长的微信进行交流，备注自己的个人信息。</li></ol><h2 id="2-环境与工具准备">2.环境与工具准备</h2><p><strong>本教程主要面对的是Windows用户</strong></p><ul><li>操作系统：Windows10</li><li>Node</li><li>Git</li><li>Hexo</li><li>文本编辑器(强烈推荐VSCODE)</li><li>GitHub 帐号</li><li>一个域名（强烈推荐买个域名）</li><li>云服务器（可选）</li></ul><h2 id="3-Node的安装">3.Node的安装</h2><ol><li>打开Node官网，下载和自己系统相配的Node的安装程序，否则会出现安装问题。下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>我个人的版本是 12.19.0，目前版本已经更新到19.0.0，按照个人经验，可以选个低一些的版本，可以和我的一样，否则后面会出现各种不兼容的问题！我之前就是安装16的，系统无法识别，如果大家遇到问题建议选个低版本的！历史版本下载页面：<a href="https://nodejs.org/en/download/releases/">https://nodejs.org/en/download/releases/</a><br><img src="https://s1.vika.cn/space/2022/10/27/876780920daf4f8fb319d49ff68f17a3" alt="image-20221027173738226"></li><li>下载后安装，安装的目录可以使用默认目录【C:/Program Files/nodejs/】，也可以自定义路径。<br>这个环境路径切换坑也很多，如果大家C盘空间足够可以直接装C盘，如果想切换其他盘或者把环境遍历切换到自定义路径也可以，具体教程百度(不过坑比较多就是了)!</li><li>安装完成后，检查是否安装成功。在键盘按下win + R键，输入CMD，然后回车，打开CMD窗口，执行node -v命令，看到版本信息，则说明安装成功。</li><li>修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像。打开CMD窗口，运行如下命令: <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-安装Hexo">4.安装Hexo</h2><ol><li><p>在<code>Git BASH</code>输入如下命令安装</p>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>安装完后输入hexo -v验证是否安装成功。</p></li></ol><img src="https://s1.vika.cn/space/2022/10/27/f05830f48da44ea98d2a55c3a6663004" alt="image-20221027173525181" style="zoom: 67%;" /><h2 id="5-Github注册与创建仓库">5.Github注册与创建仓库</h2><ol><li>进入官网 <a href="https://github.com/">https://github.com/</a><br><img src="https://bu.dusays.com/2022/05/12/627d2c0449341.webp" alt="Github注册"></li><li>点击右上角的 Sign up(注册)<br><img src="https://bu.dusays.com/2022/05/12/627d2c05ee628.png" alt="Github注册"></li><li>填写自己的邮箱、密码、用户名等信息，然后用邮箱验证即可完成。</li><li>注册完成后，点击右上角的<code>+</code>按钮，选择<code>New repository</code>，创建一个<code>&lt;用户名&gt;.github.io</code>的仓库。</li></ol><p>​<img src="https://s1.vika.cn/space/2022/10/27/7a06143d180d47088833a486732dccf5" alt="image-20221027110619071" style="zoom:50%;" /></p><ul><li>仓库的格式必须为：&lt;用户名&gt;.github.io</li><li>Description：为描述仓库（选填）</li><li>勾选 Initialize this repository with a README 初始化一个 <a href="http://README.md">README.md</a> 文件</li><li>点击 Creat repository 进行创建</li></ul><p>​<img src="https://s1.vika.cn/space/2022/10/27/0a4dbb10ca69422ca9ccb7493d0f177a" alt="image-20221027111641909" style="zoom:50%;" /></p><h2 id="6-Git安装">6.Git安装</h2><ol><li><p>进入官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> ，由于官网下载太慢可以通过淘宝的开源镜像下载 网址：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/">https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/</a> ，下载版本更具自己的需求选择即可。</p><p><img src="https://s1.vika.cn/space/2022/10/27/28a7d7e6ef3f4df080da8d7e8337431b" alt="image-20221027111755697"></p></li><li><p>下载后傻瓜式安装Git即可，安装的目录可以使用默认目录【C:/Program Files/Git】，也可以自定义路径。</p></li><li><p>点击电脑左下角开始即可看见<code>Git Bash</code>。</p></li></ol><p><img src="https://bu.dusays.com/2022/05/13/627d410ddc940.webp" alt="Git Bash"></p><ul><li><code>Git CMD</code> 是windows 命令行的指令风格</li><li><code>Git Bash</code> 是linux系统的指令风格（建议使用）</li><li><code>Git GUI</code>是图形化界面（新手学习不建议使用）</li></ul><ol start="4"><li><p>常用命令</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config -l  //查看所有配置</span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure></li><li><p>配置用户名和邮箱</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li><li><p>通过<code>git config -l</code> 检查是否配置成功，至此git安装及配置全部完成。</p><p><img src="https://s1.vika.cn/space/2022/10/27/9115d60b377a47f3a8b79779a287ee65" alt="image-20221027112049822"></p></li></ol><h2 id="7-连接至Github">7.连接至Github</h2><ol><li><p>执行以下命令生成ssh公钥，此公钥用于你的计算机连接Github</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到 id_rsa.pub</p><p><img src="https://bu.dusays.com/2022/05/14/627e87126fc59.png" alt="公钥"></p><p>用记事本打开上述图片中的公钥（id_rsa.pub），复制里面的内容，然后开始在github中配置ssh密钥。</p><p><img src="https://bu.dusays.com/2022/05/14/627e87156038a.png" alt="记事本打开公钥"></p></li><li><p>将 SSH KEY 配置到 GitHub<br>进入github，点击右上角头像 选择<code>settings</code>，进入设置页后选择 <code>SSH and GPG keys</code>，名字随便起，公钥填到<code>Key</code>那一栏。</p> <img src="https://s1.vika.cn/space/2022/10/27/4a69d999fed54ff78a5b84805d3c6a12" alt="image-20221027112347632" style="zoom:33%;" /><p><img src="https://s1.vika.cn/space/2022/10/27/aa20ae7d8db34e2596638f5f031f0814" alt="image-20221027112416710"></p><p><img src="https://s1.vika.cn/space/2022/10/27/eaccde8a10eb4cde945a1ed221bb6ace" alt="image-20221027112657256"></p></li><li><p>测试连接，输入以下命令</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2022/10/27/122bb1ef33074bee84030a525ce1ec56" alt="image-20221027112918539"></p><p>出现连接到账户的信息，说明已经大功告成，至此完成了环境准备工作。</p></li></ol><h2 id="8-初始化-Hexo-项目">8.初始化 Hexo 项目</h2><ol><li><p>在目标路径（我这里选的路径为【C:/Hexo-Blog】）打开cmd命令窗口，执行<code>hexo init</code>初始化项目。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init blog-demo(项目名)</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2022/10/27/1fbeb52671cf4b1daeca3660d1a31a2f" alt="image-20221027113206776"></p></li><li><p>进入<code>blog-demo</code> ，输入<code>npm i</code>安装相关依赖。</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd blog-demo  //进入blog-demo文件夹</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2022/10/27/150eeb3e61c94b89a1cad2a3079b1f94" alt="image-20221027113331624"></p></li><li><p>初始化项目后，<code>blog-demo</code>有如下结构：</p></li></ol>  <img src="https://s1.vika.cn/space/2022/10/27/70cf503f27c54d30a31c6b13735023b7" alt="image-20221027113438707" style="zoom:50%;" /><p>【node_modules】：依赖包<br>【scaffolds】：生成文章的一些模板<br>【source】：用来存放你的文章<br>【themes】：主题<br>【.npmignore】：发布时忽略的文件（可忽略）<br>【_config.landscape.yml】：主题的配置文件<br>【config.yml】：博客的配置文件<br>【package.json】：项目名称、描述、版本、运行和开发等信息</p><ol start="4"><li><p>输入hexo server或者hexo s 启动项目</p><p><img src="https://s1.vika.cn/space/2022/10/27/688592f6db1448d29a2f722fc7a0bb0a" alt="image-20221027113534970"></p></li><li><p>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到下面的效果，说明你的博客已经构建成功了。</p><p><img src="https://bu.dusays.com/2022/05/26/628e5423df640.webp" alt="博客首页"></p></li></ol><h2 id="9-将静态博客挂载到-GitHub-Pages">9. 将静态博客挂载到 GitHub Pages</h2><ol><li><p>安装 hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>修改 _config.yml 文件<br>在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。<br>修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为<code>main</code>代表主分支（注意缩进）。</p> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:Fomalhaut-Blog/Fomalhaut-Blog.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p>修改好配置后，运行如下命令，将代码部署到 GitHub（Hexo三连）。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端</span><br><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br></pre></td></tr></table></figure><ul><li><p>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</p></li><li><p>hexo generate：生成静态文章，可以用<code>hexo g</code>缩写</p></li><li><p>hexo deploy：部署文章，可以用<code>hexo d</code>缩写</p><p><img src="https://s1.vika.cn/space/2022/10/27/7ed7b8256d75408aa86e90cd37d0ea53" alt="image-20221027113704801"></p><div class="note info no-icon flat"><p>注意：deploy时可能要你输入 username 和 password。</p></div><p>如果出现<code>Deploy done</code>，则说明部署成功了。</p><p><img src="https://s1.vika.cn/space/2022/10/27/85b61e7242214d368539d744b4778a5d" alt="image-20221027113756069"></p><p>稍等两分钟，打开浏览器访问：<a href="https://Fomalhaut-Blog.github.io">https://Fomalhaut-Blog.github.io</a> ，这时候我们就可以看到博客内容了。</p><p><img src="https://s1.vika.cn/space/2022/10/27/6de50dfe03604b07aa26fb7dd5fe1f99" alt="image-20221027113923949"></p></li></ul></li></ol>]]></content>
    
    
    <summary type="html">Hexo博客搭建基础教程(一)</summary>
    
    
    
    <category term="魔改教程" scheme="https://www.fomal.cc/categories/%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://www.fomal.cc/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>网站性能优化的一些小技巧</title>
    <link href="https://www.fomal.cc/posts/b48804d5.html"/>
    <id>https://www.fomal.cc/posts/b48804d5.html</id>
    <published>2022-10-23T18:00:00.000Z</published>
    <updated>2022-10-23T18:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>理论部分内容参考自：<a href="https://tzy1997.com/articles/we0522bs/">Web页面全链路性能优化指南</a>，如果仅仅想进行优化不想花费太多时间了解原理可以直接跳到第二部分</p></div><h1>一、理论部分</h1><h2 id="1-浏览器渲染原理">1.浏览器渲染原理</h2><p>我们需要知道浏览器是如何渲染一个页面的，我们才能知道如何对页面进行性能优化，所以这里我们对一些基础知识进行讲解。</p><h3 id="1-1-进程与线程">1.1 进程与线程</h3><p>浏览器有多种进程，其中最主要的5种进程如下：</p><p><img src="https://bu.dusays.com/2022/05/23/628b96c2e0bec.webp" alt="p1"></p><ol><li>浏览器进程 负责界面展示、用户交互、子进程管理、提供存储等</li><li>渲染进程 每个页面都有一个单独的渲染进程，用于渲染页面，包含webworker线程</li><li>网络进程 主要处理网络资源加载（HTML、CSS、JS、IMAGE、AJAX等）</li><li>GPU进程 3D绘制，提高性能</li><li>插件进程 chrome插件，每个插件占用一个进程</li></ol><h3 id="1-2-输入url到页面展示完整过程">1.2 输入url到页面展示完整过程</h3><p><img src="https://bu.dusays.com/2022/05/23/628b9dcaedcbd.jpg" alt="p2"></p><h4 id="1-2-1-用户输入">1.2.1 用户输入</h4><p>用户在浏览器进程输入并按下回车健后，浏览器判断用户输入的url是否为正确的url，如果不是，则使用默认的搜索引擎将该关键字拼接成url。</p><h4 id="1-2-2-卸载原页面并重定向到新页面">1.2.2 卸载原页面并重定向到新页面</h4><p>然后浏览器会将现有页面卸载掉并重定向到用户新输入的url页面，也就是图中【Process Unload Event】和【Redirect】流程。</p><p>此时浏览器会准备一个渲染进程用于渲染即将到来的页面，和一个网络进程用于发送网络请求。</p><h4 id="1-2-3-处理Service-Worker">1.2.3 处理Service Worker</h4><p>如果当前页面注册了Service Worker那么它可以拦截当前网站所有的请求，进行判断是否需要向远程发送网络请求。也就是图中【Service Worker Init】与【Service Worker Fecth Event 】步骤</p><p>如果不需要发送网络请求，则取本地文件。如果需要则进行下一步。</p><h4 id="1-2-4-网络请求">1.2.4 网络请求</h4><p><img src="https://bu.dusays.com/2022/05/23/628b99a83152f.webp" alt="p3"></p><ol><li>根据url查询本地是否已经有强制缓存，如果有则判断缓存是否过期，如果没过期则直接返回缓存内容，也就是图1中【HTTP Cache】步骤</li><li>如果没有强制缓存或者缓存已过期，则将该请求加入队列进行排队准备发送网络请求，也就是图2中【正在排队】，然后进入DNS解析阶段，也就是图1中【DNS】以及图2中的【DNS查找】，DNS根据域名解析出对应的IP地址。(DNS基于UDP)。</li><li>使用IP寻址找到对方，然后根据IP地址+端口号创建一个TCP连接(三次握手)，也就是图1中【TCP】以及图2中的【初始连接】创建完成后利用TCP连接来传输数据。(TCP会将数据拆分为多个数据包，进行有序传输，如果丢包会重发，TCP的特点是可靠、有序)</li><li>判断当前协议是否为https，如果为https，则进行SSL协商，将数据进行加密，如果为http协议则不进行加密(明文传输)，也就是图2中的【SSL】。</li><li>开始发送http请求(请求行/请求头/请求体)，也就是图1中【Request】以及图2中的【已发送请求】。HTTP协议有多个版本，目前使用最多的版本为HTTP/1.1，HTTP/1.1发送完成后默认不会断开。keep-alive 默认打开，为了下次传输数据时复用上次创建的连接。每个域名最多同时建立6个TCP连接，所以同一时间最多发生6个请求。</li><li>服务器收到数据后解析HTTP请求(请求行/请求头/请求体)，处理完成后生成状态码和HTTP响应(响应行/响应头/响应体)后返回给客户端，也就是图2的【等待中】在做的事情。</li><li>客户端接收到HTTP响应后根据状态码进行对应的处理，如果状态码为304则直接代表协商缓存生效，直接取本地的缓存文件。如果不是则下载内容。也就是图1中【Response】以及图2中的【下载内容】步骤。</li></ol><h4 id="1-2-5-服务端响应">1.2.5 服务端响应</h4><p>在网络请求第6步中，服务器收到HTTP请求后需要根据请求信息来进行解析，并返回给客户端想要的数据，这也就服务端响应。</p><p>服务端可以响应并返回给客户端很多种类型的资源，这里主要介绍html类型。</p><p>目前前端处理服务端响应html请求主要分为SSR服务端渲染与CSR客户端渲染，CSR就是返回一个空的HTML模版，然后浏览器加载js后通过js动态渲染页面。SSR是服务端在接受到请求时事先在服务端渲染好html返回给客户端后，客户端再进行客户端激活。</p><p>在打开一个站点的首屏页的完整链路中，使用SSR服务端渲染时的速度要远大于CSR客户端渲染，并且SSR对SEO友好。所以对于首屏加载速度比较敏感或者需要优化SEO的站点来说，使用SSR是更好的选择。</p><h4 id="1-2-6-浏览器渲染详细流程">1.2.6 浏览器渲染详细流程</h4><p>浏览器渲染详细流程主要在网络请求中的地7步。浏览器下载完html内容后进行解析何渲染页面的流程。<br><img src="https://bu.dusays.com/2022/05/23/628ba7881b1a8.webp" alt="p4"><br>渲染流程分为4种情况：</p><ol><li>HTML中无任何CSS相关标签</li><li>CSS相关标签在HTML最顶部，且在解析到内容标签<code>（&lt;div /&gt;）</code>时已经解析完CSS相关标签</li><li>CSS相关标签在HTML最顶部，但在解析到内容标签<code>（&lt;div /&gt;）</code>时CSS相关标签尚未解析完</li><li>CSS相关标签在HTML最底部<br>（略）</li></ol><h3 id="1-3-浏览器处理每一帧的流程">1.3 浏览器处理每一帧的流程</h3><p>浏览器在渲染完页面之后还需要不间断的处理很多内容的，比如动画、用户事件、定时器等。因此当浏览器渲染完页面后，还会在之后的每一帧到来时执行以下的流程。<br><img src="https://bu.dusays.com/2022/05/24/628bb016bb39b.webp" alt="p5"></p><ol><li>【Input events】处理用户事件，先处理【阻塞事件Blocking】包括touch和wheel事件，后处理【非阻塞事件Non-blocking】包括click和keypress。</li><li>【JS】处理完用户事件后执行【定时器Timers】</li><li>【Begin frame】处理完定时器后开始进行【每帧事件Per frame events】的处理，包括窗口大小改变、滚动、媒体查询的更改、动画事件。</li><li>【rAF】处理完帧事件后执行requestAnimationFrame回调函数和IntersectionObserver回调函数。</li><li>【Layout】然后【重新计算样式Recalc style】、【更新布局Update layout】、【调整Observer回调的大小Resize Observer callbacks】</li><li>【Paint】然后【合成更新Compositing update】、【Paint invalidation】、【Record】</li></ol><h2 id="2-Chrome性能优化相关工具">2.Chrome性能优化相关工具</h2><p>了解完浏览器渲染原理，我们还需要知道根据哪些指标才能判断一个页面性能的好坏，在Chrome中这些指标应该怎么获取。以及Chrome都为我们提供了哪些性能相关的工具，如何使用。</p><h3 id="2-1-Chrome-Performance-性能">2.1 Chrome Performance(性能)</h3><p>Performance既是一个Chrome工具，可用于性能检测。<br>同样又是一套JS API，可在Chrome中执行。</p><h4 id="2-1-1-Chrome-Performance-工具的使用">2.1.1 Chrome Performance 工具的使用</h4><p>打开Chrome调试面板选择Performance，中文版为性能，点击刷新按钮，Performance会刷新并录制当前页面，然后我们就可以在面板中看到如下的各种性能相关细节。<br><img src="https://bu.dusays.com/2022/05/24/628bb12aad445.webp" alt="p6"></p><h4 id="2-1-2-使用Performance-API获取性能相关指标">2.1.2 使用Performance API获取性能相关指标</h4><p>接下来我们来了解一下目前常用的性能指标，并且我们需要知道其中一些关键指标如何用Performance API获取。</p><ol><li>TTFB（Time To First Byte）首字节时间：从发送请求到数据返回第一个字节所消耗的时间。</li><li>FP (First Paint) 首次绘制: 第一个像素绘制到页面上的时间。</li><li>FCP (First Contentful Paint) 首次内容绘制: 标记浏览器渲染来自 DOM 第一位内容的时间点，该内容可能是文本、图像、SVG 甚至 元素。</li><li>FMP(First Meaningful Paint) 首次有效绘制: 例如，在 YouTube 观看页面上，主视频就是主角元素。<br>图片可以没加载完成，但整体的骨架已经加载完成了。<br>1秒内完成FMP的概率超过80%，那就代表这个网站是一个性能较好的网站。</li><li>TTI (Time to Interactive) 可交互时间 : DOM树构建完毕，可以绑定事件的时间</li><li>LCP (Largest Contentful Paint) 最大内容渲染: 代表在viewport中最大的页面元素加载的时间。LCP的数据会通过PerformanceEntry对象记录, 每次出现更大的内容渲染, 则会产生一个新的PerformanceEntry对象(2019年11月新增)。</li><li>DCL (DomContentloaded): 当 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，无需等待样式表、图像和子框架的完成加载。</li><li>L (onLoad), 当依赖的资源(图片、文件等), 全部加载完毕之后才会触发。</li><li>L (onLoad), 当依赖的资源(图片、文件等), 全部加载完毕之后才会触发。</li><li>TBT (Total Blocking Time) 页面阻塞总时长: TBT汇总所有加载过程中阻塞用户操作的时长，在FCP和TTI之间任何long task中阻塞部分都会被汇总。</li><li>CLS (Cumulative Layout Shift) 累积布局偏移: 总结起来就是一个元素初始时和其hidden之间的任何时间如果元素偏移了, 则会被计算进去, 具体的计算方法可看这篇文章 <a href="https://web.dev/cls/">https://web.dev/cls/</a></li><li>SI (Speed Index): 指标用于显示页面可见部分的显示速度, 单位是时间。</li></ol><h3 id="2-2-Coverage-覆盖率">2.2 Coverage(覆盖率)</h3><p>获取代码未使用占比。获取代码未使用占比<br><img src="https://bu.dusays.com/2022/05/24/628bb981db5c8.webp" alt="p7"></p><h3 id="2-3-Lighthouse">2.3 Lighthouse</h3><p>获取性能报告并查看推荐优化项。可以在本地安装命令行工具来使用，也可以通过Chrome来使用。<br><img src="https://bu.dusays.com/2022/05/24/628cf77e139ff.webp" alt="p8"></p><h3 id="2-4-Network-网络">2.4 Network(网络)</h3><h4 id="2-4-1-网络请求中的Timing-时间">2.4.1 网络请求中的Timing(时间)</h4><p>能获取网络请求的时间消耗细节，可以根据耗时来决定优化策略。优先优化耗时最长的。<br><img src="https://bu.dusays.com/2022/05/24/628cf966b69da.webp" alt="p9"></p><ul><li>正在排队：网络请求队列的排队时间</li><li>已停止：阻塞住用于处理其他事情的时间</li><li>DNS查找：用于DNS解析IP地址的时间</li><li>初始连接：创建TCP连接时间</li><li>SSL：用于SSL协商的时间</li><li>已发送请求：用于发送请求的时间</li><li>等待中：请求发出至接收响应的时间也可以理解为服务端处理请求的时间</li><li>下载内容：下载响应的时间</li></ul><h4 id="2-4-2-网络请求的优先级">2.4.2 网络请求的优先级</h4><p>浏览器会根据资源的类型决定优先请求哪些资源，优先级高的请求能够优先被加载。<br><img src="https://bu.dusays.com/2022/05/24/628cf9efddd7f.webp" alt="p10"><br>不同资源类型的优先级排序如下：</p><ul><li>最高：html、style</li><li>高：font、fetch、script</li><li>低：image、track</li></ul><h4 id="2-4-3-网页总资源信息">2.4.3 网页总资源信息</h4><p><img src="https://bu.dusays.com/2022/05/24/628cfb20c1315.webp" alt="p11"></p><ul><li>58个请求：网页一共多少个请求</li><li>6.9 MB 项资源：网页资源一共6.9MB大小</li><li>DOMContentLoaded 454 毫秒：DOM加载完毕的时长</li><li>加载时间 1.02 秒：onload完毕的时长</li></ul><h4 id="2-4-4-Network配置">2.4.4 Network配置</h4><p><img src="https://bu.dusays.com/2022/05/24/628cfcbe97759.webp" alt="p12"></p><h2 id="3-网页性能优化">3.网页性能优化</h2><p>上面我们分别讲解了进程与线程、浏览器打开一个页面的完整过程、浏览器处理每一帧时的流程、Chrome性能相关的各种工具以及性能相关的各种指标。以上内容都掌握之后我们再考虑性能优化遍有了思路，我们在页面展示的任意一个步骤中对其进行优化都能对整个网页的展示性能产生影响。</p><p>下面列出了一个页面能优化的所有内容，读者可根据自己的业务情况结合性能工具来做适合自己的优化方式。</p><h3 id="3-1-网络优化策略">3.1 网络优化策略</h3><h4 id="3-1-1-减少HTTP请求数">3.1.1 减少HTTP请求数</h4><p>合并JS、合并CSS、合理内嵌JS和CSS、使用雪碧图。</p><h4 id="3-1-2-使用HTTP缓存">3.1.2 使用HTTP缓存</h4><p>使用强制缓存可以不走网络请求，直接走本地缓存数据来加载资源。</p><p>使用协商缓存可以减少数据传输，当不需要更新数据时可通知客户端直接使用本地缓存。</p><h4 id="3-1-3-使用-HTTP-2-0">3.1.3 使用 HTTP/2.0</h4><p>HTTP/2.0使用同一个TCP连接来发送数据，他把多个请求通过二进制分贞层实现了分贞，然后把数据传输给服务器。也叫多路复用，多个请求复用同一个TCP连接。</p><p>HTTP/2.0会将所有以:开头的请求头做一个映射表，然后使用hpack进行压缩，使用这种方式会使请求头更小。</p><p>服务器可主动推送数据给客户端。</p><h4 id="3-1-4-避免重定向">3.1.4 避免重定向</h4><p>301、302 重定向会降低响应速度。</p><h4 id="3-1-5-使用-dns-prefetch">3.1.5 使用 dns-prefetch</h4><p>DNS请求虽然占用的带宽较少，但会有很高的延迟，由其在移动端网络会更加明显。</p><p>使用 dns-prefetch 可以对网站中使用到的域名提前进行解析。提高资源加载速度。</p><p>通过DNS预解析技术可以很好的降低延迟，在访问以图片为主的移动端网站时，使用DNS预解析的情意中下页面加载时间可以减少5%。</p><h4 id="3-1-6-使用域名分片">3.1.6 使用域名分片</h4><p>在HTTP/1.1中，一个域名同时最多创建6个TCP连接，将资源放在多个域名下可提高请求的并发数。</p><h4 id="3-1-7-CDN">3.1.7 CDN</h4><p>静态资源全上CDN，CDN能非常有效的加快网站静态资源的访问速度。</p><h4 id="3-1-8-压缩">3.1.8 压缩</h4><p>gzip压缩、html压缩、js压缩、css压缩、图片压缩。</p><h4 id="3-1-9-使用contenthash">3.1.9 使用contenthash</h4><p>contenthash可以根据文件内容在文件名中加hash，可用于浏览器缓存文件，当文件没有改变时便直接取本地缓存数据。</p><h4 id="3-1-10-合理使用preload、prefetch">3.1.10 合理使用preload、prefetch</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;preload&quot; as=&quot;style&quot; href=&quot;/static/style.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;preload&quot; as=&quot;font&quot; href=&quot;/static/font.woff&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;preload&quot; as=&quot;script&quot; href=&quot;/static/script.js&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;prefetch&quot; as=&quot;style&quot; href=&quot;/static/style.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;prefetch&quot; as=&quot;font&quot; href=&quot;/static/font.woff&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;prefetch&quot; as=&quot;script&quot; href=&quot;/static/script.js&quot;&gt;</span><br></pre></td></tr></table></figure><p>两者都不会阻塞<code>onload</code>事件，<code>prefetch</code>会在页面空闲时候再进行加载，是提前预加载之后可能要用到的资源，不一定是当前页面使用的，<code>preload</code>预加载的是当前页面的资源。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./preload.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上代码，预加载了css但并没有使用。浏览器在页面<code>onload</code>完成一段时间后，发现还没有引用预加载的资源时，浏览器会在控制台输出下图的提示信息。<br><img src="https://bu.dusays.com/2022/05/24/628cfd2d0b279.webp" alt="p13"></p><p>preload和prefetch可根据资源类型决定资源加载的优先级，详细优先级如代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 最高 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./file.xxx&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 高 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;font&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./file.xxx&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;fetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./file.xxx&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;script&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./file.xxx&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 低 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;image&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./file.xxx&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;track&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./file.xxx&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/05/24/628cfd767a1b3.webp" alt="p14"></p><h3 id="3-2-浏览器渲染优化策略">3.2 浏览器渲染优化策略</h3><h4 id="3-2-1-关键渲染路径">3.2.1 关键渲染路径</h4><p>当通过JS或者其他任意方式修改DOM后，浏览器会进入如下流程。</p><p>【JS通过API修改DOM】&gt;【计算样式】&gt;【布局(重排)】&gt;【绘制(重绘)】&gt;【合成】。</p><p><code>Reflow 重排</code>：重排在Chrome Performance中叫做布局，通常添加或删除元素、修改元素大小、移动元素位置、获取位置信息都会触发页面的重排，因为重排可能会改变元素的大小位置等信息，这样的改变会影响到页面大量其它元素的大小位置信息，会耗费掉大量的性能，所以在实际应用中我们应该尽可能的减少重排。</p><p><code>Repaint 重绘</code>：重绘在Chrome Performance中叫做绘制，通常样式改变但没有影响位置时会触发重绘操作，重绘性能还好，但我们也需要尽量减少重绘，如果需要做一些动画，我们尽量使用CSS3动画，CSS3动画只需要在初始化时绘制一次，之后的动画都不会触发重绘操作。</p><h4 id="3-2-2-强制同步布局问题">3.2.2 强制同步布局问题</h4><p>在同一个函数内，修改元素后又获取元素的位置时会触发强制同步布局，影响渲染性能。</p><p>强制同步布局会使js强制将【计算样式】和【布局(重排)】操作提前到当前函数任务中，这样会导致每次运行时执行一次【计算样式】和【重排】，这样一定会影响页面渲染性能，而正常情况下【计算样式】和【重排】操作会在函数结束后统一执行。</p><h4 id="3-2-3-如何减少重排与重绘">3.2.3 如何减少重排与重绘</h4><ol><li>脱离文档流(绝对定位、固定定位)，脱离文档流的元素进行重排不会影响到其他元素。</li><li>图片渲染时增加宽高属性，宽高固定后，图片不会根据内容动态改变高度，便不会触发重排。</li><li>尽量用CSS3动画，CSS3动画能最大程度减少重排与重绘。</li><li>使用will-change: transform;将元素独立为一个单独的图层。（定位、透明、transform、clip都会产生独立图层）。</li></ol><h3 id="3-3-静态文件优化策略">3.3 静态文件优化策略</h3><h4 id="3-3-1-图片优化">3.3.1 图片优化</h4><h5 id="3-3-1-1-图片格式">3.3.1.1 图片格式</h5><ol><li><code>jpg(jpeg)</code>：适合色彩丰富的图、Banner图。不适合：图形文字、图标、不支持透明度。</li><li><code>png</code>：适合纯色、透明、图标，支持纯透明和半透明。不适合色彩丰富图片，因为无损储存会导致储存体积大于jpeg。</li><li><code>gif</code>：适合动画、可以动的图标。支持纯透明但不支持半透明，不适合色彩丰富的图片。埋点信息通常也会使用gif发送，因为1x1的gif图发送的网络请求比普通的get请求要小一些。</li><li><code>webp</code>：支持纯透明和半透明，可以保证图片质量和较小的体积，适合Chrome和移动端浏览器。不适合其他浏览器。</li><li><code>svg</code>：矢量格式，大小非常小，但渲染成本过高，适合小且色彩单一的图标。</li></ol><h5 id="3-3-1-2-优化策略">3.3.1.2 优化策略</h5><ul><li>减少图片资源的尺寸和大小，节约用户流量。</li><li>设置<code>alt=”xxx”</code>属性，图像无法显示时会显示alt内容。</li><li>图片懒加载， <code>loading=”lazy”</code>为原生，建议使用<code>IntersectionObserver</code>自己做懒加载。</li><li>不同环境加载不同尺寸和像素的图片srcset与sizes的使用。</li><li>采用渐进式加载 先加载占位图，然后加载模糊小图，最后加载真正清晰的图。</li><li>使用Base64URL 减少图片请求数。</li><li>采用雪碧图合并图片，减少请求数。</li></ul><h4 id="3-3-2-HTML优化">3.3.2 HTML优化</h4><ul><li>语义化HTML，代码简洁清晰，利于SEO，便于开发维护。</li><li>减少HTML嵌套关系，减少DOM节点数量。</li><li>提前声明字符编码，让浏览器快速确定如何渲染网页内容<code>&lt;html lang=&quot;en&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;</code>。</li><li>删除多余空格、空行、注释、无用属性。</li><li>减少iframe，子iframe会阻塞父级的onload事件。可以使用js动态给iframe赋值，就能解决这个问题。</li><li>避免table布局。</li></ul><h4 id="3-3-3-CSS优化">3.3.3 CSS优化</h4><ul><li>减少伪类选择器，减少选择器层数、减少通配符选择器、减少正则选择器。</li><li>避免css表达式<code>background-color: expression(...)</code>。</li><li>删除空格、空行、注释、减少无意义的单位、css压缩。</li><li>css外链，能走缓存。</li><li>添加媒体字段，只加载有效的css文件。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./small.css&quot; media=&quot;screen and (max-width:600px)&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./big.css&quot; media=&quot;screen and (min-width:601px)&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li>使用<code>css contain</code>属性，能控制对应元素是否根据子集元素的改变进行重排。</li><li>减少<code>@import</code>使用，因为它使用串行加载。</li></ul><h4 id="3-3-4-JS优化">3.3.4 JS优化</h4><ul><li>通过script的<code>async</code>、<code>defer</code>属性异步加载，不阻塞DOM渲染。</li><li>减少DOM操作，缓存访问过的元素。</li><li>不直接操作真实DOM，可以先修改，然后一次性应用到DOM上。（虚拟DOM、DOM碎片节点）。</li><li>使用webworker解决复杂运算，避免复杂运算阻塞主线程，webworker线程位于渲染进程。</li><li>图片懒加载，使用<code>IntersectionObserver</code>实现。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.gif&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;./01.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.gif&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;./02.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.gif&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;./03.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.gif&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;./04.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.gif&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;./05.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.gif&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;./06.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.gif&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;./07.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.gif&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;./08.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.gif&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;./09.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.gif&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;./10.jpg&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> intersectionObserver = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">changes</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        changes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (item.<span class="property">intersectionRatio</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            intersectionObserver.<span class="title function_">unobserve</span>(item.<span class="property">target</span>)</span></span><br><span class="line"><span class="language-javascript">            item.<span class="property">target</span>.<span class="property">src</span> = item.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">src</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> domImgList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      domImgList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">domImg</span>) =&gt;</span> intersectionObserver.<span class="title function_">observe</span>(domImg));</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>虚拟滚动</li><li>使用<code>requestAnimationFrame</code>来做动画，使用<code>requestIdleCallback</code>来进行空闲时的任务处理。</li><li>尽量避免使用eval，性能差。</li><li>使用事件委托，能减少事件绑定个数。事件越多性能越差。</li><li>尽量使用<code>canvas</code>、<code>css3</code>动画。</li><li>通过chrome覆盖率（Coverage）工具排查代码中未使用过的代码并将其删除。</li><li>通过chrome性能（Performance）工具查看每个函数的执行性能并优化。</li></ul><h4 id="3-3-5-字体优化">3.3.5 字体优化</h4><p><code>FOUT</code>(Flash of Unstyled Text）等待一段时间，如果没加载完成，先显示默认。加载 后再进行切换。</p><p><code>FOIT</code>(F1ash of Invisib1e Text） 字体加载完毕后显示，加载超时降级系统字体（白屏）。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: <span class="string">&#x27;hagan&#x27;</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./font.ttc&#x27;</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-display</span>: swap;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* b1ock 35 内不显示，如果没加载完毕用默认的 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* swap 显示老字体 在替换*/</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* fa11back 缩短不显示时间，如果没加载完毕用默认的，和b1ock类似*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      /* optional 替换可能用字体 可能不替换*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">article</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: hagan;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span>ABC abc<span class="tag">&lt;/<span class="name">article</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-浏览器储存优化策略">3.4 浏览器储存优化策略</h3><h4 id="3-4-1-Cookie">3.4.1 Cookie</h4><p><code>cookie</code>在过期之前一直有效，最大储存大小为4k，限制字段个数，不适合大量的数据储存，每次请求会携带<code>cookie</code>，主要用来做身份校验。<br>优化方式：</p><ol><li>需要合理设置cookie有效期。</li><li>根据不同子域划分cookie来减少cookie传输。</li><li>静态资源域名和cookie域名采用不同域名，避免静态资源请求携带cookie。</li></ol><h4 id="3-4-2-LocalStorage">3.4.2 LocalStorage</h4><p>Chrome下最多储存5M，除非手动清除，否则一直存在。可以利用<code>localStorage</code>储存静态资源。比如储存网页的<code>.js</code>、<code>.css</code>，这样会使页面打开速度非常快。例如 <a href="https://m.baidu.com">百度</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;hagan&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showName</span>()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lib.baomitu.com/axios/0.26.1/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">cacheFile</span>(<span class="string">&#x27;/index.js&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">cacheFile</span> (url) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> fileContent = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(url)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (fileContent) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">eval</span>(fileContent)</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(url)</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">eval</span>(data)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(url, data)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-3-SessionStorage">3.4.3 SessionStorage</h4><p>会话级别储存，可用于页面间的传值。</p><h4 id="3-4-4-IndexDB">3.4.4 IndexDB</h4><p>浏览器的本地数据库，大小几乎无上限。</p><h3 id="3-5-其他优化策略">3.5 其他优化策略</h3><ul><li>关键资源个数越多，首次页面加载时间就会越长。</li><li>关键资源的大小，内容越小下载时间越短。</li><li>优化白屏，合理使用内联css、js。</li><li>预渲染，打包时进行预渲染，生成静态HTML文件，用户访问时直接返回静态HTML。</li><li>服务端渲染同构，加速首屏速度（耗费服务端资源），有利于SEO优化。首屏使用服务端渲染，后续交互使用客户端渲染。</li></ul><h3 id="3-6-使用PWA提高用户体验">3.6 使用PWA提高用户体验</h3><p>webapp用户体验差的一大原因是不能离线访问。用户粘性低的一大原因是无法保存入口，PWA就是为了解决webapp的用户体验问题而诞生的。使用PWA能令站点拥有快速、可靠、安全等特性。</p><ol><li><code>Web App Manifest</code> 将网站添加到电脑桌面、手机桌面，类似Native的体验。</li><li><code>Service Worker</code> 配合<code>Cache API</code>，能做到离线缓存各种内容。</li><li><code>Push API</code> 配合 <code>Notification API</code>，能做到类似Native的消息推送与实时提醒。</li><li><code>App Shell</code> 配合 <code>App Skeleton</code>，能做App壳与骨架屏。</li></ol><h1>二、优化小技巧实操</h1><h2 id="1-图片压缩">1.图片压缩</h2><h3 id="1-1-图片多级压缩">1.1 图片多级压缩</h3><p>目前从网上下载的图片主流格式是<code>JPG</code>或者<code>PNG</code>，当分辨率比较高的时候体积往往比较大，因此要想提高网站的速度就有必要将图片体积压缩，这里参考店长的推荐，无损压缩推荐<a href="https://tinypng.com/">Tinypng</a>，有损压缩推荐<a href="https://github.com/meowtec/Imagine/releases">imagine</a>。</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">TinyPNG</th><th>Imagine</th></tr></thead><tbody><tr><td style="text-align:left">特点</td><td style="text-align:center">无损压缩</td><td>有损压缩，以牺牲图像质量， 降低图像色彩来达到缩减图像大小的目的。</td></tr><tr><td style="text-align:left">优点</td><td style="text-align:center">能够完全保留图像色彩，不损伤图像质量</td><td>1. 压缩程度高，支持转<code>png</code>为<code>jpg</code>或<code>webp</code>，进一步减少图片大小 2. 软件支持一次处理多张图片，无上限，处理完成支持直接批量覆盖原文件或重命名</td></tr><tr><td style="text-align:left">缺点</td><td style="text-align:center">单次仅能上传20张图片，每张限制大小为5MB，无法处理更大图片。</td><td>PNG转其他格式为不可逆操作（指覆盖保存后），且可能反而会增加图片大小。</td></tr></tbody></table><p>在这里还给大家推荐一个非常实用的网站：<a href="https://imagestool.com/zh_CN/index.html">imagesTool</a></p><p><img src="https://source.fomal.cc/siteshot/imagestool.com.jpg" alt=""></p><p>这个网站不仅仅支持将<code>PNG</code>与<code>JPG</code>格式的图片批量（完全没有数量限制那种）转化为<code>webp</code>和<code>avif</code>（chrome推荐的一种压缩率更高的编码方式），而且还能改变图片的原始分辨率，甚至将图片压缩到指定的大小，下面演示了一张图压缩之路！</p><img src="https://s1.vika.cn/space/2022/10/25/c82f67799a524abc8cbaef90b8bf9131" alt="image-20221025131104569" style="zoom:50%;" /><p>我们选择了将<code>PNG</code>转化为<code>webp</code>格式，画质为<code>High</code>，图片规模缩小为<code>80%</code>，压缩率达到94%；而选择将<code>PNG</code>转化为<code>avif</code>格式，画质为<code>High</code>，图片规模缩小为<code>80%</code>，压缩率达到95%，这样下来我们可以把所有图片几乎都可以控制在<code>500KB</code>以下，而且肉眼观察画质没有明显的不同。</p><img src="https://s1.vika.cn/space/2022/10/25/6e15b7e6ad79406b8320108aaa8e62a9" alt="image-20221025130942155" style="zoom: 67%;" /><div class="note info flat"><p>使用建议:如果没有特别要求，直接使用Imagine进行有损压缩即可。虽然说是有损压缩，但是默认压缩会自主计算压缩程度，一般默认程度就能节省70%空间，且肉眼几乎发现不了图片压缩情况。同时我个人是比较推荐一步到位直接压缩成<code>webp</code>格式，虽然在一些未适配的浏览器（例如IE浏览器）上可能出现无法查看图片的情况，但是压缩率是真的高，图片一路下来压缩个<code>80%</code>毫无压力。如果对图片分辨率要求不太高或者图片分辨率原本就太高了，可以考虑缩小分辨率，结合上面几项，甚至可以压缩<code>90%</code>的大小！</p></div><h3 id="1-2-图片懒加载">1.2 图片懒加载</h3><p>图片懒加载是指只加载目前能看到及其附近的页面上的图片，有节省流量与提高性能的作用。Butterfly主题内置了图片懒加载的选项，在<code>_config.butterfly.yml</code>文件下将对应项设置为如下即可：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lazyload (圖片懶加載)</span></span><br><span class="line"><span class="comment"># https://github.com/verlok/vanilla-lazyload</span></span><br><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post 选择在哪些地方启用图片懒加载</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="comment"># 你自己喜欢的图片</span></span><br><span class="line">  <span class="attr">blur:</span> <span class="literal">true</span><span class="comment"># 模糊效果</span></span><br></pre></td></tr></table></figure><h2 id="2-字体二级压缩">2.字体二级压缩</h2><p>我们从网上下载的字体通常都是<code>TTF</code>格式，ttf(TrueTypeFont)是一种字库名称，是Apple公司和Microsoft公司共同推出的字体文件格式，也是最常用的格式之一，但是一些好看的字体往往体积都会很大，网站每次进去都要加载一个这么大的文件，速度肯定会很慢！例如下面这个筑紫A丸2.0的标准体ttf格式的字体文件，体积约为23MB。</p><p><img src="https://s1.vika.cn/space/2022/10/25/ca08a96314c5429b934b7ef977854650" alt="image-20221025131822607"></p><p>这部分参考：<a href="https://blog.csdn.net/littleduo/article/details/124563106">有效的压缩字体方法</a></p><p>一个有效的压缩方法是：<code>fonttools编码压缩+转woff2格式</code>二级压缩</p><h3 id="2-1-使用-fonttools-压缩字体文件">2.1 使用 fonttools 压缩字体文件</h3><p>需要 <code>Python</code> 环境，并已安装好 <code>pip</code>，使用 <code>pip</code> 来安装 <code>fonttools</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install fonttools</span><br></pre></td></tr></table></figure><p>下载已经整理好的字体编码列表文件<code>sc_unicode.txt</code> <a href="https://gist.githubusercontent.com/imaegoo/d64e5088b723c2e02c40985f55ff12db/raw/5ebd2ce49418c73459a9dfe050483409306a6c1d/sc_unicode.txt">点这里进行下载</a>。</p><p>将你要压缩的字体ttf文件和刚刚下载的sc_unicode.txt编码文件放进去同一个文件夹，进入到该文件夹的控制台如下命令然后回车</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyftsubset ZhuZiAWan-3.ttf --unicodes-file=sc_unicode.txt</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2022/10/25/922e9871848443c1aa79f7ca01c9bfe7" alt="image-20221025133032806"></p><p><img src="https://s1.vika.cn/space/2022/10/25/69bee2e71ec24c1eb6c4c9d6dd874f5a" alt="image-20221025133103786"></p><p>然后就会得到图片所示的subset结尾的编码压缩后的ttf文件，体检体积已经从23MB下降到3MB。</p><h3 id="2-2-利用CloudConvert将TTF格式转换成woff2-格式">2.2 利用CloudConvert将<code>TTF</code>格式转换成<code>woff2</code> 格式</h3><p>进去国外平台<a href="https://cloudconvert.com/">CloudConvert</a>（国内速度可能会慢一些），将TTF格式的字体文件转化为<code>woff2</code>格式</p><p><img src="https://s1.vika.cn/space/2022/10/25/10aa744585094dbf9914ac029500f51c" alt="image-20221025133728970"></p><p>最后压缩成从<code>23MB</code>的文件压缩成<code>1.5MB</code>，足足压缩了十几倍，压缩率十分高！</p><h2 id="3-css和js文件优化">3.css和js文件优化</h2><h3 id="3-1-压缩css与js文件">3.1 压缩css与js文件</h3><ul><li><p>如果是用<code>VSCODE</code>进行网站搭建的小伙伴，可以下载插件<a href="https://github.com/olback/es6-css-minify/tree/3.0">JS &amp; CSS Minifier (Minify)</a></p></li><li><p>该插件支持将<code>js</code>和<code>css</code>文件的格式进行压缩，降低文件体积</p></li><li><p>使用方法：安装插件后，在<code>js</code>和<code>css</code>文件界面右键，选择<code>Minify Document</code>，插件会生成一个文件名为<code>xxx.min.css</code>或者<code>xxx.min.js</code>的文件，这就是压缩后的文件，在引入的时候直接引用这个压缩后的文件即可。</p></li></ul><img src="https://s1.vika.cn/space/2022/10/25/1e054153b72f4f429dc3a9a6086ccdb5" alt="image-20221025134609440" style="zoom: 33%;" /><h3 id="3-2-gulp批量压缩">3.2 gulp批量压缩</h3><p>这是压缩全局静态资源的教程，可以参考店长的文章：</p><div class="tag link"><a class="link-card" title="使用gulp压缩博客静态资源" href="https://akilar.top/posts/49b73b87/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">使用gulp压缩博客静态资源</p><p class="url">https://akilar.top/posts/49b73b87/</p></div></a></div><h3 id="3-3-减少加载项">3.3 减少加载项</h3><p>当网站的东西多起来了之后，会越来越卡顿，这时候推荐以下几个优化方向：</p><ul><li>减少卡片的出场动画<code>wowjs</code>、<code>Live2D</code>、<code>canvas</code>元素等(其中Live2D是比较消耗资源的)</li><li>如果部分js和css文件只有部分页面需要引用，尽量不全局引用，同时删除空格、空行、注释、减少无意义的单位</li><li>css文件尽量添加media字段指定加载设备，js文件的引入可以加入 的 <code>async</code>、<code>defer</code> 属性异步加载，不阻塞 DOM 渲染</li></ul><h2 id="4-无服务器下的资源加速策略">4.无服务器下的资源加速策略</h2><h3 id="4-1-可用的免费CDN选择">4.1 可用的免费CDN选择</h3><p><strong>1.staticaly</strong></p><p>官网地址：<a href="https://www.staticaly.com">https://www.staticaly.com</a><br>轻松地从GitHub / GitLab / Bitbucket等加载您的项目 没有流量限制或限制。</p><p>文件通过超快速全球CDN提供。 在URL（不是分支）中使用特定标记或提交哈希。<br>根据URL永久缓存文件。 除master分支外，文件在浏览器中缓存1年。 具体用法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GitHub CDN</span><br><span class="line">https://cdn.staticaly.com/gh/:user/:repo/:tag/:file</span><br><span class="line">https://cdn.staticaly.com/gh/growvv/growvv.github.io/master/README.md</span><br><span class="line"></span><br><span class="line"># GitLab CDN</span><br><span class="line">https://cdn.staticaly.com/gl/:user/:repo/:tag/:file</span><br><span class="line"></span><br><span class="line"># Bitbucket CDN</span><br><span class="line">https://cdn.staticaly.com/bb/:user/:repo/:tag/:file</span><br><span class="line"></span><br><span class="line"># WordPress CDN</span><br><span class="line">https://cdn.staticaly.com/wp/c/:version/wp-includes/:file  </span><br><span class="line">https://cdn.staticaly.com/wp/p/:plugin_name/:version/:file  </span><br><span class="line">https://cdn.staticaly.com/wp/t/:theme_name/:version/:file</span><br><span class="line"></span><br><span class="line"># Imgpx CDN</span><br><span class="line">https://cdn.staticaly.com/img/:image_url</span><br><span class="line"></span><br><span class="line"># Favicons CDN</span><br><span class="line">https://cdn.staticaly.com/favicons/:favicon_url</span><br></pre></td></tr></table></figure><p><strong>2.githack</strong></p><p>直接从GitHub，Bitbucket或GitLab提供原始文件<br>官网地址：<a href="https://liubing.me/goto/http://raw.githack.com">http://raw.githack.com/</a> 具体用法和上面的<code>staticaly</code>很类似</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Github CDN</span><br><span class="line">//主分支</span><br><span class="line">https://rawcdn.githack.com/liub1934/LB-Blog/master/wp-content/themes/Memory/emoji/xiaodianshi/baiyan.png</span><br><span class="line"></span><br><span class="line">//版本分支</span><br><span class="line">https://rawcdn.githack.com/liub1934/LB-Blog/8806f440d3f9a7cc3e6125d7d75564e40262c6a8/wp-content/themes/Memory/emoji/xiaodianshi/baiyan.png</span><br></pre></td></tr></table></figure><p><strong>3.TianliCDN</strong></p><p><a href="https://tianli-blog.club/jsd/">https://tianli-blog.club/jsd/</a></p><p>轻量级私人CDN，申请见：<a href="https://tianli-blog.club/jsd/">https://tianli-blog.club/jsd/</a></p><p>4.UNPKG</p><p>见：<a href="https://unpkg.com/">https://unpkg.com/</a></p><h3 id="4-2-免费图床推荐">4.2 免费图床推荐</h3><ol><li><p>目前我是用的Github公共仓库+Vercel部署加速，速度还可以，关键是支持增量更新和自动部署，不过前期的配置比较麻烦点，你也可以选用Github公共仓库+Cloudflare部署加速，速度和Vercel接近。</p></li><li><p>大概步骤就是建立一个公共仓库，把你本地的图片推上这个仓库，然后将这个仓库部署托管于Vercel，再用一个二级域名绑定这个部署，那就可以通过二级域名+路径的方式访问到图片与资源了。每次仓库更新导致指定分支更新，都会触发Vercel重新部署，实现自动化流程。（这部分教程以后有机会详细写）</p></li><li><p>如果不想折腾或者只想存少量不太重要的图片，那么完全可以用公共的免费图床，下面列举了一些免费的图床：</p><ul><li><p><a href="https://smms.app/">SMMS</a></p></li><li><p><a href="https://www.superbed.cn/">聚合图床</a></p></li><li><p><a href="https://www.hualigs.cn/">遇见图床</a></p></li><li><p><a href="https://postimages.org/">PostImage</a></p></li><li><p><a href="https://imgse.com/">路过图床</a></p></li><li><p><a href="https://www.imgurl.org/">imgURL</a></p></li><li><p><a href="https://dash.cloudflare.com/">Cloudflare Pages</a></p></li><li><p><a href="https://imgbox.com/">imgbox</a></p></li><li><p><a href="https://pic.iqy.ink/upload">Lsky Pro</a></p></li><li><p><a href="https://upload.cc/">Upload.cc</a></p></li><li><p><a href="https://imagelol.com/">imagelol</a></p></li></ul></li></ol><h3 id="4-3-域名绑定的好处">4.3 域名绑定的好处</h3><p>目前Vercel的域已经被GFW墙了，如果想用Vercel托管网站又想在国内访问又不想科学上网，只能绑定国内域名，还有想用Vercel来进行资源加速也必须是有国内域名的，同时域名还可以拥有自己的域名邮箱与网站标识符，总之域名还是很有用的。对于静态网站来说你可以没有服务器，但是你不能没有域名。</p><h3 id="4-4-托管平台的选择">4.4 托管平台的选择</h3><p>目前能够托管静态网站的平台有以下几个</p><ol><li><a href="https://vercel.com/">Vercel</a>（不限量、速度较快） 推荐指数：🌟🌟🌟🌟🌟</li><li><a href="https://www.cloudflare.com/">Cloudflare</a>（不限量、速度还可以） 推荐指数：🌟🌟🌟🌟</li><li><a href="https://www.4everland.org/">4EVERLAND</a>（流量限制100GB、速度还可以、适合做备用线路） 推荐指数：🌟🌟🌟</li><li><a href="https://www.netlify.com/">Netlify</a>（流量限制100GB、速度还可以、适合做备用线路） 推荐指数：🌟🌟🌟</li><li><a href="https://pages.github.com/">Github Pages</a>（不限量、速度较慢） 推荐指数：🌟🌟</li><li><a href="https://gitee.com/">Gitee Pages</a>（不限量、速度还可以、但是Gitee与国外平台兼容性差） 推荐指数：🌟🌟</li><li>还有其他的例如<a href="https://docs.gitlab.com/ee/user/project/pages/">GitLab Pages</a>等就不说了，估计没啥人用</li></ol><h2 id="5-实用工具">5.实用工具</h2><h3 id="5-1-Lighthouse">5.1 Lighthouse</h3><p>Lighthouse 是一个网站性能测评工具， 它是 Google Chrome 推出的一个开源自动化工具，能够对 PWA 和网页多方面的效果指标进行评测，并给出最佳实践的建议以帮助开发者改进网站的质量。它的使用方法也非常简单，我们只需要提供一个要测评的网址，它将针对此页面运行一系列的测试，然后生成一个有关页面性能的报告。通过报告我们就可以知道需要采取哪些措施来改进应用的性能和体验。</p><p>在高版本（应该是 &gt;= 60）的 Chrome 浏览器中，Lighthouse 已经直接集成到了调试工具 DevTools 中了，因此不需要进行任何安装或下载。按 F12 打开开发者工具，可以看到在 console、security 等选项后面有一个 Audits （安装了lighthouse插件或者是高版本的谷歌浏览器可能显示的是 lighthouse）选项，选择该选项，然后点击 generate report 即可。</p><p><img src="https://s1.vika.cn/space/2022/10/25/d278a76bbd774b1d9912e74aa15b22c5" alt="image-20221025173341316"></p><p><img src="https://s1.vika.cn/space/2022/10/25/1d8b86f79de7449782b0c73e897edeb0" alt="image-20221025173705571"></p><p>使用 Lighthouse 对网站进行测评后，我们会得到一份评分报告，它包含了性能（Performance），访问无障碍（Accessibility），最佳实践（Best Practice），搜索引擎优化（SEO），PWA（Progressive Web App）五个部分：</p><h4 id="5-1-1-性能（Performance）">5.1.1 性能（Performance）</h4><p>性能评分的分值区间是0到100，如果出现0分，通常是在运行 Lighthouse 时发生了错误，满分100分代表了网站已经达到了98分位值的数据，而50分则是75分位值的数据。</p><p>影响评分的性能指标：性能测试结果会分成 Metrics，Diagnostic，Opportunities 三部分，但只有 Metrics 部分的指标项会对分数产生直接影响。</p><p>Lighthouse 会衡量以下 Metrics 性能指标项：</p><ul><li>首次内容绘制（First Contentful Paint）。即浏览器首次将任意内容（如文字、图像、canvas 等）绘制到屏幕上的时间点。</li><li>首次有效绘制（First Meaningful Paint）。衡量了用户感知页面的主要内容（primary content）可见的时间。对于不同的站点，首要内容是不同的，例如：对于博客文章，标题及首屏文字是首要内容，而对于购物网站来说，图片也会变得很重要。</li><li>首次 CPU 空闲（First CPU Idle）。即页面首次能够对输入做出反应的时间点，其出现时机往往在首次有效绘制完成之后。该指标目前仍处于实验阶段。</li><li>可交互时间（Time to Interactive）。指的是所有的页面内容都已经成功加载，且能够快速地对用户的操作做出反应的时间点。该指标目前仍处于实验阶段。</li><li>速度指标（Speed Index）。衡量了首屏可见内容绘制在屏幕上的速度。在首次加载页面的过程中尽量展现更多的内容，往往能给用户带来更好的体验，所以速度指标的值约小越好。</li><li>输入延迟估值（Estimated Input Latency）。这个指标衡量了页面对用户输入行为的反应速度，其基准值应低于 50ms。</li></ul><p>Metrics 部分的指标项会直接影响分数，可以作为我们的主要参考点。</p><p>另外的两部分中， <strong>Opportunities</strong> 指的是优化机会，它提供了详细的建议和文档，来解释低分的原因，帮助我们具体进行实现和改进。<strong>Diagnostics</strong> 指的是现在存在的问题，为进一步改善性能的实验和调整给出了指导。这两者不会纳入分数的计算。</p><p>每一项性能指标对评分的贡献都有其计算逻辑，Lighthouse 会将原始的性能值映射成为 0-100 之间的数字。</p><p>例如，FMP（First Meaningful Paint）的原始值是从页面初始化开始到主要内容渲染成功的耗时，根据真实站点的数据，顶级性能的站点的 FMP 值约为 1220ms，这个值会被映射成 Lighthouse 的 99 分。</p><p>针对不同的评分，Lighthouse 用了不同的颜色进行标注，分值区间和颜色的对应关系如下：</p><ul><li>0 - 49（慢）：红色</li><li>50 - 89（平均值）： 橙色</li><li>90 - 100（快）： 绿色</li></ul><h4 id="5-1-2-访问无障碍（Accessibility）">5.1.2 访问无障碍（Accessibility）</h4><p>访问无障碍评分的分值由相关指标的加权平均值计算而来。可以在<a href="https://www.cnblogs.com/ypSharing/p/15793767.html#gid=0">评分详情</a>查阅每项指标的具体权重。同理，较大权重的指标项对分数的影响较大。</p><p>无障碍性的每个指标项测试结果为pass或者fail，与性能指标项的计算方式不同，当页面只是部分通过某项指标时，页面的这项指标将不会得分。例如，如果页面中的一些元素有屏幕阅读器友好的命名，而其他的元素没有，那么这个页面的 screenreader-friendly-names 指标项得分为0。</p><h4 id="5-1-3-最佳实践（优化）（Best-Practice）">5.1.3 最佳实践（优化）（Best Practice）</h4><p>最佳实践评分的分数区间为0-100。影响这项评分的指标项的权重都是相同的。</p><p>比如：推荐使用 https，跨域的跳转链接需要使用 rel 标识，不能使用废弃的 API等等。</p><h4 id="5-1-4-搜索引擎优化（SEO）">5.1.4 搜索引擎优化（SEO）</h4><p>比如：图片元素使用 alt 属性等等提高搜索引擎搜索排名，便于搜索引擎能找到你这个网站。</p><h4 id="5-1-5-PWA（Progressive-Web-App）">5.1.5 PWA（Progressive Web App）</h4><p>Lighthouse 使用 PWA 基准检查项列表（Baseline PWA Checklist）进行测评，测评结果将这些指标项分成了四个类别，共包含12个自动测试项和3个手动测试项，其中各个自动测试项的评分权重是相同的。PWA 的评测指标对我们来说非常重要，我们可以从这四个类别详细了解一下基准指标项。</p><ul><li><p><strong>快速可靠：</strong></p><ol><li>页面在移动网络条件下能够快速加载。</li><li>在离线条件下页面能够返回状态码200。这里我们可以通过 Service Worker 来实现离线可用。</li><li>start_url 在离线条件下返回状态码200。start_url 是前面章节我们提到过的 manifest.json 中的一个属性，它指定了用户打开该 PWA 时加载的 URL。</li></ol></li><li><p><strong>可安装：</strong></p><ol><li>始终使用 HTTPS。</li><li>注册 Service Worker 来缓存页面以及 start_url。</li><li>使用 manifest 文件来实现安装 PWA 的需求，浏览器能够主动通知用户将应用添加到桌面，增加留存率。</li></ol></li><li><p><strong>PWA 优化：</strong></p><ol><li>将 HTTP 流量重定向到 HTTPS。</li><li>配置自定义启动画面。</li><li>设置地址栏主题颜色。</li><li>页面内容针对视口大小自适应，对移动用户的展示更友好。</li><li>使用了 <meta name="viewport"> 标签，并设置了 width 或 initial-scale 属性。</li><li>当 JavaScript 文件不可用时，提供降级措施，页面能显示基本内容而不出现白屏。</li></ol></li><li><p><strong>手动测试项：</strong></p><ol><li>站点跨浏览器可用，如主流浏览器 Chrome, Edge, Firefox 及 Safari 等。</li><li>页面间切换流畅，即使在较差的网络环境下，切换动画也应该简洁顺畅，这是提高用户感知体验的关键。</li><li>保证每个页面都有独一无二的 URL，能够在新的浏览器窗口打开，且方便在社交媒体上进行分享。</li></ol></li></ul><p>除了上述基准指标项之外，为了让 PWA 的体验更加完美，还有一些 Lighthouse 未实现检查的进阶指标，也就是可以作为示范性参考的 PWA 的指标，比如用户体验、缓存、推送通知等等。</p><h3 id="5-2-灵雀监控">5.2 灵雀监控</h3><p>灵雀应用监控平台最国内老牌知名免费网站统计51LA网站统计旗下的一个 Web 性能与 bug 监控工具平台，发布后在站长圈内也有一些较好的评价，访问地址：<a href="https://perf.51.la/">https://perf.51.la</a>。51LA灵雀应用监控平台，专注于帮您及时发现异常问题，帮助运营人员发现网站风险，协助开发者修复网页 bug，从而提升用户体验。产品面向产品，运营以及开发人员作为网站性能及异常信息收集工具。开发人员可以通过页面统计获取用户平均的页面统计信息和网页 Performance 的各个性能指标进行分析，如DNS 解析时间，TTFB、服务器响应时间、白屏时间、页面完全加载时长等是否达标等判断。灵雀应用监控平台为开发人员提供了包含程序异常收集、性能分析、资源异常分析、页面外链跳转分析、可疑脚本/iframe 监控等网站优化和用户体验改进所需的信息。</p><p><strong>特点：</strong></p><ul><li>大家是否有遇到过下面这些情况：</li><li>网站打开速度慢找不到原因；</li><li>部分访客无法打开网站又不能及时得到反馈；</li><li>网站突然无流量或被k 却无从查起起因；</li></ul><p><strong>1.异常分析，精准定位</strong></p><p><img src="https://s1.vika.cn/space/2022/10/25/2b1d0d3c50394c688f8046819584f7d9" alt="image-20221025174453208"></p><p>实时监控网站发生的程序错误、网络请求异常、资源加载异常等潜在问题，精准采集错误上报的页面、错误发生时间、UA等详细的用户设备数据，帮您快速定位异常，提高debug效率。</p><p><strong>2.性能监测，定向优化</strong></p><p><img src="https://s1.vika.cn/space/2022/10/25/ca16cee5817742389e20d66a9f11df46" alt="image-20221025174556202"></p><p>采用51LA V6网站统计的多维分析技术，详细展示分析网站性能加载状况，确定网站体验优化方向。</p><p><strong>3.外链监控，规避暗链</strong></p><p><img src="https://s1.vika.cn/space/2022/10/25/52897c1a5b2042ef8bf27ae299b1ea0c" alt="image-20221025174628427"></p><p>提供24小时全方位监控站内外链的功能，定位异常跳转，助您快速识别暗链链接，降低网站被k风险，提升网站安全性。</p>]]></content>
    
    
    <summary type="html">网站性能优化的一些小技巧</summary>
    
    
    
    <category term="魔改教程" scheme="https://www.fomal.cc/categories/%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://www.fomal.cc/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://www.fomal.cc/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>博客魔改教程总结(一)</title>
    <link href="https://www.fomal.cc/posts/eec9786.html"/>
    <id>https://www.fomal.cc/posts/eec9786.html</id>
    <published>2022-10-23T14:48:03.000Z</published>
    <updated>2022-10-30T14:48:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><b>魔改前必看（我当你们都懂了，太细节的就不写在教程中了🤣🤣🤣）：</b></p><ol><li>博客魔改有风险，如果博客魔改出问题了又没有备份，可通过此项目查看基础源码进行<strong>回滚</strong>：<a href="https://github.com/ccknbc-actions/blog-butterfly">ccknbc-actions/blog-butterfly</a>。</li><li>这部分魔改基本上都是大佬们造好的轮子，我按照大佬们的轮子结合自己的喜好进行魔改的，具体见我友人帐第一个栏目大佬们的网站，本处仅做一个总结，如有侵权请联系删除。</li><li>鉴于每个人的根目录名称都不一样，本帖<strong>博客根目录</strong>一律以<code>[BlogRoot]</code>指代。</li><li>本帖涉及魔改源码的内容，会使用<strong>diff代码块</strong>标识，复制时请<strong>不要忘记删除</strong>前面的<code>+、-</code>符号。</li><li>因为<code>.pug</code>和<code>.styl</code>以及<code>.yml</code>等对缩进要求较为严格，请尽量<strong>不要使用记事本等无法提供语法高亮的文本编辑器</strong>进行修改。</li><li>本帖基于<code>Butterfly主题</code>进行魔改方案编写，因此请读者优先掌握<a href="https://butterfly.js.org/">Butterfly主题官方文档</a>的内容后再来进行魔改。</li><li>魔改会过程常常引入<strong>自定义的css与js文件</strong>，方法见<a href="https://b.leonus.cn/2022/custom.html">Hexo博客添加自定义css和js文件</a>(太懒了不想自己写)</li></ol></div><h2 id="Live2D教程（店长）">Live2D教程（店长）</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/5b8f515f/">Live2d Widget</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><img src="https://s1.vika.cn/space/2022/10/29/371fa9a6b1d94a218c3136b8af140ab7" alt="image-20221029203004407" style="zoom:50%;" /></div></div>目前只推荐这个(因为消耗资源较少)，这是博客自带的看板娘，这孩子不会说话也不能换装，只会跟着你的鼠标晃动脑袋，不过有几款超可爱。<h3 id="安装">安装</h3><ol><li><p>在Hexo根目录<code>[Blogroot]</code>下打开终端，输入以下指令安装必要插件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></li><li><p>打开站点配置文件<code>[Blogroot]\config.yml</code><br>搜索live2d,按照如下注释内容指示进行操作。<br>如果没有搜到live2d的配置项，就直接把以下内容复制到最底部。</p> <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#开关插件版看板娘</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://npm.elemecdn.com/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span> <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://npm.elemecdn.com/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span> <span class="comment">#控制看板娘位置</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span> <span class="comment">#控制看板娘大小</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span> <span class="comment">#控制看板娘大小</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span> <span class="comment"># 手机中是否展示</span></span><br></pre></td></tr></table></figure></li><li><p>完成后保存修改，在Hexo根目录下运行指令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>之所以必须要使用<code>hexo clean</code>是因为我们需要清空缓存重新生成静态页面，不然看板娘没被加入生成的静态页面里，是不会出现的。</p></li></ol><h3 id="更换">更换</h3><ol><li><p>同样是在Hexo根目录<code>[Blogroot]</code>下，打开终端，选择想要的看板娘进行安装，例如我这里用到的是 <code>live2d-widget-model-koharu</code>，一个Q版小正太。其他的模型也可以在<a href="https://huaji8.top/post/live2d-plugin-2.0/">模型预览</a>里查看以供选择。</p></li><li><p>输入指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-koharu</span><br></pre></td></tr></table></figure></li><li><p>然后在站点配置文件<code>[Blogroot]\_config.yml</code>里找到<code>model</code>项修改为期望的模型</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">model:</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">live2d-widget-model-koharu</span></span><br><span class="line">  <span class="comment"># 默认为live2d-widget-model-wanko</span></span><br></pre></td></tr></table></figure></li><li><p>之后按部就班的运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>就能在<code>localhost:4000</code>上查看效果了。</p></li></ol><h3 id="卸载看板娘">卸载看板娘</h3><p>卸载插件和卸载模型的指令都是通过npm进行操作的。在博客根目录<code>[Blogroot]</code>打开终端，输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d <span class="comment">#卸载看板娘插件</span></span><br><span class="line">npm uninstall live2d-widget-model-modelname <span class="comment">#卸载看板娘模型。记得替换modelname为看板娘名称</span></span><br></pre></td></tr></table></figure><p>卸载后为了保证配置项不出错，记得把<code>[Blogroot]\_config.yml</code>里的配置项给注释或者删除掉。</p>              </div>            </details><h2 id="violet留言板（店长）">violet留言板（店长）</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/e2d3c450/">信笺样式留言板</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><img src="https://s1.vika.cn/space/2022/10/29/bf7ee8c0c9ec41cb9bb0ed3d297d87b0" alt="image-20221029205141439" style="zoom:50%;" /></div></div><ol><li><p>在<code>[BlogRoot]</code>运行指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-envelope --save</span><br></pre></td></tr></table></figure></li><li><p>在站点配置文件<code>_config.yml</code><strong>或</strong>主题配置文件<code>_config.butterfly.yml</code>添加以下配置项</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># envelope_comment</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/e2d3c450/</span></span><br><span class="line"><span class="attr">envelope_comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#控制开关</span></span><br><span class="line">  <span class="attr">custom_pic:</span>      </span><br><span class="line">    <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/violet.jpg</span> <span class="comment">#信笺头部图片</span></span><br><span class="line">    <span class="attr">line:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/line.png</span> <span class="comment">#信笺底部图片</span></span><br><span class="line">    <span class="attr">beforeimg:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/before.png</span> <span class="comment"># 信封前半部分</span></span><br><span class="line">    <span class="attr">afterimg:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/after.png</span> <span class="comment"># 信封后半部分</span></span><br><span class="line">  <span class="attr">message:</span> <span class="comment">#信笺正文，多行文本，写法如下</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想问的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想说的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想吐槽的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哪怕是有什么想吃的，都可以告诉我哦~</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="string">自动书记人偶竭诚为您服务！</span> <span class="comment">#仅支持单行文本</span></span><br><span class="line">  <span class="attr">height:</span> <span class="comment">#1050px，信封划出的高度</span></span><br><span class="line">  <span class="attr">path:</span> <span class="comment">#【可选】comments 的路径名称。默认为 comments，生成的页面为 comments/index.html</span></span><br><span class="line">  <span class="attr">front_matter:</span> <span class="comment">#【可选】comments页面的 front_matter 配置</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">留言板</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h2 id="一图流教程">一图流教程</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><img src="https://s1.vika.cn/space/2022/11/02/e8dfc5cadcb14f33b072521dc374d4b0" alt="1667395334356" style="zoom:67%;" /></div></div><ol><li><p>在<code>[BlogRoot]\source</code>文件夹下新建一个文件夹<code>css</code>，该文件夹用于存放自定义的<code>css样式</code>，再新建一个名为<code>custom.css</code>，在里面写入以下代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 页脚与头图透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 白天模式遮罩透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式遮罩透明 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>[BlogRoot]\_config.butterfly.yml</code>文件中的<code>inject</code>配置项的<code>head</code>子项加入以下代码，代表引入刚刚创建的<code>custom.css</code>文件（这是相对路径的写法）</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>[BlogRoot]\_config.butterfly.yml</code>文件中的<code>index_img</code>和<code>footer_bg</code>配置项取消头图与页脚图的加载项避免冗余加载</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h2 id="页脚Github徽标（店长）">页脚Github徽标（店长）</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/e87ad7f8/">Add Github Badge</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><p><img src="https://s1.vika.cn/space/2022/10/29/fba1b4ef6ddd498fac62240e702590d3" alt="image-20221029205540493"></p></div></div><ol><li><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-footer-beautify --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加（这是我的配置）</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># footer_beautify</span></span><br><span class="line"><span class="comment"># 页脚计时器：[Native JS Timer](https://akilar.top/posts/b941af/)</span></span><br><span class="line"><span class="comment"># 页脚徽标：[Add Github Badge](https://akilar.top/posts/e87ad7f8/)</span></span><br><span class="line"><span class="attr">footer_beautify:</span></span><br><span class="line">  <span class="attr">enable:</span></span><br><span class="line">    <span class="attr">timer:</span> <span class="literal">true</span> <span class="comment"># 计时器开关</span></span><br><span class="line">    <span class="attr">bdage:</span> <span class="literal">true</span> <span class="comment"># 徽标开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="comment">#屏蔽页面</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">footer-wrap</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 计时器部分配置项（看你喜欢哪个，最好下载下来放到自己的项目中不然会增加我网站的负载）</span></span><br><span class="line">  <span class="comment"># 这是我的  </span></span><br><span class="line">  <span class="comment"># runtime_js: https://www.fomal.cc/static/js/runtime.js</span></span><br><span class="line">  <span class="comment"># runtime_css: https://www.fomal.cc/static/css/runtime.min.css </span></span><br><span class="line">  <span class="comment"># 这是店长的 </span></span><br><span class="line">  <span class="attr">runtime_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.js</span></span><br><span class="line">  <span class="attr">runtime_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.css</span></span><br><span class="line">  <span class="comment"># 徽标部分配置项</span></span><br><span class="line">  <span class="attr">swiperpara:</span> <span class="number">0</span> <span class="comment">#若非0，则开启轮播功能，每行徽标个数</span></span><br><span class="line">  <span class="attr">bdageitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://hexo.io/</span> <span class="comment">#徽标指向网站链接</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo</span> <span class="comment">#徽标API</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">博客框架为Hexo_v6.2.0</span> <span class="comment">#徽标提示语</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://butterfly.js.org/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">主题版本Butterfly_v4.3.1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://vercel.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-Vercel-brightgreen?style=flat&amp;logo=Vercel</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用多线部署，主线路托管于Vercel</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://dashboard.4everland.org/</span></span><br><span class="line">    <span class="comment"># https://img.shields.io/badge/Hosted-4EVERLAND-3FE2C1?style=flat&amp;logo=IPFS</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-4EVERLAND-22DDDD?style=flat&amp;logo=IPFS</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用多线部署，备用线路托管于4EVERLAND</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://github.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站项目由Github托管</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">http://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span></span><br><span class="line">  <span class="attr">swiperbdage_init_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify/lib/swiperbdage_init.min.js</span></span><br></pre></td></tr></table></figure></li><li><p>参数释义</p></li></ol><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">priority</td><td style="text-align:left">number</td><td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td style="text-align:left">enable.timer</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】计时器控制开关</td></tr><tr><td style="text-align:left">enable.bdage</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】徽标控制开关</td></tr><tr><td style="text-align:left">enable_page</td><td style="text-align:left">path</td><td style="text-align:left">【可选】填写想要应用的页面,如根目录就填’/‘,分类页面就填’/categories/‘。若要应用于所有页面，就填<code>all</code>，默认为<code>all</code></td></tr><tr><td style="text-align:left">exclude</td><td style="text-align:left">path</td><td style="text-align:left">【可选】填写想要屏蔽的页面，可以多个。仅当enable_page为’all’时生效。写法见示例。原理是将屏蔽项的内容逐个放到当前路径去匹配，若当前路径包含任一屏蔽项，则不会挂载。</td></tr><tr><td style="text-align:left">layout.type</td><td style="text-align:left">id/class</td><td style="text-align:left">【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td style="text-align:left"><a href="http://layout.name">layout.name</a></td><td style="text-align:left">text</td><td style="text-align:left">【必选】挂载容器名称</td></tr><tr><td style="text-align:left">layout.index</td><td style="text-align:left">0和正整数</td><td style="text-align:left">【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td style="text-align:left">runtime_js</td><td style="text-align:left">url</td><td style="text-align:left">【必选】页脚计时器脚本，可以下载上文填写示例的链接，参照注释和<a href="https://akilar.top/posts/b941af/">教程：Native JS Timer</a>自行修改。</td></tr><tr><td style="text-align:left">runtime_css</td><td style="text-align:left">url</td><td style="text-align:left">【可选】自定义样式，预留开发者接口，可自行下载。</td></tr><tr><td style="text-align:left">swiperpara</td><td style="text-align:left">number</td><td style="text-align:left">【可选】若非零，则开启轮播功能，此项表示每行最多容纳徽标个数，用来应对徽标过多显得页脚拥挤的问题</td></tr><tr><td style="text-align:left">bdageitem.link</td><td style="text-align:left">url</td><td style="text-align:left">【可选】页脚徽标指向的网站链接</td></tr><tr><td style="text-align:left">bdageitem.shields</td><td style="text-align:left">url</td><td style="text-align:left">【必选】页脚徽标对应的API，API具体写法示例参照<a href="https://akilar.top/posts/e87ad7f8/">教程Add Github Badge</a></td></tr><tr><td style="text-align:left">bdageitem.message</td><td style="text-align:left">text</td><td style="text-align:left">【可选】页脚徽标悬停时显示的信息</td></tr><tr><td style="text-align:left">swiper_css</td><td style="text-align:left">url</td><td style="text-align:left">【可选】swiper的依赖</td></tr><tr><td style="text-align:left">swiper_js</td><td style="text-align:left">url</td><td style="text-align:left">【可选】swiper的依赖</td></tr><tr><td style="text-align:left">swiperbdage_init_js</td><td style="text-align:left">url</td><td style="text-align:left">【可选】swiper初始化方法</td></tr></tbody></table>              </div>            </details><h2 id="首页分类磁贴新版-店长">首页分类磁贴新版(店长)</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/a9131002/">Categories Magnet</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><p><img src="https://s1.vika.cn/space/2022/10/29/919cb5b7aeec41df874fce3bfffedcad" alt="image-20221029215332417"></p></div></div><ol><li><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-categories-card --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加以下代码，注意要根据他的默认描述排序改为你自己对应的分类名字：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-categories-card</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/a9131002/</span></span><br><span class="line"><span class="attr">categoryBar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">column:</span> <span class="string">odd</span> <span class="comment"># odd：3列 | even：4列</span></span><br><span class="line">  <span class="attr">row:</span> <span class="number">1</span> <span class="comment">#显示行数，默认两行，超过行数切换为滚动显示</span></span><br><span class="line">  <span class="attr">message:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">Ubuntu指南</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover1.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">玩转Win10</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover2.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">长篇小说连载</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover3.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">个人日记</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover4.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">诗词歌赋</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover5.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">杂谈教程</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover6.webp</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-categories-card@1.0.0/lib/categorybar.css</span></span><br></pre></td></tr></table></figure></li><li><p>参数释义</p></li></ol><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">priority</td><td style="text-align:left">number</td><td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td style="text-align:left">enable</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】控制开关</td></tr><tr><td style="text-align:left">enable_page</td><td style="text-align:left">path/all</td><td style="text-align:left">【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’/‘,分类页面就填’/categories/‘。若要应用于所有页面，就填’all’，默认为’/‘</td></tr><tr><td style="text-align:left">layout.type</td><td style="text-align:left">id/class</td><td style="text-align:left">【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td style="text-align:left"><a href="http://layout.name">layout.name</a></td><td style="text-align:left">text</td><td style="text-align:left">【必选】挂载容器名称</td></tr><tr><td style="text-align:left">layout.index</td><td style="text-align:left">0和正整数</td><td style="text-align:left">【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td style="text-align:left">column</td><td style="text-align:left">odd/even</td><td style="text-align:left">【可选】显示列数，考虑到比例问题，只提供3列和4列，odd为3列， even为4列</td></tr><tr><td style="text-align:left">row</td><td style="text-align:left">number</td><td style="text-align:left">【可选】显示行数，默认两行，超过行数切换为滚动显示</td></tr><tr><td style="text-align:left">message.descr</td><td style="text-align:left">text</td><td style="text-align:left">分类描述,需要和你自己的文章分类一一对应。</td></tr><tr><td style="text-align:left">message.cover</td><td style="text-align:left">url</td><td style="text-align:left">分类背景,需要和你自己的文章分类一一对应。</td></tr><tr><td style="text-align:left">custom_css</td><td style="text-align:left">url</td><td style="text-align:left">【可选】自定义样式，会替换默认的css链接，可以下载文档给出的cdn链接后自主修改</td></tr></tbody></table>              </div>            </details><h2 id="首页分类磁贴1-0（小冰）">首页分类磁贴1.0（小冰）</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://zfe.space/post/hexo-magnet.html">教程：hexo-magnet 插件 1.0</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><p><img src="https://s1.vika.cn/space/2022/10/30/77f6f55adc0e476fb759ad0ec3b0704d" alt="image"></p></div></div><p>这个插件主要实现了以下功能：</p><ol><li>自定义 tags 或 categories 的排列和展示</li><li>自定义 tags 或 categories 的展示图标，名称</li><li>自定义排列的行数，默认 2 行</li></ol><p><b>教程：</b></p><ol><li><p>在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-magnet --save</span><br></pre></td></tr></table></figure><p>注意，一定要加 <code>--save</code>，不然本地预览的时候可能不会显示！！！</p></li><li><p>在网站配置文件<code>_config.yml</code>新增以下项 (注意不是主题配置文件)，这里的分类名字必须和你文章的分类名字一一对应：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magnet:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  priority: 1</span><br><span class="line">  enable_page: /</span><br><span class="line">  <span class="built_in">type</span>: categories</span><br><span class="line">  devide: 2</span><br><span class="line">  display:</span><br><span class="line">    - name: 教程</span><br><span class="line">      display_name: 小冰の魔改教程</span><br><span class="line">      icon: 📚</span><br><span class="line">    - name: 游戏评测</span><br><span class="line">      display_name: 小冰の游戏评测</span><br><span class="line">      icon: 🎮</span><br><span class="line">    - name: 生活趣闻</span><br><span class="line">      display_name: 小冰の生活趣闻</span><br><span class="line">      icon: 🐱‍👓</span><br><span class="line">    - name: vue</span><br><span class="line">      display_name: 小冰の编程学习</span><br><span class="line">      icon: 👩‍💻</span><br><span class="line">    - name: 学习</span><br><span class="line">      display_name: 小冰の读书笔记</span><br><span class="line">      icon: 📒</span><br><span class="line">    - name: 随想</span><br><span class="line">      display_name: 小冰の胡思乱想</span><br><span class="line">      icon: 💡</span><br><span class="line">  color_setting:</span><br><span class="line">    text_color: black</span><br><span class="line">    text_hover_color: white</span><br><span class="line">    background_color: <span class="string">&quot;#f2f2f2&quot;</span></span><br><span class="line">    background_hover_color: <span class="string">&quot;#b30070&quot;</span></span><br><span class="line">  layout:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">id</span></span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height: auto&quot;&gt;&lt;div id=&quot;catalog_magnet&quot;&gt;$&#123;temple_html_item&#125;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  plus_style: <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>配置项的含义：</p><ul><li><p>enable</p><p>参数：true/false<br>含义：是否开启插件</p></li><li><p>enable_page</p><p>参数：/<br>含义：路由地址，如 / 代表主页。/me/ 代表自我介绍页等等</p></li><li><p>priority</p><p>参数：1<br>含义：插件的叠放顺序，数字越大，叠放约靠前。</p></li><li><p>type</p><p>参数：categories/tags<br>含义：选择筛选分类还是标签</p></li><li><p>devide</p><p>参数：2<br>含义：表示分隔的列数，2 表示分为两列展示</p></li><li><p>display</p><p>参数：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">教程</span> <span class="comment"># 这里是tags或者categories的名称</span></span><br><span class="line">  <span class="attr">display_name:</span> <span class="string">小冰の魔改教程</span> <span class="comment"># 这里是替换的名称</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">📚</span> <span class="comment"># 这里是展示的图标</span></span><br></pre></td></tr></table></figure><p>含义：配置项，可自行设置，按照设置的顺序展示</p></li><li><p>color_setting</p><p>参数：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">text_color:</span> <span class="string">black</span> <span class="comment"># 文字默认颜色</span></span><br><span class="line"><span class="attr">text_hover_color:</span> <span class="string">white</span> <span class="comment"># 文字鼠标悬浮颜色</span></span><br><span class="line"><span class="attr">background_color:</span> <span class="string">&quot;#f2f2f2&quot;</span> <span class="comment"># 文字背景默认颜色</span></span><br><span class="line"><span class="attr">background_hover_color:</span> <span class="string">&quot;#b30070&quot;</span> <span class="comment"># 文字背景悬浮颜色</span></span><br></pre></td></tr></table></figure><p>含义：颜色配置项，可自行设置</p></li><li><p>layout</p><p>参数：type; （class&amp;id）<br>参数：name;<br>参数：index；（数字）<br>含义：如果说 magnet 是一幅画，那么这个 layout 就是指定了哪面墙来挂画<br>而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。<br>其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。<br>最后墙的名字即是 name;</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;我是墙&quot;</span> <span class="attr">id</span>=<span class="string">&quot;recent-posts&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- id=&gt;type  recent-posts=&gt;name    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;我是画框&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;我是纸&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这里通过js挂载magnet，也就是画画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>temple_html</p><p>参数：html 模板字段<br>含义：包含挂载容器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-post-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;height: auto&quot;</span>&gt;</span> <span class="comment">&lt;!--文章容器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;catalog_magnet&quot;</span>&gt;</span>  <span class="comment">&lt;!--挂载容器--&gt;</span></span><br><span class="line">    $&#123;temple_html_item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>plus_style</p><p>参数：“”<br>含义：提供可自定义的 style，如加入黑夜模式。</p></li></ul></li><li><p>执行 hexo 三连</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>我们可以看到黑夜模式看起来特别的别扭，因此还要做一下黑夜模式的颜色适配，在<code>custom.css</code>文件中添加以下代码适配黑夜模式(具体颜色可以自己调节)：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 小冰分类分类磁铁黑夜模式适配 */</span></span><br><span class="line"><span class="comment">/* 一般状态 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.magnet_link_context</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#1e1e1e</span>;</span><br><span class="line">  <span class="attribute">color</span>: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 鼠标悬浮状态 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.magnet_link_context</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#3ecdf1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h2 id="文章置顶滚动栏-店长">文章置顶滚动栏(店长)</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/8e1264d1/">Swiper Bar</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><p><img src="https://s1.vika.cn/space/2022/10/29/97351892ab6b464db1edd2b67c0ad8f7" alt="image-20221029215312336"></p></div></div><ol><li><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-swiper --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-swiper</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/8e1264d1/</span></span><br><span class="line"><span class="attr">swiper:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">timemode:</span> <span class="string">date</span> <span class="comment">#date/updated</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">default_descr:</span> <span class="string">再怎么看我也不知道怎么描述它的啦！</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span> <span class="comment">#swiper css依赖</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span> <span class="comment">#swiper js依赖</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiperstyle.css</span> <span class="comment"># 适配主题样式补丁</span></span><br><span class="line">  <span class="attr">custom_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper_init.js</span> <span class="comment"># swiper初始化方法</span></span><br></pre></td></tr></table></figure></li><li><p>参数释义</p></li></ol><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">priority</td><td style="text-align:left">number</td><td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td style="text-align:left">enable</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】控制开关</td></tr><tr><td style="text-align:left">enable_page</td><td style="text-align:left">path/all</td><td style="text-align:left">【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’/‘,分类页面就填’/categories/‘。若要应用于所有页面，就填’all’，默认为all</td></tr><tr><td style="text-align:left">timemode</td><td style="text-align:left">date/updated</td><td style="text-align:left">【可选】时间显示，date为显示创建日期，updated为显示更新日期,默认为date</td></tr><tr><td style="text-align:left">layout.type</td><td style="text-align:left">id/class</td><td style="text-align:left">【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td style="text-align:left"><a href="http://layout.name">layout.name</a></td><td style="text-align:left">text</td><td style="text-align:left">【必选】挂载容器名称</td></tr><tr><td style="text-align:left">layout.index</td><td style="text-align:left">0和正整数</td><td style="text-align:left">【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td style="text-align:left">default_descr</td><td style="text-align:left">text</td><td style="text-align:left">默认文章描述</td></tr><tr><td style="text-align:left">swiper_css</td><td style="text-align:left">url</td><td style="text-align:left">【可选】自定义的swiper依赖项css链接</td></tr><tr><td style="text-align:left">swiper_js</td><td style="text-align:left">url</td><td style="text-align:left">【可选】自定义的swiper依赖项加js链接</td></tr><tr><td style="text-align:left">custom_css</td><td style="text-align:left">url</td><td style="text-align:left">【可选】适配主题样式补丁</td></tr><tr><td style="text-align:left">custom_js</td><td style="text-align:left">url</td><td style="text-align:left">【可选】swiper初始化方法</td></tr></tbody></table><p>使用方法:在文章的<code>front_matter</code>中添加<code>swiper_index</code>配置项即可。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 创建日期</span><br><span class="line">updated: 更新日期</span><br><span class="line">cover: 文章封面</span><br><span class="line">description: 文章描述</span><br><span class="line"><span class="section">swiper<span class="emphasis">_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="自定义字体">自定义字体</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <div class="note warning simple"><p>声明：<b>非商免字体</b>未经授权仅限个人使用，不得用于商业用途！</p></div><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><p><img src="https://s1.vika.cn/space/2022/11/09/a9846a4245fd4bea98745ba4a13116e0" alt="image"></p></div></div><ol><li><p>准备好字体文件后，在<code>[BlogRoot]\css\custom.css</code>（没有就自己创建）中添加以下代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="comment">/* 为载入的字体取名字(随意) */</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;YSHST&#x27;</span>;</span><br><span class="line">  <span class="comment">/* 字体文件地址(相对或者绝对路径都可以) */</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">/font/优设好身体.woff2</span>);</span><br><span class="line">  <span class="comment">/* 定义加粗样式(加粗多少) */</span></span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="comment">/* 定义字体样式(斜体/非斜体) */</span></span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="comment">/* 定义显示样式 */</span></span><br><span class="line">  <span class="attribute">font-display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>各个属性的定义：</p><ol><li>font-family属性值中使用webfont来声明使用的是服务器端字体，即设置文本的字体名称。</li><li>src属性值中首先指定了字体文件所在的路径。</li><li>format声明字体文件的格式，可以省略文件格式的声明，单独使用src属性值。</li><li>font-style：设置文本样式。取值：normal:不使用斜体；italic:使用斜体；oblique:使用倾斜体；inherit：从父元素继承。</li><li>支持格式：*.eot(老版本IE)，*.otf，*.ttf，*.woff，*.woff2(推荐)</li></ol></li><li><p>在主题配置文件<code>_config.butterfly.yml</code>中的<code>font</code>配置项以及<code>blog_title_font</code>配置项写上你刚刚引入的字体名称，系统会根据先后次序从前到后依次加载这些字体：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Global font settings</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要不要修改)</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span> <span class="string">&#x27;15px&#x27;</span></span><br><span class="line">  <span class="attr">code-font-size:</span> <span class="string">&#x27;14px&#x27;</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">YSHST,</span> <span class="string">-apple-system,</span> <span class="string">&#x27;Quicksand&#x27;</span><span class="string">,</span> <span class="string">&#x27;Nimbus Roman No9 L&#x27;</span><span class="string">,</span> <span class="string">&#x27;PingFang SC&#x27;</span><span class="string">,</span> <span class="string">&#x27;Hiragino Sans GB&#x27;</span><span class="string">,</span> <span class="string">&#x27;Noto Serif SC&#x27;</span><span class="string">,</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span><span class="string">,</span> <span class="string">&#x27;WenQuanYi Micro Hei&#x27;</span><span class="string">,</span> <span class="string">&#x27;ST Heiti&#x27;</span><span class="string">,</span> <span class="string">sans-serif;</span></span><br><span class="line">  <span class="attr">code-font-family:</span> <span class="string">Consolas,</span> <span class="string">YSHST,</span> <span class="string">&quot;Microsoft YaHei&quot;</span><span class="string">,</span> <span class="string">Menlo,</span> <span class="string">&quot;PingFang SC&quot;</span><span class="string">,</span> <span class="string">&quot;Microsoft JhengHei&quot;</span><span class="string">,</span> <span class="string">sans-serif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 左上角網站名字 主頁居中網站名字</span></span><br><span class="line"><span class="attr">blog_title_font:</span></span><br><span class="line">  <span class="attr">font_link:</span> </span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">YSHST,</span> <span class="string">-apple-system,</span> <span class="string">BlinkMacSystemFont,</span> <span class="string">&quot;Segoe UI&quot;</span> <span class="string">,</span> <span class="string">&quot;Helvetica Neue&quot;</span> <span class="string">,</span> <span class="string">Lato,</span> <span class="string">Roboto,</span> <span class="string">&quot;PingFang SC&quot;</span> <span class="string">,</span> <span class="string">&quot;Microsoft JhengHei&quot;</span> <span class="string">,</span> <span class="string">&quot;Microsoft YaHei&quot;</span> <span class="string">,</span> <span class="string">sans-serif</span></span><br></pre></td></tr></table></figure></li><li><p>重启项目即可看到</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h2 id="文章双侧栏显示-小冰">文章双侧栏显示(小冰)</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://zfe.space/post/hexo-butterfly-article-double-row.html">教程：butterfly 主题文章双栏布局插件</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><img src="https://s1.vika.cn/space/2022/10/30/6f1663ffe4964e71a9be7749502567dc" alt="1667113039031" style="zoom:67%;" /></div></div><ol><li><p>在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-butterfly-article-double-row --save</span><br></pre></td></tr></table></figure></li><li><p>在网站配置文件<code>_config.yml</code>新增以下项 (注意不是主题配置文件)：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">butterfly_article_double_row:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>这时候插件有个bug，就是最后一页文章数目为奇数的时候，会出现这种情况</p><p><img src="https://s1.vika.cn/space/2022/11/09/8a36957a9cea4b0d9f72a7470a74dfc3" alt="image"></p><p>会显得很不舒服，感谢<a href="https://tzy1997.com/">唐志远大佬</a>修复了这个bug，只需要在<code>custom.css</code>文件添加以下代码即可：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 翻页按钮居中 */</span></span><br><span class="line"><span class="selector-id">#pagination</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行 hexo 三连：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h2 id="wowjs动画">wowjs动画</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/abab51cf/">Add Blog Animation – Wowjs</a></p><p>效果预览：</p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><p><img src="https://s1.vika.cn/space/2022/11/08/ddf6c8d03c794520ae8327f6101f5b05" alt="动画"></p></div></div><ol><li><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-wowjs --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">wowjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#控制动画开关。true是打开，false是关闭</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">10</span> <span class="comment">#过滤器优先级</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment">#移动端是否启用，默认移动端禁用</span></span><br><span class="line">  <span class="attr">animateitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">recent-post-item</span> <span class="comment">#必填项，需要添加动画的元素的class</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__zoomIn</span> <span class="comment">#必填项，需要添加的动画</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="string">2s</span> <span class="comment">#选填项，动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</span></span><br><span class="line">      <span class="attr">delay:</span> <span class="string">1s</span> <span class="comment">#选填项，动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</span></span><br><span class="line">      <span class="attr">offset:</span> <span class="number">100</span> <span class="comment">#选填项，开始动画的距离（相对浏览器底部）</span></span><br><span class="line">      <span class="attr">iteration:</span> <span class="number">2</span> <span class="comment">#选填项，动画重复的次数</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">card-widget</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__zoomIn</span></span><br><span class="line">  <span class="attr">animate_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/animate.min.css</span></span><br><span class="line">  <span class="attr">wow_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow.min.js</span></span><br><span class="line">  <span class="attr">wow_init_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow_init.js</span></span><br></pre></td></tr></table></figure></li><li><p>参数释义</p></li></ol><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">enable</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】控制开关</td></tr><tr><td style="text-align:left">priority</td><td style="text-align:left">number</td><td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td style="text-align:left">mobile</td><td style="text-align:left">true/false</td><td style="text-align:left">控制移动端是否启用，默认移动端禁用</td></tr><tr><td style="text-align:left">animateitem.class</td><td style="text-align:left">class</td><td style="text-align:left">【可选】添加动画类名，只支持给class添加</td></tr><tr><td style="text-align:left">animateitem.style</td><td style="text-align:left">text</td><td style="text-align:left">【可选】动画样式，具体类型参考<a href="https://animate.style/">animate.css</a></td></tr><tr><td style="text-align:left">animateitem.duration</td><td style="text-align:left">time,单位为s或ms</td><td style="text-align:left">【可选】动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</td></tr><tr><td style="text-align:left">animateitem.delay</td><td style="text-align:left">time,单位为s或ms</td><td style="text-align:left">【可选】动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</td></tr><tr><td style="text-align:left">animateitem.offset</td><td style="text-align:left">number,单位为px</td><td style="text-align:left">【可选】开始动画的距离（相对浏览器底部）。</td></tr><tr><td style="text-align:left">animateitem.iteration</td><td style="text-align:left">number,单位为s或ms</td><td style="text-align:left">【可选】动画重复的次数</td></tr><tr><td style="text-align:left">animate_css</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】animate.css的CDN链接,默认为<code>https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/animate.min.css</code></td></tr><tr><td style="text-align:left">wow_js</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】wow.min.js的CDN链接,默认为<code>https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow.min.js</code></td></tr><tr><td style="text-align:left">wow_init_js</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】wow_init.js的CDN链接,默认为<code>https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow_init.js</code></td></tr></tbody></table><p>wowjs详细用法见原帖。</p>              </div>            </details><h2 id="外挂标签的引入（店长）">外挂标签的引入（店长）</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus</a></p><ol><li><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br></pre></td></tr></table></figure><p>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tag-plugins-plus</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/615e2dec/</span></span><br><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签依赖注入开关</span></span><br><span class="line">  <span class="attr">link:</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">/img/link.png</span> <span class="comment">#link_card标签默认的图标图片</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/issues.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    <span class="attr">carousel:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js</span></span><br><span class="line">    <span class="attr">tag_plugins_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css</span></span><br></pre></td></tr></table></figure></li><li><p>参数释义</p></li></ol><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">enable</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】控制开关</td></tr><tr><td style="text-align:left">priority</td><td style="text-align:left">number</td><td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td style="text-align:left">issues</td><td style="text-align:left">true/false</td><td style="text-align:left">【可选】issues标签控制开关，默认为false</td></tr><tr><td style="text-align:left">link.placeholder</td><td style="text-align:left">【必选】link卡片外挂标签的默认图标</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">CDN.anima</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】动画标签anima的依赖</td></tr><tr><td style="text-align:left">CDN.jquery</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.issues</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.iconfont</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】iconfont标签symbol样式引入，如果不想引入，则设为false</td></tr><tr><td style="text-align:left">CDN.carousel</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】carousel旋转相册标签鼠标拖动依赖，如果不想引入则设为false</td></tr><tr><td style="text-align:left">CDN.tag_plugins_css</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】外挂标签样式的CSS依赖，为避免CDN缓存延迟，建议将@latest改为具体版本号</td></tr></tbody></table><p>具体样式和写法可见：<a href="https://www.fomal.cc/posts/2013454d.html">Markdown语法与外挂标签写法汇总</a></p>              </div>            </details><h2 id="引入iconfont自定义图标（店长）">引入iconfont自定义图标（店长）</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/d2ebecef/">Iconfont Inject</a></p><h3 id="新建图标项目">新建图标项目</h3><ol><li><p>访问<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a>,注册登录。</p></li><li><p>搜索自己心仪的图标，然后选择<strong>添加入库</strong>，加到购物车。</p></li><li><p>选择完毕后点击右上角的购物车图标，打开侧栏，选择添加到项目，如果没有项目就新建一个。</p><p><img src="https://s1.vika.cn/space/2022/10/29/91ec7f6432274b42b50698ef554a2b91" alt="p4"></p></li><li><p>可以通过上方顶栏菜单-&gt;资源管理-&gt;我的项目，找到之前添加的图标项目。(现在的iconfont可以在图标库的项目设置里直接打开彩色设置，然后采用fontclass的引用方式即可使用多彩图标。但是<strong>单一项目彩色图标上限是40个图标</strong>，酌情采用。)</p><p><img src="https://s1.vika.cn/space/2022/10/29/ed3f516f1162418faec46808103d3840" alt="image-20221029212836645"></p><p><img src="https://s1.vika.cn/space/2022/10/29/a1984c415cb7442ba088e7a489cb2d8a" alt="image-20221029212857202"></p></li></ol><h3 id="引入图标">引入图标</h3><p>线上引入方案，我使用的是官方文档中最便捷的<code>font-class</code>方案。这一方案偶尔会出现图标加载不出的情况。但是便于随时对图标库进行升级，换一下在线链接即可，适合新手使用。最新版本的iconfont支持直接在项目设置中开启彩色图标，从而实现直接用class添加多彩色图标。（推荐直接用这个即可）</p><ol><li><p>在<code>[Blogroot]\themes\butterfly\source\css\custom.css</code>中填写如下内容，引入Unicode和Font-class的线上资源：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;//at.alicdn.com/t/font_2264842_b004iy0kk2b.css&quot;</span>;</span><br></pre></td></tr></table></figure><p>更推荐在在主题配置文件<code>inject</code>配置项进行全局引入：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;//at.alicdn.com/t/c/xxx.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;//at.alicdn.com/t/c/xxx.js&quot;&gt;&lt;/script&gt;</span> </span><br></pre></td></tr></table></figure></li><li><p>同时可以在自定义<code>CSS</code>中添加如下样式来控制图标默认大小和颜色等属性（<strong>若已经在项目设置中勾选了彩色选项，则无需再定义图标颜色</strong>），写法与字体样式类似，这恐怕也是它被称为<code>iconfont</code>（图标字体）的原因:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line"><span class="comment">/* 可以定义图标大小 */</span></span><br><span class="line"><span class="attribute">font-style</span>: normal;</span><br><span class="line">-webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">-moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以通过自己的阿里图标库的font-class方案查询复制相应的<code>icon-xxxx</code>。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-rat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-ox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-tiger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-rabbit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-dragon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-snake&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-horse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-goat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-monkey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-rooster&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-dog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-boar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h2 id="GitCalendar-店长">GitCalendar(店长)</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/1f9c68c9/">Gitcalendar</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><p><img src="https://s1.vika.cn/space/2022/10/29/986712d970c24084809b75cb06305336" alt="image-20221029215737879"></p></div></div><h3 id="安装-2">安装</h3><ol><li><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-gitcalendar --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件如<code>_config.butterfly.yml</code>中添加</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-filter-gitcalendar</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/1f9c68c9/</span></span><br><span class="line"><span class="attr">gitcalendar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="comment"># butterfly挂载容器</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># volantis挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: class</span></span><br><span class="line">  <span class="comment">#   name: l_main</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="comment"># matery挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: id</span></span><br><span class="line">  <span class="comment">#   name: indexCard</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="comment"># mengd挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: class</span></span><br><span class="line">  <span class="comment">#   name: content</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">Akilarlxh</span> <span class="comment">#git用户名</span></span><br><span class="line">  <span class="attr">apiurl:</span> <span class="string">&#x27;https://gitcalendar.akilar.top&#x27;</span><span class="comment"># 这是店长的API，最好自己弄一个</span></span><br><span class="line">  <span class="attr">minheight:</span></span><br><span class="line">    <span class="attr">pc:</span> <span class="string">280px</span> <span class="comment">#桌面端最小高度</span></span><br><span class="line">    <span class="attr">mibile:</span> <span class="string">0px</span> <span class="comment">#移动端最小高度</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;[&#x27;#e4dfd7&#x27;, &#x27;#f9f4dc&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f8df72&#x27;, &#x27;#fcd217&#x27;, &#x27;#fcc515&#x27;, &#x27;#f28e16&#x27;, &#x27;#fb8b05&#x27;, &#x27;#d85916&#x27;, &#x27;#f43e06&#x27;]&quot;</span> <span class="comment">#橘黄色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot; #浅紫色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f0fff4&#x27;, &#x27;#dcffe4&#x27;, &#x27;#bef5cb&#x27;, &#x27;#85e89d&#x27;, &#x27;#34d058&#x27;, &#x27;#28a745&#x27;, &#x27;#22863a&#x27;, &#x27;#176f2c&#x27;, &#x27;#165c26&#x27;, &#x27;#144620&#x27;]&quot; #翠绿色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot; #天青色调</span></span><br><span class="line">  <span class="attr">container:</span> <span class="string">.recent-post-item(style=&#x27;width:100%;height:auto;padding:10px;&#x27;)</span> <span class="comment">#父元素容器，需要使用pug语法</span></span><br><span class="line">  <span class="attr">gitcalendar_css:</span> <span class="string">https://npm.elemecdn.com/hexo-filter-gitcalendar/lib/gitcalendar.css</span></span><br><span class="line">  <span class="attr">gitcalendar_js:</span> <span class="string">https://npm.elemecdn.com/hexo-filter-gitcalendar/lib/gitcalendar.js</span></span><br></pre></td></tr></table></figure></li><li><p>参数释义</p></li></ol><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">priority</td><td style="text-align:left">number</td><td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td style="text-align:left">enable</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】控制开关</td></tr><tr><td style="text-align:left">enable_page</td><td style="text-align:left">path/all</td><td style="text-align:left">【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’/‘,分类页面就填’/categories/‘。若要应用于所有页面，就填’all’，默认为’/‘</td></tr><tr><td style="text-align:left">layout.type</td><td style="text-align:left">id/class</td><td style="text-align:left">【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td style="text-align:left"><a href="http://layout.name">layout.name</a></td><td style="text-align:left">text</td><td style="text-align:left">【必选】挂载容器名称</td></tr><tr><td style="text-align:left">layout.index</td><td style="text-align:left">0和正整数</td><td style="text-align:left">【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td style="text-align:left">user</td><td style="text-align:left">text</td><td style="text-align:left">【必选】git用户名</td></tr><tr><td style="text-align:left">apiurl</td><td style="text-align:left">url</td><td style="text-align:left">【可选】默认使用提供文档提供的api，但还是建议自建api，参考教程：<a href="https://akilar.top/posts/1f9c68c9/#%E8%87%AA%E5%BB%BAAPI%E9%83%A8%E7%BD%B2">自建API部署</a></td></tr><tr><td style="text-align:left">minheight.pc</td><td style="text-align:left">280px</td><td style="text-align:left">【可选】桌面端最小高度，默认为280px</td></tr><tr><td style="text-align:left">minheight.mobile</td><td style="text-align:left">0px</td><td style="text-align:left">【可选】移动端最小高度，默认为0px</td></tr><tr><td style="text-align:left">color</td><td style="text-align:left">list</td><td style="text-align:left">【可选】一个包含11个色值的数组，文档给出了四款预设值</td></tr><tr><td style="text-align:left">container</td><td style="text-align:left">pug</td><td style="text-align:left">【可选】预留的父元素容器，用以适配多主题，需要用pug语法填写，目前已适配<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>，<a href="https://github.com/volantis-x/hexo-theme-volantis">volantis</a>，<a href="https://github.com/blinkfox/hexo-theme-matery">matery</a>，<a href="https://github.com/lete114/hexo-theme-MengD">mengd</a>主题，这四个主题，插件会自自动识别<code>_config.yml</code>内填写的<code>theme</code>配置项。其余主题需要自己填写父元素容器。</td></tr><tr><td style="text-align:left">gitcalendar_css</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】自定义CSS样式链接</td></tr><tr><td style="text-align:left">gitcalendar_js</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】自定义js链接</td></tr></tbody></table><h3 id="自建API部署">自建API部署</h3><p>虽然Vercel的访问应当没有次数限制，但是不排除存在因访问次数过多而限流等限制。所以还是建议各位自建API。使用Vercel部署，完全免费，且无需服务器。</p><p>将此项目<code>fork</code>到你的Github仓库</p><p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Zfour/python_github_calendar_api"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Zfour&repo=python_github_calendar_api&theme=vue&show_owner=true"/></a></p><ol><li><p>访问<a href="https://vercel.com/">Vercel官网</a>，点击右上角的sign up进行注册，注册并登录后点击右上角创建一个项目，并选择以Github继续。<br><img src="https://s1.vika.cn/space/2022/10/27/13d509ad17d44a5ebf60d6bd7cde05f4" alt="pp" style="zoom:50%;" /></p></li><li><p>此时应该会看到你刚刚<code>fork</code>过来的你仓库的项目，看不到就输入关键字进行搜索。</p></li><li><p>点击该仓库右边的<code>Import</code>进行导入，<code>Vercel</code>的<code>PROJECT NAME</code>可以自定义，不用太过在意，但是之后不支持修改，若要改名，只能删除<code>PROJECT</code>以后重建一个了，下方三个选项保持默认就好，点击<code>Deploy</code>进行部署。</p><p><img src="https://s1.vika.cn/space/2022/10/29/5ab8babc380b4a93890ef5bbb6becc5c" alt="image-20221029221751149"></p></li><li><p>到此时，<code>Vercel</code>的部署已经完成，可以使用<code>Vercel</code>提供的默认域名来访问<code>api</code>链接。例如我获取到的默认域名为<code>github-calendar-api.vercel.app</code>,则用它来替换冰老师教程中的自建API，填写到<code>[Blogroot]\_config.butterfly.yml</code>中关于<code>gitcalendar</code>的<code>apiurl</code>中。注意源码修改版不要带协议，不要带后缀。就填写给你的默认域名就好。<code>而插件版需要带协议</code></p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">gitcalendar:</span><br><span class="line">  enable: true</span><br><span class="line">  simplemode: true</span><br><span class="line">  user: Akilarlxh</span><br><span class="line">  apiurl: github-calendar-api.vercel.app</span><br><span class="line">  color: &quot;[&#x27;#e4dfd7&#x27;, &#x27;#f9f4dc&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f8df72&#x27;, &#x27;#fcd217&#x27;, &#x27;#fcc515&#x27;, &#x27;#f28e16&#x27;, &#x27;#fb8b05&#x27;, &#x27;#d85916&#x27;, &#x27;#f43e06&#x27;]&quot;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h2 id="版权美化（店长）">版权美化（店长）</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/8322f8e6/">（二创）Copyright-beautify</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><img src="https://s1.vika.cn/space/2022/10/29/879f543db7e348eb9a43af45dbef836b" alt="image-20221029222358595" style="zoom:50%;" /></div></div><ol><li><p>修改<code>[Blogroot]\themes\butterfly\layout\includes\post\post-copyright.pug</code>,直接复制以下内容替换原文件内容。此处多次用到了三元运算符作为默认项设置，在确保有主题配置文件的默认项的情况下，也可以在相应文章的<code>front-matter</code>中重新定义作者，原文链接，开源许可协议等内容。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if theme.post_copyright.enable &amp;&amp; page.copyright !== false</span><br><span class="line">  - let author = page.copyright_author ? page.copyright_author : config.author</span><br><span class="line">  - let url = page.copyright_url ? page.copyright_url : page.permalink</span><br><span class="line">  - let license = page.license ? page.license : theme.post_copyright.license</span><br><span class="line">  - let license_url = page.license_url ? page.license_url : theme.post_copyright.license_url</span><br><span class="line">  .post-copyright</span><br><span class="line">    .post-copyright__title</span><br><span class="line">      span.post-copyright-info</span><br><span class="line">        h #[=page.title]</span><br><span class="line">    .post-copyright__type</span><br><span class="line">      span.post-copyright-info</span><br><span class="line">        a(href=url_for(url))= theme.post_copyright.decode ? decodeURI(url) : url</span><br><span class="line">    .post-copyright-m</span><br><span class="line">      .post-copyright-m-info</span><br><span class="line">        .post-copyright-a</span><br><span class="line">            h 作者</span><br><span class="line">            .post-copyright-cc-info</span><br><span class="line">                h=author</span><br><span class="line">        .post-copyright-c</span><br><span class="line">            h 发布于</span><br><span class="line">            .post-copyright-cc-info</span><br><span class="line">                h=date(page.date, config.date_format)</span><br><span class="line">        .post-copyright-u</span><br><span class="line">            h 更新于</span><br><span class="line">            .post-copyright-cc-info</span><br><span class="line">                h=date(page.updated, config.date_format)</span><br><span class="line">        .post-copyright-c</span><br><span class="line">            h 许可协议</span><br><span class="line">            .post-copyright-cc-info</span><br><span class="line">                a.icon(rel=&#x27;noopener&#x27; target=&#x27;_blank&#x27; title=&#x27;Creative Commons&#x27; href=&#x27;https://creativecommons.org/&#x27;)</span><br><span class="line">                  i.fab.fa-creative-commons</span><br><span class="line">                a(rel=&#x27;noopener&#x27; target=&#x27;_blank&#x27; title=license href=url_for(license_url))=license</span><br></pre></td></tr></table></figure></li><li><p>修改<code>[Blogroot]\themes\butterfly\source\css\_layout\post.styl</code>,直接复制以下内容，替换原文件。</p><div class="tabs" id="不同版本的魔改代码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#不同版本的魔改代码-1">Butterfly v3.x</button></li><li class="tab"><button type="button" data-href="#不同版本的魔改代码-2">Butterfly v4.x</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="不同版本的魔改代码-1"><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beautify</span><span class="params">()</span></span></span><br><span class="line">  <span class="built_in">headStyle</span>(fontsize)</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="built_in">unit</span>(fontsize + .<span class="number">4</span>, <span class="string">&#x27;rem&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">code</span></span><br><span class="line">      <span class="attribute">font-size</span>: <span class="built_in">unit</span>(fontsize, <span class="string">&#x27;rem&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="built_in">unit</span>((<span class="built_in">-</span>(fontsize + .<span class="number">2</span>)), <span class="string">&#x27;rem&#x27;</span>)</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="built_in">unit</span>(fontsize, <span class="string">&#x27;rem&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="built_in">unit</span>(fontsize + .<span class="number">6</span>, <span class="string">&#x27;rem&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h1</span>,</span><br><span class="line">  <span class="selector-tag">h2</span>,</span><br><span class="line">  <span class="selector-tag">h3</span>,</span><br><span class="line">  <span class="selector-tag">h4</span>,</span><br><span class="line">  <span class="selector-tag">h5</span>,</span><br><span class="line">  <span class="selector-tag">h6</span></span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">position</span>: absolute</span><br><span class="line">      <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - .<span class="number">35rem</span>)</span><br><span class="line">      <span class="attribute">color</span>: <span class="variable">$title</span>-prefix-icon-color</span><br><span class="line">      <span class="attribute">content</span>: <span class="variable">$title</span>-prefix-icon</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">1</span></span><br><span class="line">      <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out</span><br><span class="line">      <span class="keyword">@extend</span> <span class="selector-class">.fontawesomeIcon</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h1</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h2</span></span><br><span class="line">    <span class="built_in">headStyle</span>(.<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h3</span></span><br><span class="line">    <span class="built_in">headStyle</span>(.<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h4</span></span><br><span class="line">    <span class="built_in">headStyle</span>(.<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h5</span></span><br><span class="line">    <span class="built_in">headStyle</span>(.<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h6</span></span><br><span class="line">    <span class="built_in">headStyle</span>(.<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">ol</span>,</span><br><span class="line">  <span class="selector-tag">ul</span></span><br><span class="line">    <span class="attribute">margin-top</span>: .<span class="number">4rem</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> .<span class="number">8rem</span></span><br><span class="line">    <span class="attribute">list-style</span>: none</span><br><span class="line">    <span class="attribute">counter-reset</span>: li</span><br><span class="line"></span><br><span class="line">    +<span class="built_in">maxWidth768</span>()</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> .<span class="number">4rem</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">p</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">5rem</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">ol</span>,</span><br><span class="line">    <span class="selector-tag">ul</span></span><br><span class="line">      <span class="attribute">padding-left</span>: .<span class="number">6rem</span></span><br><span class="line"></span><br><span class="line">      +<span class="built_in">maxWidth768</span>()</span><br><span class="line">        <span class="attribute">padding-left</span>: .<span class="number">2rem</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span></span><br><span class="line">      <span class="selector-pseudo">&amp;:not</span>(.tab)</span><br><span class="line">        <span class="attribute">position</span>: relative</span><br><span class="line">        <span class="attribute">margin</span>: .<span class="number">2rem</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">        <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>)</span><br><span class="line"></span><br><span class="line">      <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">        <span class="attribute">position</span>: absolute</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$white</span></span><br><span class="line">        <span class="attribute">cursor</span>: pointer</span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-out</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">ol</span></span><br><span class="line">    &gt; <span class="selector-tag">li</span></span><br><span class="line">      <span class="selector-pseudo">&amp;:not</span>(.tab)</span><br><span class="line">        <span class="attribute">padding</span>: .<span class="number">2em</span> .<span class="number">2em</span> .<span class="number">2em</span> <span class="number">1.8em</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">        <span class="attribute">margin-top</span>: .<span class="number">65em</span></span><br><span class="line">        <span class="attribute">width</span>: w = <span class="number">1.45em</span></span><br><span class="line">        <span class="attribute">height</span>: h = w</span><br><span class="line">        <span class="attribute">border-radius</span>: .<span class="number">5</span> * w</span><br><span class="line">        <span class="attribute">content</span>: <span class="built_in">counter</span>(li)</span><br><span class="line">        <span class="attribute">counter-increment</span>: li</span><br><span class="line">        <span class="attribute">text-align</span>: center</span><br><span class="line">        <span class="attribute">font-size</span>: .<span class="number">85em</span></span><br><span class="line">        <span class="attribute">line-height</span>: h</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">ul</span></span><br><span class="line">    &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(.tab)</span><br><span class="line">      <span class="attribute">padding</span>: .<span class="number">2em</span> .<span class="number">2em</span> .<span class="number">2em</span> <span class="number">1.4em</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">        <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">          <span class="attribute">border-color</span>: <span class="variable">$pseudo</span>-hover</span><br><span class="line"></span><br><span class="line">      <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">        <span class="variable">$w</span> = .<span class="number">42em</span></span><br><span class="line">        <span class="attribute">top</span>: .<span class="number">78em</span></span><br><span class="line">        <span class="attribute">width</span>: w = <span class="variable">$w</span></span><br><span class="line">        <span class="attribute">height</span>: h = w</span><br><span class="line">        <span class="attribute">border</span>: .<span class="number">5</span> * w solid <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">border-radius</span>: w</span><br><span class="line">        <span class="attribute">background</span>: transparent</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="attribute">line-height</span>: h</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">no-beautify</span><span class="params">()</span></span></span><br><span class="line">  <span class="selector-tag">ol</span>,</span><br><span class="line">  <span class="selector-tag">ul</span></span><br><span class="line">    <span class="attribute">margin-top</span>: .<span class="number">4rem</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">p</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">5rem</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">ol</span>,</span><br><span class="line">    <span class="selector-tag">ul</span></span><br><span class="line">      <span class="attribute">padding-left</span>: .<span class="number">5rem</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span></span><br><span class="line">      <span class="attribute">position</span>: relative</span><br><span class="line">      <span class="attribute">margin</span>: .<span class="number">3rem</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">padding-left</span>: .<span class="number">3rem</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span></span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word</span><br><span class="line">  <span class="attribute">overflow-wrap</span>: break-word</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$theme</span>-link-color</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="attribute">text-decoration</span>: underline</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">img</span></span><br><span class="line">    <span class="attribute">display</span>: block</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto .<span class="number">8rem</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">p</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">8rem</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">iframe</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;beautify.enable&#x27;</span>) &amp;&amp; <span class="built_in">hexo-config</span>(<span class="string">&#x27;beautify.field&#x27;</span>) == <span class="string">&#x27;site&#x27;</span></span><br><span class="line">    <span class="built_in">beautify</span>()</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;beautify.enable&#x27;</span>) &amp;&amp; <span class="built_in">hexo-config</span>(<span class="string">&#x27;beautify.field&#x27;</span>) == <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    <span class="built_in">no-beautify</span>()</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-class">.post-content</span></span><br><span class="line">      <span class="built_in">beautify</span>()</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">no-beautify</span>()</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#post</span></span><br><span class="line">  <span class="selector-class">.tag_share</span></span><br><span class="line">    <span class="selector-class">.post-meta</span></span><br><span class="line">      &amp;__tag-list</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line"></span><br><span class="line">      &amp;__tags</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line">        <span class="attribute">margin</span>: .<span class="number">4rem</span> .<span class="number">4rem</span> .<span class="number">4rem</span> <span class="number">0</span></span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> .<span class="number">6rem</span></span><br><span class="line">        <span class="attribute">width</span>: fit-content</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">border-radius</span>: .<span class="number">6rem</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">font-size</span>: .<span class="number">85em</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out</span><br><span class="line"></span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">          <span class="attribute">background</span>: <span class="variable">$light</span>-blue</span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--white)</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post_share</span></span><br><span class="line">      <span class="attribute">display</span>: inline-block</span><br><span class="line">      <span class="attribute">float</span>: right</span><br><span class="line">      <span class="attribute">margin</span>: .<span class="number">4rem</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">width</span>: fit-content</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.social-share</span></span><br><span class="line">        <span class="attribute">font-size</span>: .<span class="number">85em</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.social-share-icon</span></span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span></span><br><span class="line">          <span class="attribute">width</span>: w = <span class="number">1.85em</span></span><br><span class="line">          <span class="attribute">height</span>: w</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">1.2em</span></span><br><span class="line">          <span class="attribute">line-height</span>: w</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-copyright</span></span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">0</span> .<span class="number">5rem</span></span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5rem</span> .<span class="number">8rem</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--light-grey)</span><br><span class="line">    <span class="attribute">transition</span>: box-shadow .<span class="number">3s</span> ease-in-out</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span><span class="meta">!important</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">239</span> <span class="number">241</span> <span class="number">243</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">background</span> <span class="built_in">var</span>(--heo-post-blockquote-bg)</span><br><span class="line">      <span class="attribute">position</span> absolute</span><br><span class="line">      <span class="attribute">right</span> -<span class="number">26px</span></span><br><span class="line">      <span class="attribute">top</span> -<span class="number">120px</span></span><br><span class="line">      <span class="attribute">content</span> <span class="string">&#x27;\f25e&#x27;</span></span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">200px</span></span><br><span class="line">      <span class="attribute">font-family</span> <span class="string">&#x27;Font Awesome 5 Brands&#x27;</span></span><br><span class="line">      <span class="attribute">opacity</span> .<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">232</span>, <span class="number">237</span>, <span class="number">250</span>, .<span class="number">6</span>), <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">232</span>, <span class="number">237</span>, <span class="number">250</span>, .<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post-copyright</span></span><br><span class="line">      &amp;-meta</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">font-weight</span>: bold</span><br><span class="line"></span><br><span class="line">      &amp;-info</span><br><span class="line">        <span class="attribute">padding-left</span>: .<span class="number">3rem</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">a</span></span><br><span class="line">          <span class="attribute">text-decoration</span>: none</span><br><span class="line">          <span class="attribute">word-break</span>: break-word</span><br><span class="line"></span><br><span class="line">          <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">            <span class="attribute">text-decoration</span>: none</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-copyright-cc-info</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$theme</span>-color;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-outdate-notice</span></span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1.2em</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$noticeOutdate</span>-bg</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$noticeOutdate</span>-color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;noticeOutdate.style&#x27;</span>) == <span class="string">&#x27;flat&#x27;</span></span><br><span class="line">      <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span> .<span class="number">5em</span> <span class="number">2.6em</span></span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">5px</span> solid <span class="variable">$noticeOutdate</span>-border</span><br><span class="line"></span><br><span class="line">      <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">        <span class="keyword">@extend</span> <span class="selector-class">.fontawesomeIcon</span></span><br><span class="line">        <span class="attribute">position</span>: absolute</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span></span><br><span class="line">        <span class="attribute">left</span>: .<span class="number">9em</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$noticeOutdate</span>-border</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;\f071&#x27;</span></span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.ads-wrap</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">0</span></span><br><span class="line"><span class="selector-class">.post-copyright-m-info</span></span><br><span class="line">  <span class="selector-class">.post-copyright-a</span>,</span><br><span class="line">  <span class="selector-class">.post-copyright-c</span>,</span><br><span class="line">  <span class="selector-class">.post-copyright-u</span></span><br><span class="line">    <span class="attribute">display</span> inline-block</span><br><span class="line">    <span class="attribute">width</span> fit-content</span><br><span class="line">    <span class="attribute">padding</span> <span class="number">2px</span> <span class="number">5px</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line">  <span class="selector-id">#post</span></span><br><span class="line">    <span class="selector-class">.post-copyright</span></span><br><span class="line">      <span class="attribute">background-color</span> <span class="number">#07080a</span></span><br><span class="line">      <span class="attribute">text-shadow</span> <span class="number">#bfbeb8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span></span><br><span class="line">      <span class="attribute">border</span> <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">19</span> <span class="number">18</span> <span class="number">18</span> / <span class="number">35%</span>)</span><br><span class="line">      <span class="attribute">box-shadow</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgb</span>(<span class="number">20</span>, <span class="number">120</span>, <span class="number">210</span>)</span><br><span class="line">      <span class="attribute">animation</span> flashlight <span class="number">1s</span> linear infinite alternate</span><br><span class="line">  <span class="selector-class">.post-copyright-info</span></span><br><span class="line">    <span class="attribute">color</span> <span class="number">#e0e0e4</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#post</span></span><br><span class="line">  <span class="selector-class">.post-copyright__title</span></span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">22px</span></span><br><span class="line">  <span class="selector-class">.post-copyright__notice</span></span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">15px</span></span><br><span class="line">  <span class="selector-class">.post-copyright</span></span><br><span class="line">    <span class="attribute">box-shadow</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> flashlight</span><br><span class="line">  from</span><br><span class="line">    <span class="attribute">box-shadow</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgb</span>(<span class="number">20</span>, <span class="number">120</span>, <span class="number">210</span>)</span><br><span class="line">  to</span><br><span class="line">    <span class="attribute">box-shadow</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgb</span>(<span class="number">20</span>, <span class="number">120</span>, <span class="number">210</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="不同版本的魔改代码-2"><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beautify</span><span class="params">()</span></span></span><br><span class="line">  <span class="built_in">headStyle</span>(fontsize)</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="built_in">unit</span>(fontsize + <span class="number">12</span>, <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="built_in">unit</span>((<span class="built_in">-</span>(fontsize + <span class="number">6</span>)), <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="built_in">unit</span>(fontsize, <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="built_in">unit</span>(fontsize + <span class="number">18</span>, <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h1</span>,</span><br><span class="line">  <span class="selector-tag">h2</span>,</span><br><span class="line">  <span class="selector-tag">h3</span>,</span><br><span class="line">  <span class="selector-tag">h4</span>,</span><br><span class="line">  <span class="selector-tag">h5</span>,</span><br><span class="line">  <span class="selector-tag">h6</span></span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">position</span>: absolute</span><br><span class="line">      <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">7px</span>)</span><br><span class="line">      <span class="attribute">color</span>: <span class="variable">$title</span>-prefix-icon-color</span><br><span class="line">      <span class="attribute">content</span>: <span class="variable">$title</span>-prefix-icon</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">1</span></span><br><span class="line">      <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out</span><br><span class="line">      <span class="keyword">@extend</span> <span class="selector-class">.fontawesomeIcon</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h1</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h2</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h3</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h4</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h5</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h6</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">ol</span>,</span><br><span class="line">  <span class="selector-tag">ul</span></span><br><span class="line">    <span class="selector-tag">p</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">li</span></span><br><span class="line">    <span class="selector-pseudo">&amp;::marker</span></span><br><span class="line">      <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">600</span></span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.05em</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="selector-pseudo">&amp;::marker</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--pseudo-hover)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span></span><br><span class="line">    <span class="attribute">list-style-type</span>: circle</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span></span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word</span><br><span class="line">  <span class="attribute">overflow-wrap</span>: break-word</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$theme</span>-link-color</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="attribute">text-decoration</span>: underline</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">img</span></span><br><span class="line">    <span class="attribute">display</span>: block</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">20px</span></span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span></span><br><span class="line">    <span class="attribute">transition</span>: filter <span class="number">375ms</span> ease-in .<span class="number">2s</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">p</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">16px</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">iframe</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;anchor&#x27;</span>)</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-class">.headerlink</span></span><br><span class="line">      <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">        <span class="keyword">@extend</span> <span class="selector-class">.fontawesomeIcon</span></span><br><span class="line">        <span class="attribute">float</span>: right</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--headline-presudo)</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;\f0c1&#x27;</span></span><br><span class="line">        <span class="attribute">font-size</span>: .<span class="number">95em</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">3s</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">        <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--pseudo-hover)</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">h1</span>,</span><br><span class="line">    <span class="selector-tag">h2</span>,</span><br><span class="line">    <span class="selector-tag">h3</span>,</span><br><span class="line">    <span class="selector-tag">h4</span>,</span><br><span class="line">    <span class="selector-tag">h5</span>,</span><br><span class="line">    <span class="selector-tag">h6</span></span><br><span class="line">      <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-class">.headerlink</span></span><br><span class="line">          <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">ol</span>,</span><br><span class="line">  <span class="selector-tag">ul</span></span><br><span class="line">    <span class="selector-tag">ol</span>,</span><br><span class="line">    <span class="selector-tag">ul</span></span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="number">20px</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">p</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;beautify.enable&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;beautify.field&#x27;</span>) == <span class="string">&#x27;site&#x27;</span></span><br><span class="line">      <span class="built_in">beautify</span>()</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;beautify.field&#x27;</span>) == <span class="string">&#x27;post&#x27;</span></span><br><span class="line">      &amp;<span class="selector-class">.post-content</span></span><br><span class="line">        <span class="built_in">beautify</span>()</span><br><span class="line"></span><br><span class="line">  &gt; <span class="selector-pseudo">:last-child</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span> <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#post</span></span><br><span class="line">  <span class="selector-class">.tag_share</span></span><br><span class="line">    <span class="selector-class">.post-meta</span></span><br><span class="line">      &amp;__tag-list</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line"></span><br><span class="line">      &amp;__tags</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span></span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span></span><br><span class="line">        <span class="attribute">width</span>: fit-content</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">12px</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">font-size</span>: .<span class="number">85em</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out</span><br><span class="line"></span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">          <span class="attribute">background</span>: <span class="variable">$light</span>-blue</span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--white)</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post_share</span></span><br><span class="line">      <span class="attribute">display</span>: inline-block</span><br><span class="line">      <span class="attribute">float</span>: right</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">width</span>: fit-content</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.social-share</span></span><br><span class="line">        <span class="attribute">font-size</span>: .<span class="number">85em</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.social-share-icon</span></span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span></span><br><span class="line">          <span class="attribute">width</span>: w = <span class="number">1.85em</span></span><br><span class="line">          <span class="attribute">height</span>: w</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">1.2em</span></span><br><span class="line">          <span class="attribute">line-height</span>: w</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-copyright</span></span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span> <span class="number">10px</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">16px</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--light-grey)</span><br><span class="line">    <span class="attribute">transition</span>: box-shadow .<span class="number">3s</span> ease-in-out</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span><span class="meta">!important</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">239</span> <span class="number">241</span> <span class="number">243</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">background</span> <span class="built_in">var</span>(--heo-post-blockquote-bg)</span><br><span class="line">      <span class="attribute">position</span> absolute</span><br><span class="line">      <span class="attribute">right</span> -<span class="number">26px</span></span><br><span class="line">      <span class="attribute">top</span> -<span class="number">120px</span></span><br><span class="line">      <span class="attribute">content</span> <span class="string">&#x27;\f25e&#x27;</span></span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">200px</span></span><br><span class="line">      <span class="attribute">font-family</span> <span class="string">&#x27;Font Awesome 5 Brands&#x27;</span></span><br><span class="line">      <span class="attribute">opacity</span> .<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">232</span>, <span class="number">237</span>, <span class="number">250</span>, .<span class="number">6</span>), <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">232</span>, <span class="number">237</span>, <span class="number">250</span>, .<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post-copyright</span></span><br><span class="line">      &amp;-meta</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">font-weight</span>: bold</span><br><span class="line"></span><br><span class="line">      &amp;-info</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">6px</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">a</span></span><br><span class="line">          <span class="attribute">text-decoration</span>: none</span><br><span class="line">          <span class="attribute">word-break</span>: break-word</span><br><span class="line"></span><br><span class="line">          <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">            <span class="attribute">text-decoration</span>: none</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-copyright-cc-info</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$theme</span>-color;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-outdate-notice</span></span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span></span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1.2em</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$noticeOutdate</span>-bg</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$noticeOutdate</span>-color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;noticeOutdate.style&#x27;</span>) == <span class="string">&#x27;flat&#x27;</span></span><br><span class="line">      <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span> .<span class="number">5em</span> <span class="number">2.6em</span></span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">5px</span> solid <span class="variable">$noticeOutdate</span>-border</span><br><span class="line"></span><br><span class="line">      <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">        <span class="keyword">@extend</span> <span class="selector-class">.fontawesomeIcon</span></span><br><span class="line">        <span class="attribute">position</span>: absolute</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span></span><br><span class="line">        <span class="attribute">left</span>: .<span class="number">9em</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$noticeOutdate</span>-border</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;\f071&#x27;</span></span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.ads-wrap</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span></span><br><span class="line"><span class="selector-class">.post-copyright-m-info</span></span><br><span class="line">  <span class="selector-class">.post-copyright-a</span>,</span><br><span class="line">  <span class="selector-class">.post-copyright-c</span>,</span><br><span class="line">  <span class="selector-class">.post-copyright-u</span></span><br><span class="line">    <span class="attribute">display</span> inline-block</span><br><span class="line">    <span class="attribute">width</span> fit-content</span><br><span class="line">    <span class="attribute">padding</span> <span class="number">2px</span> <span class="number">5px</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line">  <span class="selector-id">#post</span></span><br><span class="line">    <span class="selector-class">.post-copyright</span></span><br><span class="line">      <span class="attribute">background-color</span> <span class="number">#07080a</span></span><br><span class="line">      <span class="attribute">text-shadow</span> <span class="number">#bfbeb8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span></span><br><span class="line">      <span class="attribute">border</span> <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">19</span> <span class="number">18</span> <span class="number">18</span> / <span class="number">35%</span>)</span><br><span class="line">      <span class="attribute">box-shadow</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgb</span>(<span class="number">20</span>, <span class="number">120</span>, <span class="number">210</span>)</span><br><span class="line">      <span class="attribute">animation</span> flashlight <span class="number">1s</span> linear infinite alternate</span><br><span class="line">  <span class="selector-class">.post-copyright-info</span></span><br><span class="line">    <span class="attribute">color</span> <span class="number">#e0e0e4</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#post</span></span><br><span class="line">  <span class="selector-class">.post-copyright__title</span></span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">22px</span></span><br><span class="line">  <span class="selector-class">.post-copyright__notice</span></span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">15px</span></span><br><span class="line">  <span class="selector-class">.post-copyright</span></span><br><span class="line">    <span class="attribute">box-shadow</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li><p>默认项的配置</p><ul><li><p>作者：<code>[Blogroot]\_config.yml</code>中的<code>author</code>配置项</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Akilarの糖果屋</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Akilar.top</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Akilar</span> <span class="comment">#默认作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>许可协议：<code>[Blogroot]\_config.butterfly.yml</code>中的<code>license</code>和<code>license_url</code>配置项</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>页面覆写配置项，修改对应文章的<code>front-matter</code></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Copyright-beautify # 文章名称</span><br><span class="line">date: 2021-03-02 13:52:46 # 文章发布日期</span><br><span class="line">updated: 2021-03-02 13:52:46 # 文章更新日期</span><br><span class="line">copyright<span class="emphasis">_author: Nesxc # 作者覆写</span></span><br><span class="line"><span class="emphasis">copyright_</span>url: https://www.nesxc.com/post/hexocc.html # 原文链接覆写</span><br><span class="line">license: # 许可协议名称覆写</span><br><span class="line"><span class="section">license<span class="emphasis">_url: # 许可协议链接覆写</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h2 id="侧边栏电子时钟-安知鱼">侧边栏电子时钟(安知鱼)</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://anzhiy.cn/posts/fc18.html">给butterfly添加侧边栏电子钟</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><p><img src="https://s1.vika.cn/space/2022/10/29/46517a30799b464b8e9964b20d67f712" alt="image-20221029224145818"></p></div></div><h3 id="安装-3">安装</h3><ol><li><p>如果有安装店长的插件版侧边栏电子钟（与店长的电子钟冲突），在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载原版电子钟</span></span><br><span class="line">npm uninstall hexo-butterfly-clock</span><br></pre></td></tr></table></figure></li><li><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-clock-anzhiyu --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># electric_clock</span></span><br><span class="line"><span class="comment"># see https://anzhiy.cn/posts/fc18.html</span></span><br><span class="line"><span class="attr">electric_clock:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line"><span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line"><span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line">  <span class="comment"># - /posts/</span></span><br><span class="line">  <span class="comment"># - /about/</span></span><br><span class="line"><span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">class</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sticky_layout</span></span><br><span class="line">  <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">loading:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/loading.gif</span> <span class="comment">#加载动画自定义</span></span><br><span class="line"><span class="attr">clock_css:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/clock.min.css</span></span><br><span class="line"><span class="attr">clock_js:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/clock.min.js</span></span><br><span class="line"><span class="attr">ip_api:</span> <span class="string">https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0</span></span><br><span class="line"><span class="attr">qweather_key:</span> <span class="comment"># 和风天气key</span></span><br><span class="line"><span class="attr">gaud_map_key:</span> <span class="comment"># 高得地图web服务key</span></span><br><span class="line"><span class="attr">default_rectangle:</span> <span class="literal">false</span> <span class="comment"># 开启后将一直显示rectangle位置的天气，否则将获取访问者的地理位置与天气</span></span><br><span class="line"><span class="attr">rectangle:</span> <span class="number">112.982279</span><span class="string">,28.19409</span> <span class="comment"># 获取访问者位置失败时会显示该位置的天气，同时该位置为开启default_rectangle后的位置</span></span><br></pre></td></tr></table></figure><p>其中qweather_key 和gaud_map_key 最好自己去申请对应的 api key，默认使用<code>鱼</code>的，可能会被限制，不保证可靠性。</p></li><li><p>参数释义</p></li></ol><table><thead><tr><th>参数</th><th>备选值/类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为 10，选填</td></tr><tr><td>enable</td><td>true/false</td><td>【必选】控制开关</td></tr><tr><td>enable_page</td><td>path/all</td><td>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’/‘,分类页面就填’/categories/‘。若要应用于所有页面，就填’all’，默认为 all</td></tr><tr><td>exclude</td><td>path</td><td>【可选】填写想要屏蔽的页面，可以多个。写法见示例。原理是将屏蔽项的内容逐个放到当前路径去匹配，若当前路径包含任一屏蔽项，则不会挂载。</td></tr><tr><td>layout.type</td><td>id/class</td><td>【可选】挂载容器类型，填写 id 或 class，不填则默认为 id</td></tr><tr><td><a href="http://layout.name">layout.name</a></td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是 layout.type 为 class，因为同一页面可能有多个 class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>loading</td><td>URL</td><td>【可选】电子钟加载动画的图片</td></tr><tr><td>clock_css</td><td>URL</td><td>【可选】电子钟样式 CDN 资源</td></tr><tr><td>clock_js</td><td>URL</td><td>【可选】电子钟执行脚本 CDN 资源</td></tr><tr><td>ip_api</td><td>URL</td><td>【可选】获取时钟 IP 的 API</td></tr><tr><td>qweather_key</td><td>text</td><td>【可选】和风天气 key</td></tr><tr><td>gaud_map_key</td><td>text</td><td>【可选】高得地图 web 服务 key</td></tr><tr><td>default_rectangle</td><td>text</td><td>【可选】开启后将一直显示 rectangle 位置的天气，否则将获取访问者的地理位置与天气</td></tr><tr><td>rectangle</td><td>text</td><td>【可选】获取访问者位置失败时会显示该位置的天气，同时该位置为开启 default_rectangle 后的位置</td></tr></tbody></table><h3 id="API申请教程">API申请教程</h3><p>一、<code>qweather_key</code>申请地址: <a href="https://id.qweather.com/#/login">https://id.qweather.com/#/login</a></p><ol><li><p>登录后进入控制台</p><img src="https://image.anzhiy.cn/adminuploads/1/2022/08/26/63089a777772f.webp" alt="pp" style="zoom:50%;" /></li><li><p>创建应用</p><p><img src="https://image.anzhiy.cn/adminuploads/1/2022/08/26/63089a7772a30.webp" alt="pp"></p></li><li><p>填写应用名称和 key 名称随意</p></li><li><p>选择 WebApi</p><img src="https://image.anzhiy.cn/adminuploads/1/2022/08/26/63089a776a3fd.webp" alt="pp" style="zoom:50%;" /></li><li><p>复制 key</p><p><img src="https://image.anzhiy.cn/adminuploads/1/2022/08/26/63089b848e8a7.webp" alt="pp"></p></li></ol><p>二、<code>gaud_map_key</code> 申请地址: <a href="https://lbs.amap.com/">https://lbs.amap.com/</a></p><ol><li><p>登录后进入控制台</p></li><li><p>创建应用，名称随意，类型选其他</p><p><img src="https://image.anzhiy.cn/adminuploads/1/2022/08/26/6308a1101d83c.webp" alt="pp"></p></li><li><p>点击添加, <code>key</code>名称随意，<code>服务平台</code>选择<code>Web服务</code>,点击提交</p><img src="https://image.anzhiy.cn/adminuploads/1/2022/08/26/6308a11023c69.webp" alt="pp" style="zoom: 50%;" /></li><li><p>复制 key</p><p><img src="https://image.anzhiy.cn/adminuploads/1/2022/08/26/6308a11018a74.webp" alt="pp"></p></li></ol>              </div>            </details><h2 id="aplayer音乐播放器">aplayer音乐播放器</h2><details class="folding-tag" cyan><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://butterfly.js.org/posts/507c070f/">Butterfly添加全局吸底Aplayer教程</a></p><div class="hide-block"><button type="button" class="hide-button" style="">效果预览    </button><div class="hide-content"><p><img src="https://s1.vika.cn/space/2022/10/30/a6852252f405426b8e60d9e1132ed932" alt="image (1)"></p></div></div><p>注意：我这里只在某个页面引入音乐播放器，如果要引入全局吸底的播放器，请见上面的链接。</p><ol><li><p>在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure></li><li><p>在网站配置文件<code>_config.yml</code>中修改<code>aplayer </code>配置项为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 音乐插件</span></span><br><span class="line"><span class="attr">aplayer:</span> </span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>_config.butterfly.yml</code>中修改<code>aplayerInject</code>配置项为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>在你想要加入音乐播放器的页面加入以下语句：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aplayer-oSEOhviA&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;4895239160&quot;</span> <span class="attr">data-server</span>=<span class="string">&quot;netease&quot;</span> <span class="attr">data-type</span>=<span class="string">&quot;playlist&quot;</span> <span class="attr">data-mode</span>=<span class="string">&quot;random&quot;</span> <span class="attr">data-autoplay</span>=<span class="string">&quot;false&quot;</span> <span class="attr">data-listmaxheight</span>=<span class="string">&quot;340px&quot;</span> <span class="attr">data-preload</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">data-theme</span>=<span class="string">&quot;#e3f2f5&quot;</span> <span class="attr">data-volume</span>=<span class="string">&quot;0.4&quot;</span> <span class="attr">mutex</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>其中<code>data-id</code>为歌单ID可以换为你喜欢的歌曲，其他参数见详情页这里不再赘述！</p></li></ol>              </div>            </details><h2 id="🍕🍕🍕大家有啥教程想看的可以在评论区留言，如果搭建过程中遇到不懂的可以加群咨询，进群密码：唐志远。-2">🍕🍕🍕大家有啥教程想看的可以在评论区留言，如果搭建过程中遇到不懂的可以加群咨询，进群密码：唐志远。</h2><img src="https://s1.vika.cn/space/2022/11/04/0bd8a1a7e8f64d6a8248d1d872c5a178" alt="二维码" style="zoom:50%;" />]]></content>
    
    
    <summary type="html">博客魔改教程总结(一)</summary>
    
    
    
    <category term="魔改教程" scheme="https://www.fomal.cc/categories/%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://www.fomal.cc/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://www.fomal.cc/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>关于堆(优先队列)的一些题目</title>
    <link href="https://www.fomal.cc/posts/5837a55a.html"/>
    <id>https://www.fomal.cc/posts/5837a55a.html</id>
    <published>2022-09-10T22:20:00.000Z</published>
    <updated>2022-10-05T22:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LC2146-价格范围内最高排名的-K-样物品"><a href="https://leetcode.cn/problems/k-highest-ranked-items-within-a-price-range/">LC2146. 价格范围内最高排名的 K 样物品</a></h2><p>总体方法-&gt;<strong>BFS+堆</strong></p><p><b>维度优先级：</b>1.最短距离；2.低价格；3.小的x；4.小的y</p><p>因此只有在相同的最短路径基础上再考虑余下的3个维度，最短路我们可以通过BFS去维护</p><p>而余下的三个维度我们具体要取哪一个可以定义在堆的排序规则上，堆会将满足条件的首个元素优先弹出</p><p>题目数据范围：1 &lt;= m, n &lt;= 10^5，1 &lt;= m * n &lt;= 10^5，显然只能接收到O(NlogN)或以下级别</p><p><b>坑点分析：</b>要注意不能只用一个堆，因为堆与普通的单向队列不同，堆里的元素顺序会随着新元素的插入而改变，若只用一个堆且弹出固定size数目的元素，很有可能会把这轮进来的元素也弹出来（只要这个元素足够优先）</p><p>时间复杂度:O(M*N*log(M*N)) 空间复杂度:O(M*N)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">highestRankedKItems</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span>[] pricing, <span class="type">int</span>[] start, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="type">boolean</span>[][] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="comment">// 自定义规则堆:pq1存储上一轮循环的pq2遗留的元素，pq2是用来装本轮循环新的元素</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq2 = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; grid[a[<span class="number">0</span>]][a[<span class="number">1</span>]] == grid[b[<span class="number">0</span>]][b[<span class="number">1</span>]] ?</span><br><span class="line">                (a[<span class="number">0</span>] == b[<span class="number">0</span>] ? a[<span class="number">1</span>] - b[<span class="number">1</span>] : a[<span class="number">0</span>] - b[<span class="number">0</span>]) : grid[a[<span class="number">0</span>]][a[<span class="number">1</span>]] - grid[b[<span class="number">0</span>]][b[<span class="number">1</span>]]), pq1;</span><br><span class="line">        pq2.add(start);</span><br><span class="line">        vis[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 开启BFS</span></span><br><span class="line">        <span class="keyword">while</span> (!pq2.isEmpty() &amp;&amp; res.size() &lt; k) &#123;</span><br><span class="line">            pq1 = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(pq2); <span class="comment">// pq1复制上一轮的pq2且排序规则也一致</span></span><br><span class="line">            pq2.clear();    <span class="comment">// pq2清空，准备装新一轮的</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> pq1.size();</span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span>[] poll = pq1.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> poll[<span class="number">0</span>], y = poll[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (grid[x][y] &gt;= pricing[<span class="number">0</span>] &amp;&amp; grid[x][y] &lt;= pricing[<span class="number">1</span>]) &#123;</span><br><span class="line">                    res.add(Arrays.asList(x, y));   <span class="comment">// 是商品且价钱合适</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (res.size() &gt;= k) <span class="keyword">break</span>; <span class="comment">// 买够了</span></span><br><span class="line">                <span class="comment">// 寻找上下左右的</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> x + dir[<span class="number">0</span>], newY = y + dir[<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// 下一个在范围内&amp;&amp;没有背访问过&amp;&amp;不是墙</span></span><br><span class="line">                    <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; m &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; n &amp;&amp; !vis[newX][newY] &amp;&amp; grid[newX][newY] != <span class="number">0</span>) &#123;</span><br><span class="line">                        pq2.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;newX, newY&#125;);  <span class="comment">// 新的位置入堆</span></span><br><span class="line">                        vis[newX][newY] = <span class="literal">true</span>; <span class="comment">// 标记访问</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LC6197-最长上传前缀"><a href="https://leetcode.cn/problems/longest-uploaded-prefix/">LC6197. 最长上传前缀</a></h2><p><strong>懒堆的应用：</strong></p><ol><li>要求最长上升前缀等价于求最小未上传索引再减去1</li><li>我们可以用一个数据结构维护未上传的索引，并能及时更新这些未上传的索引以及以低的时间复杂度弹出最小未上传索引</li><li>考虑到堆remove()方法时间复杂度是O(N)，因此我们需要另外一个数据结构记录当前哪些视频已经上传，哪些还没有上传的，可以用一个boolean数组维护</li><li>当我们要求最小未上传索引时，先弹出堆顶已经上传的视频索引，那些肯定是过时数据，然后最后再弹出真正未上传的，直接计算得到结果</li><li>时间复杂度:O(NlogN)，空间复杂度:O(N)</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LUPrefix</span> &#123;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();  <span class="comment">// 维护未上传视频索引</span></span><br><span class="line">    <span class="type">boolean</span>[] up;   <span class="comment">// up[video]标记有没有上传video</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LUPrefix</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 注意到n+1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            pq.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        up = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(<span class="type">int</span> video)</span> &#123;</span><br><span class="line">        up[video] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 先弹出堆中已经上传的视频索引</span></span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty() &amp;&amp; up[pq.peek()]) pq.poll();</span><br><span class="line">        <span class="comment">// 再查看未上传的最小视频索引，减去1就是最长上传序列</span></span><br><span class="line">        <span class="keyword">return</span> pq.peek() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果要考虑到这种求xx最小的题目，还要做到实时维护和低的时间复杂度，可以考虑懒堆结合数组的方式记录</p></blockquote><h2 id="2034-股票价格波动"><a href="https://leetcode.cn/problems/stock-price-fluctuation/">2034. 股票价格波动</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StockPrice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    TreeMap+懒堆</span></span><br><span class="line"><span class="comment">    1.TreeMap维护最新的价格与时间戳映射，现在关键问题就是要怎样找出的单点修改下的的最值</span></span><br><span class="line"><span class="comment">    2.我们可以利用map映射的实时性与懒堆进行结合，具体地我们可以维护两个堆，一个大顶堆和一个小顶堆</span></span><br><span class="line"><span class="comment">    3.每当更新信息我们都将[时间戳,价格]的信息入队，当且仅当在查询时候我们依照map的信息排除堆中的过时信息，从而保证堆顶的弹出的是最值元素</span></span><br><span class="line"><span class="comment">    这种方式可以实现不用每次更新都大费周章地删除堆元素:O(N)操作</span></span><br><span class="line"><span class="comment">    时间复杂度:O(NlogN) 空间复杂度:O(N)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照时间戳降序排序</span></span><br><span class="line">    TreeMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((a, b) -&gt; b - a);</span><br><span class="line">    <span class="comment">// [时间戳,价格] 大顶堆与小顶堆</span></span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; maxHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; b[<span class="number">1</span>] - a[<span class="number">1</span>]);</span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; minHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(Comparator.comparingInt(a -&gt; a[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StockPrice</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> timestamp, <span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="comment">// 更新的信息入堆</span></span><br><span class="line">        maxHeap.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;timestamp, price&#125;);</span><br><span class="line">        minHeap.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;timestamp, price&#125;);</span><br><span class="line">        <span class="comment">// 更新map</span></span><br><span class="line">        map.put(timestamp, price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">current</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(map.firstKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 先更新堆，确保堆顶的数据是最新的</span></span><br><span class="line">        <span class="keyword">while</span> (!maxHeap.isEmpty() &amp;&amp; maxHeap.peek()[<span class="number">1</span>] != map.get(maxHeap.peek()[<span class="number">0</span>])) maxHeap.poll();</span><br><span class="line">        <span class="keyword">return</span> maxHeap.peek()[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!minHeap.isEmpty() &amp;&amp; minHeap.peek()[<span class="number">1</span>] != map.get(minHeap.peek()[<span class="number">0</span>])) minHeap.poll();</span><br><span class="line">        <span class="keyword">return</span> minHeap.peek()[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总的来说，懒堆的精髓就是尽量避免主动移除O(N)操作，等到要弹出的时候再核查去掉不符合要求的数据。</p></blockquote>]]></content>
    
    
    <summary type="html">总结一些关于堆(优先队列)的题目以及注意的地方</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="堆" scheme="https://www.fomal.cc/tags/%E5%A0%86/"/>
    
    <category term="优先队列" scheme="https://www.fomal.cc/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>常用emoji和颜文字</title>
    <link href="https://www.fomal.cc/posts/61cc47a8.html"/>
    <id>https://www.fomal.cc/posts/61cc47a8.html</id>
    <published>2022-08-31T15:21:00.000Z</published>
    <updated>2022-10-23T15:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>1.小图标合集</h1><div class="tabs" id="小图标"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#小图标-1">笑脸</button></li><li class="tab"><button type="button" data-href="#小图标-2">头像</button></li><li class="tab"><button type="button" data-href="#小图标-3">饰品</button></li><li class="tab"><button type="button" data-href="#小图标-4">蛋糕</button></li><li class="tab"><button type="button" data-href="#小图标-5">车辆</button></li><li class="tab"><button type="button" data-href="#小图标-6">爱心</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="小图标-1"><p>😀😁😂🤣😃😄😅😆😉😊😋😎😍😘🥰😗😙😚☺🙂🤗🤩🤔<br>🤨😐😑😶🙄😏😣😥😮🤐😯😪😫🥱😴😌😛😜😝🤤😒😓😔😕<br>🙃🤑😲☹🙁😖😞😟😤😢😭😦😧😨😩🤯😬😰😱🥵🥶😳 🤪😵🥴😠😡🤬😷🤒🤕🤢🤮🤧😇🥳🥺🤡🤠🤥🤫🤭🧐<br>🤓😈👿👹👺💀☠👻👽👾🤖💩😺😸😹😻😼😽🙀😿😾🐱‍👤🐱‍🏍<br>🐱‍💻🐱‍🐉🐱‍👓🐱‍🚀🙈🙉🙊🐵🐶🐺🐱🦁🐯🦒🦊🦝🐮🐷🐗🐭🐹<br>🐰🐻🐨🐼🐸🦓🐴🦄🐔🐲🐽🐾🐒🦍🦧🦮🐕‍🦺🐩🐕🐈🐅🐆🐎🦌<br>🦏🦛🐂🐃🐄🐖🐏🐑🐐🐪🐫🦙🦘🦥🦨🦡🐘🐁🐀🦔🐇🐿🦎<br>🐊🐢🐍🐉🦕🦖🦦🦈🐬🐳🐋🐟🐠🐡🦐🦑🐙🦞🦀🐚🦆🐓🦃🦅🕊<br>🦢🦜🦩🦚🦉🐦🐧🐥🐤🐣🦇🦋🐌🐛🦟🦗🐜🐝🐞🦂🕷🕸🦠🧞<br>‍♀️🧞‍♂️🗣👤👥👁👀🦴🦷👅👄🧠🦾🦿👣🤺⛷🤼‍♂️🤼‍♀<br>👯‍♂️👯‍♀️💑👩‍❤️‍👩👨‍❤️‍👨💏👩‍❤️‍💋‍👩👨‍❤ ️<br>💋‍ 👨👪👨‍👩‍👦👨‍👩‍👧👨‍👩‍👧‍👦👨‍👩‍👦‍👦👨‍👩‍👧‍👧👨‍👨‍👦👨‍👨‍👧👨<br>‍👨‍👧‍👦👨‍👨‍👦‍👦👨‍👨‍👧‍👧👩‍👩‍👦👩‍👩‍👧👩‍👩‍👧‍👦👩‍👩‍👦‍👦👩‍👩‍👧‍👧<br>👩‍👦👩‍👧👩‍👧‍👦👩‍👦‍👦👩‍👧‍👧👨‍👦👨‍👧👨‍👧‍👦👨‍👦‍👦👨‍👧‍👧👭<br>👩🏻‍🤝‍👩🏻👩🏼‍🤝‍👩🏻👩🏼‍🤝‍👩🏼👩🏽‍🤝‍👩🏻👩🏽‍🤝‍👩🏼👩🏽‍🤝‍👩🏽👩🏾‍🤝‍👩🏻👩🏾‍🤝‍👩🏼👩🏾‍🤝‍👩🏽👩🏾‍🤝‍👩🏾👩🏿‍🤝‍👩🏻<br>👩🏿‍🤝‍👩🏼👩🏿‍🤝‍👩🏽👩🏿‍🤝‍👩🏾👩🏿‍🤝‍👩🏿👫👩🏻‍🤝‍🧑🏻👩🏻‍🤝‍🧑🏼👩🏻‍🤝‍🧑🏽👩🏻‍🤝‍🧑🏾👩🏻‍🤝‍🧑🏿<br>👩🏼‍🤝‍🧑🏻👩🏼‍🤝‍🧑🏼👩🏼‍🤝‍🧑🏽👩🏼‍🤝‍🧑🏾👩🏼‍🤝‍🧑🏿👩🏽‍🤝‍🧑🏻👩🏽‍🤝‍🧑🏼👩🏽‍🤝‍🧑🏽 👩🏽‍🤝<br>‍🧑🏾👩🏽‍🤝‍🧑🏿👩🏾‍🤝‍🧑🏻👩🏾‍🤝‍🧑🏼👩🏾‍🤝‍🧑🏽👩🏾‍🤝‍🧑🏾👩🏾‍🤝‍🧑🏿👩🏿‍🤝‍🧑🏻 👩🏿 ‍🤝‍🧑🏼👩🏿‍🤝‍🧑🏽👩🏿‍🤝‍🧑🏾<br>👩🏿‍🤝‍🧑🏿👬👨🏻‍🤝‍👨🏻👨🏼‍🤝‍👨🏻👨🏼‍🤝‍👨🏼👨🏽‍🤝‍👨🏼👨🏽‍🤝‍👨🏻 👨🏽‍🤝‍👨🏽👨🏾‍🤝‍👨🏻👨🏾‍🤝‍👨🏼👨🏾‍🤝‍👨🏽👨🏾‍🤝‍👨🏾👨🏿‍🤝‍👨🏻👨🏿‍🤝‍👨🏼👨🏿‍🤝‍👨🏽👨🏿‍🤝‍👨🏾👨🏿‍🤝‍👨🏿</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="小图标-2"><p>👩👨🧑👧👦🧒👶👵👴🧓👩‍🦰👨‍🦰👩‍🦱👨‍🦱👩‍🦲👨‍🦲👨‍🦳👱‍♀️<br>👱‍♂️👸🤴👳‍♀️👳‍♂️👲🧔👼🤶🎅👮‍♀️👮‍♂️🕵️‍♀️🕵️‍♂️💂‍♀️<br>💂‍♂️👷‍♀️👷‍♂️👩‍⚕️👨‍⚕️👩‍🎓👨‍🎓👩‍🏫👨‍🏫👩‍⚖️👨‍⚖️<br>👩‍🌾👨‍🌾👩‍🍳👨‍🍳👩‍🔧👨‍🔧👩‍🏭👨‍🏭👩‍💼👨‍💼👩‍🔬👨‍🔬👩‍💻👨‍💻👩‍🎤👨‍🎤👩<br>‍🎨👨‍🎨👩‍✈️👨‍✈️👩‍🚀👨‍🚀👩‍🚒👨‍🚒🧕👰🤵🤱🤰🦸‍♀️🦸‍♂️🦹‍♀️🦹‍♂️<br>🧙‍♀️🧙‍♂️🧚‍♀️🧚‍♂️🧛‍♀️🧛‍♂️🧜‍♀️🧜‍♂️🧝‍♀️🧝‍♂️🧟‍♀️🧟‍♂️🙍‍♀️<br>🙍‍♂️🙎‍♀️🙎‍♂️🙅‍♀️🙅‍♂️🙆‍♀️🙆‍♂️🧏‍♀️🧏‍♂️💁‍♀️<br>💁‍♂️🙋‍♀️🙋‍♂️🙇‍♀️🙇‍♂️🤦‍♀️🤦‍♂️🤷‍♀️🤷‍♂️<br>💆‍♀️💆‍♂️💇‍♀️💇‍♂️🧖‍♀️🧖‍♂️🤹‍♀️🤹‍♂️👩‍🦽👨‍🦽👩‍🦼<br>👨‍🦼👩‍🦯👨‍🦯🧎‍♀️🧎‍♂️🧍‍♀️🧍‍♂️🚶‍♀️🚶‍♂️🏃‍♀️🏃‍♂️💃🕺<br>🧗‍♀️🧗‍♂️🧘‍♀️🧘‍♂️🛀🛌🕴🏇🏂🏌️‍♀️🏌️‍♂️🏄‍♀️🏄‍♂️🚣‍♀️<br>🚣‍♂️🏊‍♀️🏊‍♂️🤽‍♀️🤽‍♂️🤾‍♀️🤾‍♂️⛹️‍♀️⛹️‍♂️<br>🏋️‍♀️🏋️‍♂️🚴‍♀️🚴‍♂️🚵‍♀️🚵‍♂️🤸‍♀️🤸‍♂️🤳💪🦵🦶<br>👂🦻👃🤏👈👉☝👆✌✌🤞🖖🤘🤙🖐✋👌👍👎✊👊🤛🤜🤚👋✍🤟👏👐🙌🤲🙏🤝💅</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="小图标-3"><p>🎈🎆🎇🧨✨🎉🎊🎃🎄🎋🎍🎎🎏🎐🎑🧧🎀🎁🎗🎟🎫🎠🎡🎢🎪🎭🖼🎨<br>🧵🧶🛒👓🕶🦺🥽🥼🧥👔👕👖🩳🧣🧤🧦👗🥻👘👚👜👑⚾⚽🏓🏉<br>🏈🥅🥏🪁🎯🥇🥈🥉🏅🎖🏆🎰🕹🎮🪀🎴📢♥🔔♣♠🎸🎺🎷🎶🎵🔑🔐🔏🔓<br>⚒🛠🧪⚗🩸🧲🔫🖲🗿🔋💽🔍🔎📼📔📓📒📃📜📄📑📰📙📚📩📤📥📦📫<br>📪📬📭📁📂🗂🖌✒🗒📅📆🗓📎⌛⏳⌚⏰⏱⏲🗃✂📐🗑📍📌📋📊📉📈📇</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="小图标-4"><p>🍕🍔🍟🌭🧂🍿🥓🥚🍳🧇🥞🧈🍞🥐🥨🥯🥙🥪🌮🌯🥫🍖🍗🥩🍠 🥠<br>🥡🍱🍚🍛🍜🦪🍣🍤🍥🥮🍢🧆🥘🍲🍝🥣🍧🍦🍨🍩🍪🎂🍰🧁🍫🍬🍭<br>🍡🍮🍯🍼🥛🧃☕🍵🧉🍶🍾🍷🍸🍹🍺🍻🥂🥃🧊🥤🥢🍴🥄🏺🥝🥥🍇🍈🍉<br>🍊🍌🍋🍍🥭🍎🍏🍐🍑🍒🍓🍅🍆🌽🌶🍄🥑🥒🥬🥦🥔🧄🧅🥕🌰🥜💐🌸🏵<br>🌹🌺🌻🌼🌷🥀☘🌱🌲🌳🌴🌵🌾🌿🍀🍁🍂🍃</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="小图标-5"><p>🚗🚓🚕🛺🚙🚌🚎🚒🚚🚛🚜🚘🚔🚖🚍🦽🦼🛹🚲🛴🛵🏍🚄🚅🚈🚝🚞<br>🚃🚋🚆🛩🚉🪂🚊✈🚇🛫🚟🛬🚠💺🚡🚁🚀🚂🛸🛰⛵🚤🛥⛴🛳🚢⚓🌎🌏<br>🛤🏕🗺🏞🧭🛣🏔🏖⛰🏜🌋🏝🗻🏚🏙🏘🏗🏛🕋🕌🛕🕍⛩⛪去🏰🏯🗼🌉<br>🛁🌝🌤⛈⛅☁🌩🌨🌧🌦🌥🌜🌞⭐🌟🌈🌀🌬🌡☄🌠☔🌊⛱⚡❄☃⛄🔥</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="小图标-6"><p>❤🧡💛💚💙💜🤎🖤🤍💔❣💕💞💓💗💖💘💝💟💌💥💤💦💨💫🕳💯🔅🔆⚜<br>〽❓❔❗❕〰➰✔💲💱➕➖✖➗💭🗯💬🗨👁‍🗨🕐🕑🕒🕧🕦🕥🕤🕝🕟🕠🕡🕢</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.颜文字</h1><h2 id="2-1-常用颜文字：">2.1 常用颜文字：</h2><p>【啊啊】      w(ﾟДﾟ)w<br>【擦眼泪】    (ノへ￣、)<br>【不屑】      (￣_,￣ )<br>【好耶】      ヽ(✿ﾟ▽ﾟ)ノ<br>【棒】      (๑•̀ㅂ•́)و✧<br>【抽】      (￣ε(#￣)☆╰╮o(￣皿￣///)<br>【亲】      （づ￣3￣）づ╭❤～<br>【汗】      Σ( ° △ °|||)︴<br>【笨】      (～￣(OO)￣)ブ<br>【擦】      凸(艹皿艹 )<br>【啵啵】      (* ￣3)(ε￣ <em>)<br>【挖鼻屎】      (<em>￣rǒ￣)<br>【嗷】      ┗|｀O′|┛ 嗷~~<br>【飞】      ︿(￣︶￣)︿<br>【好滴】      (u‿ฺu✿ฺ)<br>【hi】      Hi~ o(<em>￣▽￣</em>)ブ<br>【啦啦】      ♪(^∇^</em>)<br>【拍桌】      o(<em>≧▽≦)ツ┏━┓<br>【惊喜】      ╰(<em>°▽°</em>)╯<br>【嘟嘴】      （○｀ 3′○）<br>【乖】      o(</em>^＠^</em>)o<br>【喂】      (#<code>O′) 【愣住】      (°ー°〃) 【放屁】      ○|￣|_ =3 【哼哼】      o(￣ヘ￣o＃) 【可恶】      （＝。＝） 【切】      ~~( ﹁ ﹁ ) ~~~ 【去】      (ーー゛) 【生气】      (ー</code>′ー)<br>【怨念】      o(一︿一+)o<br>【崩溃】      o(≧口≦)o<br>【不是我】      ㄟ( ▔, ▔ )ㄏ<br>【败了】      (o_ <em>)ﾉ<br>【呃呃呃】      (⊙﹏⊙)<br>【切】      (ˉ▽￣～) 切~~<br>【无言】      （＊￣（エ）￣）<br>【摊手】      ┑(￣Д ￣)┍<br>【不懂】      (＠</em>＠;)<br>【呆】      ━┳━　━┳━<br>【扶额】      (☆′益<code>)c 【囧】      （′Д</code>）<br>【投降】      ┗( T﹏T )┛<br>【我错了】      (。﹏。<em>)<br>【喵星人】      ( =•ω•= )m<br>【喵呜】          ≡ω≡<br>【熊】      (<em>￣(エ)￣)<br>【害羞】      (✿◡‿◡)<br>【脸红】      (</em>/ω＼</em>)<br>【呜呜呜】      ┭┮﹏┭┮<br>【拜拜】      ヾ(￣▽￣)Bye~Bye~<br>【斜眼】      ( ﹁ ﹁ ) ~→<br>【美味】      Ψ(￣∀￣)Ψ<br>【闪】      ✧(≖ ◡ ≖✿)<br>【淡定】      ━(￣ー￣*|||━━<br>【太可怕了】      ヽ(*。&gt;Д&lt;)o゜<br>【恐怖】      ┌(。Д。)┐<br>【orz】      ○|￣|_<br>【good】      o(￣▽￣)ｄ<br>【伤心】      (；′⌒`)<br>【糟糕】      X﹏X<br>【圣诞】      *&lt;|:-)</p><h2 id="2-2-高兴的颜文字">2.2 高兴的颜文字</h2><p>【棒】      (๑•̀ㅂ•́)و✧<br>【爆笑】      ヾ(≧▽≦*)o<br>【bingo】      (o゜▽゜)o☆[BINGO!]<br>【得瑟】      ～(￣▽￣～)(～￣▽￣)～<br>【得意】      &lt;(￣︶￣)&gt;<br>【嗯哪】      嗯~ o(<em>￣▽￣</em>)o<br>【飞】      ︿(￣︶￣)︿<br>【嘎嘎】      ．&lt;{=．．．．（嘎~嘎~嘎~）<br>【干杯】      (￣▽￣)～■干杯□～(￣▽￣)<br>【高兴】      φ(゜▽゜*)♪<br>【跟你说】  ╰(￣▽￣)╭<br>【go】      &lt;(￣︶￣)↗[GO!]<br>【good】      o(￣▽￣)ｄ<br>【哈哈哈哈】      <em>′∀<code>)′∀</code>)</em>′∀<code>)*′∀</code>)<br>【嗨】      (｡･∀･)ﾉﾞ<br>【嗨】      ヾ(≧∇≦*)ゝ<br>【好滴】      (u‿ฺu✿ฺ)<br>【好滴】      （゜▽＾*））<br>【好开心】      (<em>^▽^</em>)<br>【好耶】      ヽ(✿ﾟ▽ﾟ)ノ<br>【happy】      (′▽<code>ʃ♡ƪ) 【hi】      Hi~ o(*￣▽￣*)ブ 【hiahia】      ○( ＾皿＾)っHiahiahia… 【high】      (( へ(へ′∀</code>)へ<br>【吼吼】      ^O^<br>【欢迎】      ( ＾∀＾）／欢迎＼( ＾∀＾）<br>【获胜】      ヾ(￣ー￣)X(^▽^)ゞ<br>【惊喜】      ╰(<em>°▽°</em>)╯<br>【惊喜】      ⊙▽⊙<br>【击掌】      ( ￣ー￣)人(^▽^ )<br>【卡拉ok】      …φ(0￣*)啦啦啦_φ(<em>￣0￣)′<br>【k歌】  …φ(0￣</em>)啦啦啦_φ(<em>￣0￣)<br>【开心】      (</em>^▽^<em>)<br>【啦啦】      ♪(^∇^</em>)<br>【乐】      (๑′ㅂ<code>๑) 【乐】      φ(≧ω≦*)♪ 【乐呵】      (≧∀≦)ゞ 【满足】      (๑ˉ∀ˉ๑) 【满足】      o(*￣︶￣*)o 【咩哈哈】      &lt;(*￣▽￣*)/ 【ohyeah】      ε(*′･∀･｀)зﾞ 【哦哦】      （≧0≦）//（-_-。）・・・ 【噢耶】      (　ﾟ∀ﾟ) ﾉ♡ 【噢耶】      (^&amp;^)/ 【拍手】      ””\(￣ー￣) (￣ー￣)//”” 【拍桌】      o(*≧▽≦)ツ┏━┓ 【飘】      (～￣▽￣)～ 【飘飘然】      ︿(￣︶￣)︿ 【噗】      (/≧▽≦)/ 【期待】      (☆▽☆) 【散花】      *★,°*:.☆(￣▽￣)/$:*.°★* 。 【闪】      ✧(≖ ◡ ≖✿) 【太棒了】      ㄟ(≧◇≦)ㄏ 【逃】      ヽ(ﾟ∀ﾟ*)ﾉ━━━ｩ♪ 【陶醉】      ( *︾▽︾) 【thx】      ☆⌒(*＾-゜)v THX!! 【天啊】      ♪(′∇</code><em>)<br>【万岁】      ！<em>★,°</em>:.☆(￣▽￣)/$:</em>.°★*<br>【我回来啦】      ||ヽ(<em>￣▽￣</em>)ノミ|Ю<br>【我来了】      ~(～￣▽￣)～<br>【兴奋】      (p≧w≦q)<br>【幸福】      o(<em>￣▽￣</em>)o<br>【耶】      (＾－＾)V<br>【哟】      (＾Ｕ＾)ノ~ＹＯ<br>【有了】      (o゜▽゜)o☆<br>【赞】      (((o(<em>ﾟ▽ﾟ</em>)o)))<br>【涨】      (￣︶￣)↗<br>【振奋】      (o&gt;ε(o&gt;ｕ(≧∩≦)<br>【真好】      o(^▽^)o</p><h2 id="2-3-卖萌颜文字">2.3 卖萌颜文字</h2><p>【嗷】      ヾ(≧O≦)〃嗷~<br>【嗷】      ┗|｀O′|┛ 嗷~~<br>【表】      &lt;(￣3￣)&gt; 表！<br>【蹭】      ( <em>￣▽￣)((≧︶≦</em>)<br>【等等】      …(*￣０￣)ノ[等等我…]<br>【好可爱】      （<em>＾-＾</em>）<br>【可爱】      n(<em>≧▽≦</em>)n<br>【卖萌】      =￣ω￣=<br>【真哒】      o(〃‘▽’〃)o</p><h2 id="2-4-震惊颜文字">2.4 震惊颜文字</h2><p>【啊啊】      Ｏ(≧口≦)Ｏ<br>【呆滞】      (￣△￣；)<br>【惊】      (⊙ˍ⊙)<br>【惊】      Σ(っ °Д °;)っ<br>【惊喜】      ╰(<em>°▽°</em>)╯</p><h2 id="2-5-亲吻颜文字">2.5 亲吻颜文字</h2><p>【啵啵】      (* ￣3)(ε￣ *)<br>【飞吻】      (*￣3￣)╭<br>【亲亲】      o(*￣3￣)o</p><h2 id="2-6-生气颜文字">2.6 生气颜文字</h2><p>【爆头】      ▄︻┻┳═一…… ☆（&gt;○&lt;）<br>【不开心】      ￣へ￣<br>【不满】      (<em>￣︿￣)<br>【不满】      （＃￣～￣＃）<br>【不爽】      (</em> ￣︿￣)<br>【不要啊】      ヽ（≧□≦）ノ<br>【擦】      凸(艹皿艹 )<br>【哼哼】      o(￣ヘ￣o＃)</p><h2 id="2-7-无奈颜文字">2.7 无奈颜文字</h2><p>【呃呃呃】      (⊙﹏⊙)<br>【没办法】      ╮（╯＿╰）╭<br>【无奈】      ╮(╯▽╰)╭<br>【飘过】  …((/- -)/</p>]]></content>
    
    
    <summary type="html">常用emoji和颜文字</summary>
    
    
    
    <category term="演示" scheme="https://www.fomal.cc/categories/%E6%BC%94%E7%A4%BA/"/>
    
    
    <category term="演示" scheme="https://www.fomal.cc/tags/%E6%BC%94%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>容斥原理+计数专题</title>
    <link href="https://www.fomal.cc/posts/34beab1a.html"/>
    <id>https://www.fomal.cc/posts/34beab1a.html</id>
    <published>2022-08-24T22:58:00.000Z</published>
    <updated>2022-08-24T22:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1711-大餐计数"><a href="https://leetcode.cn/problems/count-good-meals/">1711. 大餐计数</a></h3><p>细节满满的一题，组合计算问题再周赛的T3与T4经常出，对于常见的组合计算问题应该要掌握。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPairs</span><span class="params">(<span class="type">int</span>[] deliciousness)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashMap+计数+容斥原理:</span></span><br><span class="line"><span class="comment">        1 &lt;= deliciousness.length &lt;= 1e5</span></span><br><span class="line"><span class="comment">        0 &lt;= deliciousness[i] &lt;= 2^20</span></span><br><span class="line"><span class="comment">        看数据范围只能用O(N)、O(C*N)、O(NlogN)的时间复杂度算法进行求解</span></span><br><span class="line"><span class="comment">        1.预处理出2的0~21次幂</span></span><br><span class="line"><span class="comment">        2.HashMap统计每个数字出现的个数</span></span><br><span class="line"><span class="comment">        3.枚举每个HashMap中的数字进行计数，以key为锚点，枚举所有的可能的二次幂并球出目标匹配数字；</span></span><br><span class="line"><span class="comment">            之后先统计相同数字组成的对，再统计不同数字组成的对进行相加</span></span><br><span class="line"><span class="comment">        4.最后记得对统计的数字/2</span></span><br><span class="line"><span class="comment">        坑点:</span></span><br><span class="line"><span class="comment">        1.2^0=1也是2的次幂</span></span><br><span class="line"><span class="comment">        2.相同数字的计算方法为:num*(num-1)/2，其中num为数字个数</span></span><br><span class="line"><span class="comment">        3.相同数字的计算方法为:cnt[t]*cnt[key]/2，其中t为要匹配的目标数字，key为当前数字</span></span><br><span class="line"><span class="comment">            可以将2与3统一起来最后一起除2</span></span><br><span class="line"><span class="comment">        4.这里long类型在统计过程中可以不进行MOD(&lt;1e10)，最后才取余即可</span></span><br><span class="line"><span class="comment">            最好先进行除2操作最后再取余，如果顺序反了最后取余再除2结果不对!</span></span><br><span class="line"><span class="comment">            还有最后取余的一定一定要把MOD括起来，否则就会将res先转换为int了!!!!</span></span><br><span class="line"><span class="comment">        5.枚举二次幂可以倒序提前退出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 美味程度之和上限为2^21，预处理出2^0~2^21的幂</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">1</span>, MOD = (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">22</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">21</span>; i++) &#123;</span><br><span class="line">            arr[i] = cur;</span><br><span class="line">            cur *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计数字对应个数</span></span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : deliciousness) &#123;</span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="comment">// 寻找每个数字缺失的另一半</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> key : map.keySet()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> map.get(key); <span class="comment">// 该数字key的数目</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">21</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[i] - key;  <span class="comment">// 要找的目标数字</span></span><br><span class="line">                <span class="keyword">if</span> (t &lt; <span class="number">0</span>) <span class="keyword">break</span>;   <span class="comment">// 从大的开始枚举，如果当前已经小于0，那么前面的必定小于0，提前break</span></span><br><span class="line">                <span class="comment">// 1.先统计相同数字组成的:组合种数=cnt[key]*(cnt[key]-1)/2</span></span><br><span class="line">                <span class="keyword">if</span> (t == key) &#123;</span><br><span class="line">                    res += num * (num - <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (map.containsKey(t)) &#123;</span><br><span class="line">                    <span class="comment">// 2.再统计不同数字之间的cnt[t]*cnt[key]/2</span></span><br><span class="line">                    res += num * map.get(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后统计重了一倍应该除2</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) ((res &gt;&gt; <span class="number">1</span>) % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">容斥原理+计数</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="容斥原理" scheme="https://www.fomal.cc/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
    <category term="数学" scheme="https://www.fomal.cc/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL总结</title>
    <link href="https://www.fomal.cc/posts/54ed288e.html"/>
    <id>https://www.fomal.cc/posts/54ed288e.html</id>
    <published>2022-08-16T14:18:00.000Z</published>
    <updated>2022-08-16T14:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🍭🍭🍭 以下内容均转自<a href="https://dhc.pythonanywhere.com/entry/share/?key=3ad29aad765a2b98b2b2a745d71bef715507ee9db8adbec98257bac0ad84cbe4">路途博客的 MySQL 总结</a>(已获得作者允许)，最初来源为<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru">黑马程序员的 MySQL 视频课</a></p><div>本博客文章用途均是学习所用，无商业用途，如有侵权请联系博主删除！📧：1174008660@qq.com</div></blockquote><h1>1.基础篇</h1><h2 id="1-1-通用语法及分类">1.1 通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="DDL（数据定义语言）">DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作">数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项">注意事项</h5><ul><li>UTF8 字符集长度为 3 字节，有些符号占 4 字节，所以推荐用 utf8mb4 字符集</li></ul><h4 id="表操作">表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 [COMMENT 字段<span class="number">1</span>注释],</span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>类型 [COMMENT 字段<span class="number">2</span>注释],</span><br><span class="line">字段<span class="number">3</span> 字段<span class="number">3</span>类型 [COMMENT 字段<span class="number">3</span>注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将 emp 表的 nickname 字段修改为 username，类型为 varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML（数据操作语言）">DML（数据操作语言）</h3><h4 id="添加数据">添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-2">注意事项</h5><ul><li><strong>字符串</strong>和<strong>日期类型</strong>数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据">更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = 'Jack' WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="DQL（数据查询语言）">DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名字段</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后的条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><h4 id="基础查询">基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'</code><br>/ 之后的_不作为通配符</p><h4 id="条件查询">条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在 in 之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是 NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 ||</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 年龄等于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 小于等于</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 没有身份证</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> idcard <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">-- 有身份证</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 不等于</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄在20到30之间</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 下面语句不报错，但查不到任何信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">30</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 性别为女且年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">30</span> <span class="keyword">and</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="comment">-- 年龄等于25或30或35</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">25</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">35</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>);</span><br><span class="line"><span class="comment">-- 姓名为两个字</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"><span class="comment">-- 身份证最后为X</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;%X&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="聚合查询（聚合函数）">聚合查询（聚合函数）</h4><p>常见聚合函数(null 值不参与聚合函数运算)：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p><h4 id="分组查询">分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where 是分组之前进行过滤，不满足 where 条件不参与分组；having 是分组后对结果进行过滤。</li><li>判断条件不同：where 不能对聚合函数进行判断，而 having 可以。</li></ul><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性数量</span></span><br><span class="line"><span class="keyword">select</span> gender, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性的平均年龄</span></span><br><span class="line"><span class="keyword">select</span> gender, <span class="built_in">avg</span>(age) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 年龄小于45，并根据工作地址分组</span></span><br><span class="line"><span class="keyword">select</span> workaddress, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress;</span><br><span class="line"><span class="comment">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span></span><br><span class="line"><span class="keyword">select</span> workaddress, <span class="built_in">count</span>(<span class="operator">*</span>) address_count <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress <span class="keyword">having</span> address_count <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-3">注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为<strong>聚合函数</strong>和<strong>分组字段</strong>，查询其他字段无任何意义</li></ul><h4 id="排序查询">排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据年龄升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br><span class="line"><span class="comment">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>, entrydate <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-4">注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询">分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询第一页数据，展示10条</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee LIMIT <span class="number">0</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 查询第二页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee LIMIT <span class="number">10</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-5">注意事项</h5><ul><li>起始索引从 0 开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL 是 LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL-执行顺序">DQL 执行顺序</h4><p>1.FROM(从哪张表查询) -&gt; 2.WHERE(对数据进行筛选) -&gt; 3.GROUP BY(对筛选的数据进行分组) -&gt; 4.HAVING(分组后的条件列表)-&gt; 5.SELECT(选择对应数据) -&gt; 6.ORDER BY(对结果排序) -&gt; 7.LIMIT(对结果分页)</p><h3 id="DCL">DCL</h3><h4 id="管理用户">管理用户</h4><p>查询用户：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USER</span> mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>创建用户:<br><code>CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';</code></p><p>修改用户密码：<br><code>ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';</code></p><p>删除用户：<br><code>DROP USER '用户名'@'主机名';</code></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户test，只能在当前主机localhost访问</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 创建用户test，能在任意主机访问</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 修改密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-6">注意事项</h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制">权限控制</h4><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><p>更多权限请看<a href="#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8" title="权限一览表">权限一览表</a></p><p>查询权限：<br><code>SHOW GRANTS FOR '用户名'@'主机名';</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';</code></p><h5 id="注意事项-7">注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="1-2-函数">1.2 函数</h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数">字符串函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将 s1, s2, …, sn 拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串 pad 对 str 的左边进行填充，达到 n 个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串 pad 对 str 的右边进行填充，达到 n 个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串 str 从 start 位置起的 len 个长度的字符串（注意索引从 1 开始）</td></tr></tbody></table><p>使用示例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 拼接</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>);</span><br><span class="line"><span class="comment">-- 小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="comment">-- 大写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="comment">-- 左填充</span></span><br><span class="line"><span class="keyword">SELECT</span> LPAD(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="comment">-- 右填充</span></span><br><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="comment">-- 去除空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27; Hello World &#x27;</span>);</span><br><span class="line"><span class="comment">-- 切片（起始索引为1）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;Hello World&#x27;</span>, <span class="number">1</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="数值函数">数值函数</h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回 x/y 的模</td></tr><tr><td>RAND()</td><td>返回 0~1 内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数 x 的四舍五入值，保留 y 位小数</td></tr></tbody></table><h3 id="日期函数">日期函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定 date 的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定 date 的月份</td></tr><tr><td>DAY(date)</td><td>获取指定 date 的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔 expr 后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间 date1 和结束时间 date2 之间的天数</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- DATE_ADD</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="number">70</span> <span class="keyword">YEAR</span>);</span><br></pre></td></tr></table></figure><h3 id="流程函数">流程函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果 value 为 true，则返回 t，否则返回 f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果 value1 不为空，返回 value1，否则返回 value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果 val1 为 true，返回 res1，… 否则返回 default 默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果 expr 的值等于 val1，返回 res1，… 否则返回 default 默认值</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">name,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">then</span> <span class="string">&#x27;中年&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;青年&#x27;</span> <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">from</span> employee;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">name,</span><br><span class="line">(<span class="keyword">case</span> workaddress <span class="keyword">when</span> <span class="string">&#x27;北京市&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">when</span> <span class="string">&#x27;上海市&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;二线城市&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">&#x27;工作地址&#x27;</span></span><br><span class="line"><span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><h2 id="1-3-约束">1.3 约束</h2><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为 null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1 版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p><strong>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束</strong>。</p><h3 id="常用约束">常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">age <span class="type">int</span> <span class="keyword">check</span>(age <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">and</span> age <span class="operator">&lt;</span> <span class="number">120</span>),</span><br><span class="line">status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束">外键约束</h3><p>作用：保证数据一致性与完整性</p><p>添加外键：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">...</span><br><span class="line">[<span class="keyword">CONSTRAINT</span>] [外键名称] <span class="keyword">FOREIGN</span> KEY(外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例子</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key(dept_id) <span class="keyword">references</span> dept(id);</span><br></pre></td></tr></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-更新行为">删除/更新行为</h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与 RESTRICT 一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与 NO ACTION 一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为 null（要求该外键允许为 null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb 不支持）</td></tr></tbody></table><p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="1-4-多表查询">1.4 多表查询</h2><h3 id="多表关系">多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多">一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多">多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一">一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询">查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合 A 集合和 B 集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p><h3 id="内连接查询">内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工姓名，及关联的部门的名称</span></span><br><span class="line"><span class="comment">-- 隐式</span></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> employee <span class="keyword">as</span> e, dept <span class="keyword">as</span> d <span class="keyword">where</span> e.dept <span class="operator">=</span> d.id;</span><br><span class="line"><span class="comment">-- 显式</span></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> employee <span class="keyword">as</span> e <span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><h3 id="外连接查询">外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表 1 的所有数据，包含表 1 和表 2 交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 左</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.name <span class="keyword">from</span> employee <span class="keyword">as</span> e <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br><span class="line"><span class="keyword">select</span> d.name, e.<span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;  <span class="comment">-- 这条语句与下面的语句效果一样</span></span><br><span class="line"><span class="comment">-- 右</span></span><br><span class="line"><span class="keyword">select</span> d.name, e.<span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">as</span> e <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><p>左连接可以查询到没有 dept 的 employee，右连接可以查询到没有 employee 的 dept</p><h3 id="自连接查询">自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工及其所属领导的名字</span></span><br><span class="line"><span class="keyword">select</span> a.name, b.name <span class="keyword">from</span> employee a, employee b <span class="keyword">where</span> a.manager <span class="operator">=</span> b.id;</span><br><span class="line"><span class="comment">-- 没有领导的也查询出来</span></span><br><span class="line"><span class="keyword">select</span> a.name, b.name <span class="keyword">from</span> employee a <span class="keyword">left</span> <span class="keyword">join</span> employee b <span class="keyword">on</span> a.manager <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure><h3 id="联合查询-union-union-all">联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表A ...</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表B ...</span><br></pre></td></tr></table></figure><h4 id="注意事项-8">注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用 or 效率高，不会使索引失效</li></ul><h3 id="子查询">子查询</h3><p>SQL 语句中嵌套 SELECT 语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询">标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询销售部所有员工</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>;</span><br><span class="line"><span class="comment">-- 根据销售部部门ID，查询员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 合并（子查询）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询xxx入职之后的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> (<span class="keyword">select</span> entrydate <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="列子查询">列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与 ANY 等同，使用 SOME 的地方都可以使用 ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询销售部和市场部的所有员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询比财务部所有人工资都高的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">all</span>(<span class="keyword">select</span> salary <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span>));</span><br><span class="line"><span class="comment">-- 查询比研发部任意一人工资高的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">any</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="行子查询">行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询与xxx的薪资及直属领导相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> (salary, manager) <span class="operator">=</span> (<span class="number">12500</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> (salary, manager) <span class="operator">=</span> (<span class="keyword">select</span> salary, manager <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="表子查询">表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> (job, salary) <span class="keyword">in</span> (<span class="keyword">select</span> job, salary <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xxx1&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;xxx2&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.<span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>) <span class="keyword">as</span> e <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><h2 id="1-5-事务">1.5 事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询张三账户余额</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 2. 将张三账户余额-1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 此语句出错后张三钱减少但是李四钱没有增加</span></span><br><span class="line">模拟<span class="keyword">sql</span>语句错误</span><br><span class="line"><span class="comment">-- 3. 将李四账户余额+1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看事务提交方式</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;</span><br><span class="line"><span class="comment">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@AUTOCOMMIT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置手动提交后上面代码改为：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h3 id="四大特性-ACID">四大特性 ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务">并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a></p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√ 表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1>2.进阶篇</h1><h2 id="2-1-存储引擎">2.1 存储引擎</h2><p>MySQL 体系结构：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png" alt="层级描述" title="层级描述"></p><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是 InnoDB。</p><p>相关操作：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询建表语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> account;</span><br><span class="line"><span class="comment">-- 建表时指定存储引擎</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB;</span><br><span class="line"><span class="comment">-- 查看当前数据库支持的存储引擎</span></span><br><span class="line"><span class="keyword">show</span> engines;</span><br></pre></td></tr></table></figure><h3 id="InnoDB">InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx 代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like 'innodb_file_per_table';</code></p><p>从 idb 文件提取表结构数据：<br>（在 cmd 运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p><h3 id="MyISAM">MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory">Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash 索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点">存储引擎特点</h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree 索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash 索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6 版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h3 id="存储引擎的选择">存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="2-2-性能分析">2.2 性能分析</h2><h3 id="查看执行频次">查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE 'Com_______';</code> 或者 <code>SHOW SESSION STATUS LIKE 'Com_______';</code><br>例：<code>show global status like 'Com_______'</code></p><h3 id="慢查询日志">慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认 10 秒）的所有 SQL 语句的日志。<br>MySQL 的慢查询日志默认没有开启，需要在 MySQL 的配置文件（/etc/my.cnf）中配置如下信息： # 开启慢查询日志开关<br>slow_query_log=1 # 设置慢查询日志的时间为 2 秒，SQL 语句执行时间超过 2 秒，就会视为慢查询，记录慢查询日志<br>long_query_time=2<br>更改后记得重启 MySQL 服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like 'slow_query_log';</code></p><h3 id="profile">profile</h3><p>show profile 能在做 SQL 优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过 set 语句在 session/global 级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定 query_id 的 SQL 语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定 query_id 的 SQL 语句 CPU 的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain">explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法： # 直接在 select 语句之前加上关键字 explain / desc<br>EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id 相同，执行顺序从上到下；id 不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE 之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL 认为必须要执行的行数，在 InnoDB 引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered 的值越大越好</li></ul><h2 id="2-3-索引">2.3 索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的 IO 成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低 CPU 的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构">索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持 B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree 索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash 索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree 索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6 版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="B-Tree">B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png" alt="二叉树" title="二叉树"></p><p>二叉树的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为 5（5 阶）的 b-tree 为例（每个节点最多存储 4 个 key，5 个指针）</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-2">B+Tree</h4><p>结构图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p><h4 id="Hash">Hash</h4><p>哈希索引就是采用一定的 hash 算法，将键值换算成新的 hash 值，映射到对应的槽位上，然后存储在 hash 表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了 hash 冲突（也称为 hash 碰撞），可以通过链表来解决。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p><p>特点：</p><ul><li>Hash 索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应 hash 功能，hash 索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题">面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类">索引分类</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png" alt="演示图" title="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题">思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;Arm&#x27;</span>;</span><br><span class="line"><span class="comment">-- 备注：id为主键，name字段创建的有索引</span></span><br></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为 1k，一页中可以存储 16 行这样的数据。InnoDB 的指针占用 6 个字节的空间，主键假设为 bigint，占用字节数为 8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的 key 的数量，(n + 1) 表示指针数量（比 key 多一个）。算出 n 约为 1170。</p><p>如果树的高度为 2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为 3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法">语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_name <span class="keyword">on</span> tb_user(name);</span><br><span class="line"><span class="comment">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_user_phone <span class="keyword">on</span> tb_user (phone);</span><br><span class="line"><span class="comment">-- 为profession, age, status创建联合索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_pro_age_stat <span class="keyword">on</span> tb_user(profession, age, status);</span><br><span class="line"><span class="comment">-- 为email建立合适的索引来提升查询效率</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_email <span class="keyword">on</span> tb_user(email);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">drop</span> index idx_user_email <span class="keyword">on</span> tb_user;</span><br></pre></td></tr></table></figure><h3 id="使用规则">使用规则</h3><h4 id="最左前缀法则">最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p><h4 id="索引失效情况">索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = '15';</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处 phone 的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like '%工程';</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL-提示">SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在 SQL 语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force 就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-回表查询">覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是 select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name='xxx';</code>，也只需要通过辅助索引(name)查找到对应的 id，返回 name 和 name 索引对应的 id 即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name='xxx';</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下 SQL 语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username='itcast';</code></p><p>解：给 username 和 password 字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引">前缀索引</h4><p>当字段类型为字符串（varchar, text 等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘 IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是 1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> email) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="built_in">substring</span>(email, <span class="number">1</span>, <span class="number">5</span>)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure><p>show index 里面的 sub_part 可以看到接取的长度</p><h4 id="单列索引-联合索引">单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = '17799990010' and name = '韩信';</code><br>这句只会用到 phone 索引字段</p><h5 id="注意事项-9">注意事项</h5><ul><li>多条件联合查询时，MySQL 优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则">设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储 NULL 值，请在创建表时使用 NOT NULL 约束它。当优化器知道每列是否包含 NULL 值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="2-4-SQL-优化">2.4 SQL 优化</h2><h3 id="插入数据">插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过 1000 条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用 insert 语句插入性能较低，此时可以使用 MySQL 数据库提供的 load 指令插入。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 <span class="comment">--local-infile（这一行在bash/cmd界面输入）</span></span><br><span class="line">mysql <span class="comment">--local-infile -u root -p</span></span><br><span class="line"># 设置全局参数local_infile为<span class="number">1</span>，开启从本地加载文件导入数据的开关</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@local</span>_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;/root/sql1.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">&#x27;tb_user&#x27;</span> fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="主键优化">主键优化</h3><p>数据组织方式：在 InnoDB 存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充 100%，每个页包含了 2-N 行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的 50%），InnoDB 会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的 PPT 演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by-优化">order by 优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果 order by 字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain 的 extra 信息显示的是<code>Using index, Using filesort</code>，如果要优化掉 Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免出现 filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认 256k）</li></ul><h3 id="group-by-优化">group by 优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit-优化">limit 优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前 2000000 条记录，但仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 此语句耗时很长</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku limit <span class="number">9000000</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> tb_sku <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">9000000</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span></span><br><span class="line"><span class="comment">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span></span><br><span class="line"><span class="comment">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku <span class="keyword">as</span> s, (<span class="keyword">select</span> id <span class="keyword">from</span> tb_sku <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">9000000</span>, <span class="number">10</span>) <span class="keyword">as</span> a <span class="keyword">where</span> s.id <span class="operator">=</span> a.id;</span><br></pre></td></tr></table></figure><h3 id="count-优化">count 优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用 where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建 key-value 表存储在内存或硬盘，或者是用 redis</p><p>count 的几种用法：</p><ul><li>如果 count 函数的参数（count 里面写的那个字段）不是 NULL（字段值不为 NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟 count(*)一样，因为主键不能为空；count(字段)只计算字段值不为 NULL 的行；count(1)引擎会为每行添加一个 1，然后就 count 这个 1，返回结果也跟 count(*)一样；count(null)返回 0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB 引擎会遍历整张表，把每行的主键 id 值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有 not null 约束的话，InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为 null，不为 null，计数累加；有 not null 约束的话，InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="update-优化（避免行锁升级为表锁）">update 优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = '123' where id = 1;</code>，这句由于 id 有主键索引，所以只会锁这一行；<br><code>update student set no = '123' where name = 'test';</code>，这句由于 name 没有索引，所以会把整张表都锁住进行数据更新，解决方法是给 name 字段添加索引</p><h1>3.数据类型</h1><h2 id="整型">整型</h2><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1 个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2 个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3 个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4 个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8 个字节</td></tr></tbody></table><p>无符号在数据类型后加 unsigned 关键字。</p><h2 id="浮点型">浮点型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table><h2 id="日期和时间">日期和时间</h2><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><h2 id="字符串">字符串</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;=M&lt;=255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1 字节，在此，L&lt; = M 和 1&lt;=M&lt;=255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4 字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1 或 2 个字节，取决于枚举值的数目 (最大值为 65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个 SET 成员</td><td>1、2、3、4 或 8 个字节，取决于集合 成员的数量（最多 64 个成员）</td></tr></tbody></table><h2 id="二进制类型">二进制类型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)/8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的 BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的 BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的 BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table><h1>4.权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><table><thead><tr><th style="text-align:left">Privilege</th><th style="text-align:left">Grant Table Column</th><th style="text-align:left">Context</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td><td style="text-align:left">Synonym for “all privileges”</td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td><td style="text-align:left"><code>Alter_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td><td style="text-align:left"><code>Alter_routine_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td><td style="text-align:left"><code>Create_priv</code></td><td style="text-align:left">Databases, tables, or indexes</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td><td style="text-align:left"><code>Create_role_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td><td style="text-align:left"><code>Create_routine_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td><td style="text-align:left"><code>Create_tablespace_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td><td style="text-align:left"><code>Create_tmp_table_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td><td style="text-align:left"><code>Create_user_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td><td style="text-align:left"><code>Create_view_priv</code></td><td style="text-align:left">Views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td><td style="text-align:left"><code>Delete_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td><td style="text-align:left"><code>Drop_priv</code></td><td style="text-align:left">Databases, tables, or views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td><td style="text-align:left"><code>Drop_role_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td><td style="text-align:left"><code>Event_priv</code></td><td style="text-align:left">Databases</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td><td style="text-align:left"><code>Execute_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td><td style="text-align:left"><code>File_priv</code></td><td style="text-align:left">File access on server host</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td><td style="text-align:left"><code>Grant_priv</code></td><td style="text-align:left">Databases, tables, or stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td><td style="text-align:left"><code>Index_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td><td style="text-align:left"><code>Insert_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td><td style="text-align:left"><code>Lock_tables_priv</code></td><td style="text-align:left">Databases</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td><td style="text-align:left"><code>Process_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td><td style="text-align:left">See <code>proxies_priv</code> table</td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td><td style="text-align:left"><code>References_priv</code></td><td style="text-align:left">Databases or tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td><td style="text-align:left"><code>Reload_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td><td style="text-align:left"><code>Repl_client_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td><td style="text-align:left"><code>Repl_slave_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td><td style="text-align:left"><code>Select_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td><td style="text-align:left"><code>Show_db_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td><td style="text-align:left"><code>Show_view_priv</code></td><td style="text-align:left">Views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td><td style="text-align:left"><code>Shutdown_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td><td style="text-align:left"><code>Super_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td><td style="text-align:left"><code>Trigger_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td><td style="text-align:left"><code>Update_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td><td style="text-align:left">Synonym for “no privileges”</td><td style="text-align:left">Server administration</td></tr></tbody></table><p>GRANT 和 REVOKE 允许的动态权限</p><table><thead><tr><th style="text-align:left">Privilege</th><th style="text-align:left">Context</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td><td style="text-align:left">Dual password administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td><td style="text-align:left">Allow queries blocked by audit log filter</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td><td style="text-align:left">Audit log administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td><td style="text-align:left">Authentication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td><td style="text-align:left">Backup administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td><td style="text-align:left">Backup and Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td><td style="text-align:left">Backup and Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td><td style="text-align:left">Clone administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td><td style="text-align:left">Redo log archiving administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td><td style="text-align:left">NDB Cluster</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td><td style="text-align:left">Authentication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td><td style="text-align:left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td><td style="text-align:left">Resource group administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td><td style="text-align:left">Resource group administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr></tbody></table><h1>5.图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版 30 天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持 Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><h1>6.安装</h1><h1>7.小技巧</h1><ol><li>在 SQL 语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看 Mysql 数据库占用空间：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_schema &quot;Database Name&quot;</span><br><span class="line">     , <span class="built_in">SUM</span>(data_length <span class="operator">+</span> index_length) <span class="operator">/</span> (<span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span>) &quot;Database Size in MB&quot;</span><br><span class="line"><span class="keyword">FROM</span> information_schema.TABLES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> table_schema;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">转自路途博客的MySQL总结，来源为黑马程序员的MySQL视频课</summary>
    
    
    
    <category term="数据库" scheme="https://www.fomal.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://www.fomal.cc/tags/MySQL/"/>
    
    <category term="关系型数据库" scheme="https://www.fomal.cc/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>单调队列专题</title>
    <link href="https://www.fomal.cc/posts/cedcefe1.html"/>
    <id>https://www.fomal.cc/posts/cedcefe1.html</id>
    <published>2022-08-12T14:43:42.000Z</published>
    <updated>2022-08-12T14:43:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-剑指-Offer-59-I-滑动窗口的最大值"><a href="https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">1.剑指 Offer 59 - I. 滑动窗口的最大值</a></h3><p>给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。</p><p>示例：</p><p><img src="https://s1.vika.cn/space/2022/09/30/d5df09451496480daf38ac2530116d49" alt="p23"></p><p><strong>思路</strong></p><p><strong>单调双端队列+滑窗：O(N)</strong></p><p>注意:</p><p><strong>1.边界条件:</strong></p><p>1.1 输入数组为空的情况；</p><p>1.2 队列弹出时注意前面加上判空操作；</p><p>1.3 peekFirst()与pollFirst()的用法区别；</p><p><strong>2.思路溯源：</strong></p><p>这里如果用暴力遍历的话，窗口每变化一次都要遍历所有元素找出当前窗口的最大值，渐进时间复杂度为:<strong>O(N*K)</strong></p><p>这里的输入上限为10^5说明总的运算量要达到10^10，绝对会超时的，10^5的输入理论复杂度上限大致在<strong>O(NlogN)</strong></p><p>因此必须要寻找复杂度更低的算法进行求解</p><p>那么最核心的问题就来了，如何在比O(N)小的时间复杂度内找出的窗口最大值呢?</p><p>办法其实有几种：一种可以用树形数据结构如<strong>堆、红黑树</strong>等，此时时间复杂度为O(logN)</p><p>还有一种就是<strong>单调双端队列</strong>：单调双端队列内部维护的仅仅是对于当前窗口所有可能的最大值</p><p>且最大值的顺序与窗口的走势一致，队头位置的最大值是目前窗口的最大值，并且是即将要第一个退出的</p><p>eg：队头[6, 5, 4, 3]队尾</p><p><strong>当有新元素nums[i]加入时是从队尾加入的：</strong></p><p>1.当<strong>nums[i]&gt;队尾</strong>时，队尾的可以弹出。</p><p>因为队尾的都不够nums[i]大，而窗口的中肯定是前面的队尾在前面，因此当前状态的最大值必定轮不到队尾</p><p>轮了nums[i]才会轮到队尾的元素，换句话说就是<strong>队尾元素不可能成为窗口最大值</strong></p><p>2.当<strong>nums[i]&lt;=队尾</strong>时，此时可以让队列保持单调递增(非严格)，nums[i]直接加入队尾。</p><p>因为队尾的元素&gt;=nums[i]，还是有可能成为最大值的，试想一下窗口只剩下 <strong>[队尾，nums[i]]</strong></p><p>因此队尾是一定要保留的，而nums[i]也要加入，因为后面可能有比nums[i]更小的！</p><p><strong>当有元素要弹出时是从队头弹出的：</strong></p><p>维护窗口的过程中，总有元素从左边退出。若该元素是队头元素就要弹出，因为单调队列维护的是<strong>窗口本身的可能的最大值</strong>，所以肯定要与窗口同步的；那不是队头的元素弹出窗口为何不用管？因为这些元素弹出不会影响窗口的最大值，eg:[1, 3, -1, -2]，此时-2要加入窗口，1要弹出窗口；此时队列尾[3, -1，-2]，最大值始终还是3，而1的位置在3出现之时已经不可能成为窗口最大值，谁叫她数值小并且先于3出现！因此1的退出不会影响窗口的最大值，而3的退出就会使得最大值从3变为-1。好好思考一下…</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值</span></span><br><span class="line"><span class="comment">核心方法:单调双端队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="comment">// 这里的长度可以通过举例子得到:len=4,k=2,窗口数目为3,即len-k+1</span></span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[len - k + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 创建单调递增的队列(队尾-&gt;队头),队头为此时窗口的最大值</span></span><br><span class="line">    <span class="comment">// 如:队头[6,5,4,3,2]队尾,当nums[i]&gt;队尾元素时,为了维护递增的趋势将队尾元素弹出</span></span><br><span class="line">    <span class="comment">// 当且仅当nums[i]&lt;=队尾元素时,才可以维护队列的递增,此时nums[i]加入队尾</span></span><br><span class="line">    Deque&lt;Integer&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 初始化窗口nums[0,k-1]入队</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty() &amp;&amp; que.peekLast() &lt; nums[i]) que.pollLast();</span><br><span class="line">        <span class="comment">// 当且仅当nums[i]&lt;=队尾元素时或者que为空时nums[i]入队</span></span><br><span class="line">        que.addLast(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录最大值的数组索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    res[index++] = que.peekFirst();</span><br><span class="line">    <span class="comment">// 遍历后序窗口的最大值(以窗口结束索引为标记)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> k; j &lt; len; j++) &#123;</span><br><span class="line">        <span class="comment">// 加入nums[j]同时维护递增队列</span></span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty() &amp;&amp; nums[j] &gt; que.peekLast()) que.pollLast();</span><br><span class="line">        que.addLast(nums[j]);</span><br><span class="line">        <span class="comment">// 弹出nums[j-k]同时维护窗口元素对应</span></span><br><span class="line">        <span class="keyword">if</span>(nums[j - k] == que.peekFirst()) que.pollFirst();</span><br><span class="line">        <span class="comment">// 记录当前窗口的最大值进res(这里只是弹出来看看最大值是多少,不要真的弹出来了)</span></span><br><span class="line">        res[index++] = que.peekFirst();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-剑指-Offer-59-II-队列的最大值"><a href="https://leetcode.cn/problems/dui-lie-de-zui-da-zhi-lcof/">2.剑指 Offer 59 - II. 队列的最大值</a></h3><p>请定义一个队列并实现函数 max_value 得到队列里的最大值。</p><p>要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。</p><p>若队列为空，pop_front 和 max_value 需要返回 -1</p><p>输入:</p><p>[“MaxQueue”,“push_back”,“push_back”,“max_value”,“pop_front”,“max_value”]</p><p>[[],[1],[2],[],[],[]]</p><p>输出:</p><p>[null,null,null,2,1,2]</p><p><strong>思路：</strong></p><p>​    <strong>单调递增队列O(1)内找出最大值</strong>:</p><p>​    利用单调队列维护当前队列中的可能的最大值，然后可以以O(1)的时间复杂度内返回最大值</p><p>​    注意：</p><p>1.增删元素保持两个队列元素同步</p><p>2.每当执行队列的方法时都要进行判空操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 能获取最大值的队列类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxQueue</span> &#123;</span><br><span class="line">    <span class="comment">// 普通队列:按顺序存储所有元素</span></span><br><span class="line">    Deque&lt;Integer&gt; que;</span><br><span class="line">    <span class="comment">// 单调递增队列:用于维护当前队列中的最大值</span></span><br><span class="line">    Deque&lt;Integer&gt; maxQue;</span><br><span class="line">    <span class="comment">/*构造器*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MaxQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        maxQue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取最大值*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max_value</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 最大值就是maxQue的队头元素(别忘了判空)</span></span><br><span class="line">        <span class="keyword">return</span> maxQue.isEmpty() ? -<span class="number">1</span> : maxQue.peekFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*从队尾加入元素*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push_back</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">// 加入元素:que直接加,maxQue要保持队列非严格递增(队尾-&gt;队头)</span></span><br><span class="line">        que.add(value);</span><br><span class="line">        <span class="keyword">while</span> (!maxQue.isEmpty() &amp;&amp; value &gt; maxQue.peekLast()) maxQue.pollLast();</span><br><span class="line">        <span class="comment">// 弹出队尾比value小的值后,value加入队尾,保持maxQue单增</span></span><br><span class="line">        maxQue.addLast(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*从队头弹出元素*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop_front</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 移除元素:que直接移除,maxQue要保持与que同步</span></span><br><span class="line">        <span class="comment">// 不存在就要弹出-1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">poll</span> <span class="operator">=</span> que.isEmpty() ? -<span class="number">1</span> : que.pollFirst();</span><br><span class="line">        <span class="comment">// 这里也要判空</span></span><br><span class="line">        <span class="keyword">if</span>(poll != -<span class="number">1</span> &amp;&amp; poll == maxQue.peekFirst()) maxQue.pollFirst();</span><br><span class="line">        <span class="keyword">return</span> poll;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">单调队列可以以O(1)时间复杂度内维护出某个窗口的最值</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="单调队列" scheme="https://www.fomal.cc/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>回溯算法专题</title>
    <link href="https://www.fomal.cc/posts/7e6eaabb.html"/>
    <id>https://www.fomal.cc/posts/7e6eaabb.html</id>
    <published>2022-08-12T14:39:25.000Z</published>
    <updated>2022-09-08T20:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回溯算法的两种写法">回溯算法的两种写法</h2><p><strong>题目描述（面试题）</strong>：为了迎接新同学的加入，小飞飞组织了丰富多彩的活动，这一次他随机在区的树篱迷宫中放置了一个奖品，请帮助同学以最快的速度找到奖品吧。树篱迷宫是一个4x4的正方形，用一个二维数组来表示，其中0代表可以走的路，1代表树篱不可行走，8表示奖品。迷宫有一到多个入口，且随机分布。请帮助新人找出到奖品的最短路径并输出。</p><p><strong>思路</strong>：咋一看这题数据范围小得离谱，只有4*4=16种情况，即使是指数级别的时间复杂度也能接受。求最短路的问题一般有：记忆化搜索、动态规划、BFS、Dijkstra、Floyd等方法，但是这道题要求出最短的路径是什么，涉及到这种路径上所有节点都要进行求解的，考虑用暴力回溯。我们可以枚举每个合法的出发点，从每个合法的出发点进行DFS搜索，搜索过程中可选的下一步为：上下左右&amp;&amp;合法；同时为了避免走回头路导致StackOverFlow要当前轮搜索过的节点进行标记，搜索的同时要进行记录，搜索完了要进行撤回。那么出口只有一个，那就是找到礼品了，退出的时候我们记录当前记录的长度并与之前的比较，当且仅当长度比之前的小才是最短路径。</p><p><strong>时间复杂度:O(N^3) 空间复杂度:O(N^2)</strong></p><h3 id="写法1：先处理再进行dfs">写法1：先处理再进行dfs</h3><p>先处理完再进行DFS的方式，要求在每个DFS进行之前就进行处理（标记访问+记录数据），每个DFS结束之后要进行对应的撤回（注意是每个DFS方法），这样才能保证遍历该层的下一个选择时是正确的状态。</p><p>PS：其实这题还可以进行一些剪枝处理加速：比如从某个边缘出发点到达不是这个出发点的边缘的情况可以进行剪枝加速。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] grid = &#123;</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; res = winMaze(grid);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] p : res) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(p));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// res存储当前遍历到的最短路径，cur存储当前正在遍历的路径</span></span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;   <span class="comment">// 当前找到的最短路径长度，初始化为INF</span></span><br><span class="line">    <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;  <span class="comment">// 方向向量</span></span><br><span class="line">    <span class="type">boolean</span>[][] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">4</span>][<span class="number">4</span>];    <span class="comment">// 标记是否被访问</span></span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="type">int</span>[]&gt; winMaze(<span class="type">int</span>[][] _grid) &#123;</span><br><span class="line">        grid = _grid;</span><br><span class="line">        <span class="comment">// 枚举每个合法起点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 仅仅边缘且可以走的格子才进行dfs</span></span><br><span class="line">                <span class="keyword">if</span> ((i == <span class="number">0</span> || i == <span class="number">3</span> || j == <span class="number">0</span> ||j == <span class="number">3</span>) &amp;&amp; grid[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    vis[i][j] = <span class="literal">true</span>;   <span class="comment">// 进入dfs之前就进行标记和处理</span></span><br><span class="line">                    cur.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">                    dfs(i, j);</span><br><span class="line">                    vis[i][j] = <span class="literal">false</span>;   <span class="comment">// dfs完成之后再撤回</span></span><br><span class="line">                    cur.remove(cur.size() - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// base case -&gt; 找到礼品了</span></span><br><span class="line">        <span class="keyword">if</span> (grid[i][j] == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="comment">// 当且仅当找到更短的路径才进行保存</span></span><br><span class="line">            <span class="keyword">if</span> (cur.size() &lt; min) &#123;</span><br><span class="line">                res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(cur);</span><br><span class="line">                min = cur.size();   <span class="comment">// 更新当前最短长度</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历下一步能到的格子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> i + dir[<span class="number">0</span>], newJ = j + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 没有越界&amp;&amp;没有访问过&amp;&amp;可行的</span></span><br><span class="line">            <span class="keyword">if</span> (newI &gt;= <span class="number">0</span> &amp;&amp; newI &lt; <span class="number">4</span> &amp;&amp; newJ &gt;= <span class="number">0</span> &amp;&amp; newJ &lt; <span class="number">4</span> &amp;&amp; !vis[newI][newJ] &amp;&amp; grid[newI][newJ] != <span class="number">1</span>) &#123;</span><br><span class="line">                vis[newI][newJ] = <span class="literal">true</span>; <span class="comment">// 进入dfs之前就进行标记和处理</span></span><br><span class="line">                cur.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;newI, newJ&#125;);</span><br><span class="line">                dfs(newI, newJ);</span><br><span class="line">                vis[newI][newJ] = <span class="literal">false</span>;    <span class="comment">// 撤回</span></span><br><span class="line">                cur.remove(cur.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="2-写法二：在dfs内部进行处理">2:写法二：在dfs内部进行处理</h3><p>这种在dfs内部处理的方式，在DFS一开始就要进行处理（标记访问+记录数据），DFS结束之前要进行撤回（注意出口可能不止一处），保证DFS函数执行完后当前的递归树深度不变。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] grid = &#123;</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; res = winMaze(grid);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] p : res) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(p));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// res存储当前遍历到的最短路径，cur存储当前正在遍历的路径</span></span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;   <span class="comment">// 当前找到的最短路径长度，初始化为INF</span></span><br><span class="line">    <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;  <span class="comment">// 方向向量</span></span><br><span class="line">    <span class="type">boolean</span>[][] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">4</span>][<span class="number">4</span>];    <span class="comment">// 标记是否被访问</span></span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="type">int</span>[]&gt; winMaze(<span class="type">int</span>[][] _grid) &#123;</span><br><span class="line">        grid = _grid;</span><br><span class="line">        <span class="comment">// 枚举每个合法起点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 仅仅边缘且可以走的格子才进行dfs</span></span><br><span class="line">                <span class="keyword">if</span> ((i == <span class="number">0</span> || i == <span class="number">3</span> || j == <span class="number">0</span> || j == <span class="number">3</span>) &amp;&amp; grid[i][j] == <span class="number">0</span>) dfs(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// dfs最开始进行标记+记录</span></span><br><span class="line">        vis[i][j] = <span class="literal">true</span>;</span><br><span class="line">        cur.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">        <span class="comment">// base case -&gt; 找到礼品了</span></span><br><span class="line">        <span class="keyword">if</span> (grid[i][j] == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="comment">// 当且仅当找到更短的路径才进行保存</span></span><br><span class="line">            <span class="keyword">if</span> (cur.size() &lt; min) &#123;</span><br><span class="line">                res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(cur);</span><br><span class="line">                min = cur.size();   <span class="comment">// 更新当前最短长度</span></span><br><span class="line">            &#125;</span><br><span class="line">            vis[i][j] = <span class="literal">false</span>;    <span class="comment">// dfs结束之前要撤回</span></span><br><span class="line">            cur.remove(cur.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历下一步能到的格子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> i + dir[<span class="number">0</span>], newJ = j + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 没有越界&amp;&amp;没有访问过&amp;&amp;可行的</span></span><br><span class="line">            <span class="keyword">if</span> (newI &gt;= <span class="number">0</span> &amp;&amp; newI &lt; <span class="number">4</span> &amp;&amp; newJ &gt;= <span class="number">0</span> &amp;&amp; newJ &lt; <span class="number">4</span> &amp;&amp; !vis[newI][newJ] &amp;&amp; grid[newI][newJ] != <span class="number">1</span>) &#123;</span><br><span class="line">                dfs(newI, newJ);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[i][j] = <span class="literal">false</span>;    <span class="comment">// dfs结束之前要撤回</span></span><br><span class="line">        cur.remove(cur.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="回溯例题：LC679-24点游戏"><a href="https://leetcode.cn/problems/24-game/"><strong>回溯例题：LC679.24点游戏</strong></a></h2><p>​    <strong>回溯法暴力遍历</strong>:(参考官方题解)</p><p>​    括号可以直接忽略,因为暴力遍历已经包含所有运算次序</p><p>​    4*3*4*3*2*4*2*1*4=9216种可能性</p><p>​    1.这个游戏的本质就是将其中两个数进行相乘的结果重新加入并进行新一轮原来的24点计算</p><p>​    2.排除几种特殊情况:</p><p>2.1 除0计算:这种情况直接跳过</p><p>​    2.2 乘法与加法的运算可以进行剪枝</p><p>​        2.3 误差考虑:当误差&lt;1e-6时,认为就是0</p><p>​    3.若最终都没有返回true说明找不到最后返回false</p><p>​    时间复杂度与空间复杂度均为:O(1)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算误差</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">ERROR</span> <span class="operator">=</span> <span class="number">1e-6</span>;</span><br><span class="line">    <span class="comment">// 目标值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">TARGET</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">    <span class="comment">// 加减乘除</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PLUS</span> <span class="operator">=</span> <span class="number">0</span>, MULTIPLY = <span class="number">1</span>, SUBTRACT = <span class="number">2</span>, DIVIDE = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    判断是否能凑成24</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judgePoint24</span><span class="params">(<span class="type">int</span>[] cards)</span> &#123;</span><br><span class="line">        List&lt;Double&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : cards) &#123;</span><br><span class="line">            list.add((<span class="type">double</span>)num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(list);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    dfs主函数:返回list中是否能计算出24</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(List&lt;Double&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归出口1:空列表</span></span><br><span class="line">        <span class="keyword">if</span>(list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归出口2:运算结果为24</span></span><br><span class="line">        <span class="keyword">if</span>(list.size() == <span class="number">1</span> &amp;&amp; Math.abs(list.get(<span class="number">0</span>) - TARGET) &lt; ERROR) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先抽出两个要进行运算的数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">                <span class="comment">// 注意是索引不同的两个数才能进行运算</span></span><br><span class="line">                <span class="keyword">if</span>(i != j) &#123;</span><br><span class="line">                    <span class="comment">// 再创建一个列表存放剩余的元素</span></span><br><span class="line">                    List&lt;Double&gt; remain = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; size; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(k != i &amp;&amp; k != j) &#123;</span><br><span class="line">                            remain.add(list.get(k));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 在对选中的两个数list[i]与list[j]进行计算并加入remain列表</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                        <span class="comment">// 加法与除法进行剪枝(只保留i&gt;j部分一半)</span></span><br><span class="line">                        <span class="keyword">if</span>(k &lt; <span class="number">2</span> &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(k == PLUS) &#123;</span><br><span class="line">                            remain.add(list.get(i) + list.get(j));</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == MULTIPLY) &#123;</span><br><span class="line">                            remain.add(list.get(i) * list.get(j));</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == SUBTRACT) &#123;</span><br><span class="line">                            remain.add(list.get(i) - list.get(j));</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == DIVIDE) &#123;</span><br><span class="line">                            <span class="comment">// 排除除0的情形</span></span><br><span class="line">                            <span class="keyword">if</span>(list.get(j) &lt; ERROR) &#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                remain.add(list.get(i) / list.get(j));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 将加入运算结果的remain列表进行递归运算,若得到24直接返回true</span></span><br><span class="line">                        <span class="keyword">if</span>(dfs(remain)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 撤回操作刚刚的添加操作继续下一种符号的运算</span></span><br><span class="line">                        remain.remove(remain.size() - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若最后都找不到正确的选项,说明就是没有了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一点思考：</strong></p><p>其实回溯本质上就是递归+回退从而找到所有的路径(组合的可能)，最关键的就是要找到<strong>子问题</strong></p><p>问题：<strong>n个数进行组合运算能否得出24这个结果</strong></p><p>开始是4个数进行运算[1,2,3,4]</p><p>选其中两个数尝试，例如选了selected=[1,3]，剩余的是remain=[2,4]</p><p>那么将selected中的两个数进行 [+, -, *, /] 4种运算得到的结果[4, -2, 3 , 0.3333…]分别再次放入remain中</p><p><strong>判断这3个数进行运算的结果是否能得到24？</strong></p><p><strong>子问题由此产生：由4个数字的组合变成了3个数字的组合</strong></p><p><strong>若3个数字的组合能算出24可以马上推出4个数字的组合能就算出24！</strong></p><p>此时我们重复调用原本的函数就能解决这个3个数能否组成24的问题了→这就是递归！</p><p>在递归过程有不合格的案例进行回退并往另一条路径走，这就是回溯了！</p><p>例如我通过1+3=4，而[2,4,4]通过递归发现<strong>不能</strong>使得结果为24，因此这种情况就要<strong>舍弃</strong>了</p><p>怎样进行舍弃?</p><p>很简单，将[2,4,4]最后加入元素删掉就相当于返回上一层，可以继续进行下一个运算符的计算，再放进去[2,4]里面进行递归…</p><p>若某个dfs([x,x,x])返回true就说明这条路径是可行的</p>]]></content>
    
    
    <summary type="html">回溯本质上就是递归+回退从而找到所有的路径(组合的可能)，最关键的就是要找到子问题</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="回溯" scheme="https://www.fomal.cc/tags/%E5%9B%9E%E6%BA%AF/"/>
    
    <category term="递归" scheme="https://www.fomal.cc/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>二分查找模板</title>
    <link href="https://www.fomal.cc/posts/70e223cf.html"/>
    <id>https://www.fomal.cc/posts/70e223cf.html</id>
    <published>2022-08-12T14:28:18.000Z</published>
    <updated>2022-08-12T14:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>二分查找要求数据有二段性，可以将查找某个分割点的时间复杂度从O(N)加速至O(logN)</p><h2 id="LC704-二分查找"><a href="https://leetcode-cn.com/problems/binary-search/"><strong>LC704. 二分查找</strong></a></h2><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target</p><p>写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p><strong>示例1:</strong><br>输入： nums = [-1,0,3,5,9,12], target = 9 输出：4<br>解释：9出现在 nums中并且下标为4<br><strong>示例2:</strong><br>输入：nums = [-1,0,3,5,9,12],target = 2 输出：-1<br>解释：2不存在nums中因此返回-1</p><p><strong>思路：</strong></p><p><strong>二分查找-&gt;梦开始的地方</strong></p><p>这道题是二分查找的入门题目，二分查找的水非常深，但是简单的题目通常会由于各种原因丢分。</p><p>这里我总结一下二分查找的一些模板和做题套路</p><p>首先能用二分查找的<strong>前提</strong>是在<strong>可以根据f(mid)的值来判断下一个合法区间在mid左边还是右边</strong></p><p>因此二分查找前面通常都会有<strong>排序</strong>等步骤来确保问题具有**“二段性”**</p><p>总体要注意的：</p><p>1.while (l &lt; r)： 这种写法使得退出条件是<strong>l==r</strong>，因此执行完之后必定有l==r</p><p>2.mid的求法： 这个mid的求法非常讲究，我总结的是</p><ul><li>mid = l + (r - l + 1) / 2，mid主动偏右-&gt;右边界主动收缩r = mid - 1;</li><li>mid = l + (r - l ) / 2，mid主动偏左-&gt;左边界主动收缩l = mid + 1;</li></ul><p>3.下一个区间的判断采用减治思想，将一定不符合条件的先排除，如：nums[mid] &gt; target，那么mid必定不符合题意！-&gt;r = mid - 1</p><p>然后另外一个区间是其反面，一般是将合法区间包含在边界，如：nums[mid] &lt;=target，那么mid可能不符合题意！-&gt;l = mid</p><p>4.退出循环的时候要重复利用好l==r这个条件，答案蕴藏在其中！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        在升序数组中查找目标数字对应下标-&gt;二分查找</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="comment">// 下面是右边主动收缩</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// &gt;target,说明target在左边(不含)</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// &lt;=target,说明target在右边(含)</span></span><br><span class="line">                l = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// l==r,nums[l]要不就是target;要不就是nums中没有target</span></span><br><span class="line">        <span class="keyword">return</span> nums[l] == target ? l : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">二分查找要求数据有二段性，可以将查找某个分割点的时间复杂度从O(N)加速至O(logN)</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二分" scheme="https://www.fomal.cc/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>状态机DP总结</title>
    <link href="https://www.fomal.cc/posts/baa972ab.html"/>
    <id>https://www.fomal.cc/posts/baa972ab.html</id>
    <published>2022-08-12T14:17:05.000Z</published>
    <updated>2022-08-12T14:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>状态机DP就是考虑到当前时刻、位置等，有可能处于有限种情形中的其中一种</strong></p><p><strong>比如说当前位置的房子涂了什么颜色、当前时间的股票处于卖出还是买入的状态、当前删除到的序列是以0还是以1结尾、当前位置是放了还是没有放置东西、当前位置是正还是负</strong></p><p><strong>把这些情况分开来转移可以使得转移的思路更加清晰明了，类比成当前位置 i 的一个状态 j 能够由前面位置 i-1 的指定状态 k 转移得到！！！</strong></p><h3 id="1-粉刷房子问题">1.粉刷房子问题</h3><h4 id="1-1-LC123-剑指-Offer-II-091-粉刷房子">1.1 <strong>LC123.剑指 Offer II 091. 粉刷房子</strong></h4><p><strong>分状态的DP问题(序列DP):</strong></p><p>1.状态定义:dp[i][0],dp[i][1],dp[i][2]分别为粉刷房子[0,i],且房子i的颜色粉刷为红色/蓝色/绿色所花费的最低费用</p><p>​            <strong>为什么还要带一个后缀?因为粉刷第i间房子可能的状态本身有3种!</strong></p><p>​            <strong>如果混在一起讨论非常复杂,分开讨论可以根据前面的状态分开转移就非常方便</strong></p><p>​            <strong>类似于股票问题-&gt;考虑第i天且第i天处于卖出还是买入状态方便转移!</strong></p><p>2.状态转移:由于相邻的两个房子颜色不能相同,因此根据dp[i-1][j]的状态分类转移即可</p><p>​         2.1 dp[i][0]可以由dp[i-1][1]与dp[i-1][2]加上cost[i][0]取最小值转移</p><p>​         2.2 dp[i][1]可以由dp[i-1][0]与dp[i-1][2]加上cost[i][1]取最小值转移</p><p>​         2.3 dp[i][2]可以由dp[i-1][0]与dp[i-1][1]加上cost[i][2]取最小值转移</p><p>意义就是我这间房子涂了颜色0,那么只能由前面涂了不是颜色0的进行转移且取最小值</p><p>3.初始化:初始化dp[0][0]=cost[0][0],dp[0][1]=cost[0][1],dp[0][2]=cost[0][2]</p><p>4.遍历顺序:i正序,j无所谓</p><p>5.返回形式:涂到最后一间房子最小费用不知道是以哪种颜色结尾的,可以取最小值min(dp[n-1][0],dp[n-1][1],dp[n-1][2])</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCost</span><span class="params">(<span class="type">int</span>[][] costs)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> costs.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = costs[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = costs[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>] = costs[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = costs[i][<span class="number">0</span>] + Math.min(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = costs[i][<span class="number">1</span>] + Math.min(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = costs[i][<span class="number">2</span>] + Math.min(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(dp[n - <span class="number">1</span>][<span class="number">0</span>], Math.min(dp[n - <span class="number">1</span>][<span class="number">1</span>], dp[n - <span class="number">1</span>][<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-LC1473-粉刷房子-III">1.2 <strong>LC1473. 粉刷房子 III</strong></h4><p>状态机DP问题(参考剑指OfferII.91  粉刷房子):</p><p>其实与之前那道粉刷房子的也很类似,不过这里更加复杂一点就是要考虑形成的街区数目,同时有的房子已经涂了色</p><p>我们前面一道题是考虑到两个dp维度:房子位置i,第i间房子的颜色j</p><p>要同时考虑形成的街区数目(独立),此时必须增加一个dp的维度k,表示当前形成的街区数目</p><p>同时要对已经涂了色的情况进行分类讨论转移</p><p><strong>1.状态定义:</strong> dp[i][j][k]为考虑对房子[0,i]进行涂色,且房子i(i∈[0,m-1])颜色被涂为颜色j(j∈[1,n]),且涂完之后就形成k(k∈[1,target])个街区的最小花费</p><p><strong>2.状态转移:</strong> 我们以house[i]是否为0进行分类讨</p><p>​      2.1 house[i]==0 表示房子i还没有被涂色,选择任意颜色j∈[1,n]对房子i进行涂色,涂的具体颜色会影响街区的数目</p><p>​          dp[i][j][k]=cost[i][j-1]+min(dp[i-1][j][k],dp[i-1][j’][k-1]) 其中j’为≠j的集合(颜色不同街区数+1)</p><p>​          注意细节:合法的dp[i-1][jj][?]状态才能转移</p><p>​      2.2 house[i]!=0 表示房子i已经被涂色,此时只能对dp[i][house[i]][k]进行转移,其他dp[i][j’][?]无法转移仍为INF</p><p>​          dp[i][houses[i]][k]=0+min(dp[i-1][houses[i]][k],dp[i-1][j’][k-1]) 其中j’为≠houses[i]的集合(颜色不同街区数+1)</p><p><strong>3.初始化:</strong> 首先全部初始化为INF表示没有转移</p><p>​      当houses[0]==0时,dp[0][j][1]=cost[0][j-1] -&gt; 要涂色</p><p>​      当houses[0]!=0时,dp[0][houses[0]][1]=0 -&gt; 不用涂色</p><p><strong>4.遍历顺序:</strong> 显然i正序,j无所谓,k正序</p><p><strong>5.返回形式:</strong> 最后返回min(dp[m-1][j][target]),j∈[1,n] 若扔没有转移则返回-1</p><p><strong>时间复杂度:O((mn)^2) 空间复杂度:O(n*m^2)</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCost</span><span class="params">(<span class="type">int</span>[] houses, <span class="type">int</span>[][] cost, <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;   <span class="comment">// 哨兵</span></span><br><span class="line">    <span class="type">int</span>[][][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n + <span class="number">1</span>][target + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            Arrays.fill(dp[i][j], INF);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (houses[<span class="number">0</span>] != <span class="number">0</span>) &#123;   <span class="comment">// 1.首个房子不用涂色</span></span><br><span class="line">        dp[<span class="number">0</span>][houses[<span class="number">0</span>]][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 2.首个房子要涂色,费用最小就是直接涂,且只能形成一个街区</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j][<span class="number">1</span>] = cost[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历dp的每个状态</span></span><br><span class="line">    <span class="comment">// i∈[1,m-1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="comment">// j∈[1,n]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="comment">// k∈[1,target]</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= target; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (houses[i] == <span class="number">0</span>) &#123;   <span class="comment">// 1.houses[i]要涂色</span></span><br><span class="line">                    <span class="comment">// 遍历所有可能的houses[i-1]的颜色进行转移</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">jj</span> <span class="operator">=</span> <span class="number">1</span>; jj &lt;= n; jj++) &#123;</span><br><span class="line">                        <span class="comment">// 细节:只有有效的状态才能进行转移</span></span><br><span class="line">                        <span class="keyword">if</span> (jj == j &amp;&amp; dp[i - <span class="number">1</span>][jj][k] != INF) &#123;  <span class="comment">// 与前面颜色相同,街区数目不变</span></span><br><span class="line">                            dp[i][j][k] = Math.min(dp[i][j][k], cost[i][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][jj][k]);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jj != j &amp;&amp; dp[i - <span class="number">1</span>][jj][k - <span class="number">1</span>] != INF) &#123;    <span class="comment">// 与前面颜色不同,街区数目+1</span></span><br><span class="line">                            dp[i][j][k] = Math.min(dp[i][j][k], cost[i][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][jj][k - <span class="number">1</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 2.houses[i]已经被涂色</span></span><br><span class="line">                    <span class="keyword">if</span> (j == houses[i]) &#123;   <span class="comment">// 只能转移j==houses[i]的状态</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">jj</span> <span class="operator">=</span> <span class="number">1</span>; jj &lt;= n; jj++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (jj == j &amp;&amp; dp[i - <span class="number">1</span>][jj][k] != INF) &#123;  <span class="comment">// 与前面颜色相同,街区数目不变(且不用花费)</span></span><br><span class="line">                                dp[i][j][k] = Math.min(dp[i][j][k], dp[i - <span class="number">1</span>][jj][k]);</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jj != j &amp;&amp; dp[i - <span class="number">1</span>][jj][k - <span class="number">1</span>] != INF) &#123;    <span class="comment">// 与前面颜色不同,街区数目+1(且不用花费)</span></span><br><span class="line">                                dp[i][j][k] = Math.min(dp[i][j][k], dp[i - <span class="number">1</span>][jj][k - <span class="number">1</span>]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结果为min(dp[m-1][j][target]),j∈[1,n] 不为INF部分的最小值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        res = Math.min(res, dp[m - <span class="number">1</span>][j][target]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res == INF ? -<span class="number">1</span> : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6种股票问题">2.6种股票问题</h3><h4 id="2-1-LC121-买卖股票的最佳时机">2.1 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/"><strong>LC121. 买卖股票的最佳时机</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        dp五部曲:主要根据每天持有与不持有股票的状态进行转移</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][0]代表第i天(操作后)不持有股票的最大身价,dp[i][0]代表第i天(操作后)持有股票的最大身价</span></span><br><span class="line"><span class="comment">        2.状态转移:</span></span><br><span class="line"><span class="comment">            2.1 dp[i][0]第i天不持有股票</span></span><br><span class="line"><span class="comment">                1.当天卖了:dp[i-1][1]+prices[i]</span></span><br><span class="line"><span class="comment">                2.之前就卖了:dp[i-1][0]</span></span><br><span class="line"><span class="comment">                3.还没买:0 (可以忽略)</span></span><br><span class="line"><span class="comment">            取最大值转移值dp[i][0]</span></span><br><span class="line"><span class="comment">            2.2  dp[i][1]第i天持有股票</span></span><br><span class="line"><span class="comment">                1.当天入手:-prices[i]</span></span><br><span class="line"><span class="comment">                2.之前就入手了:dp[i-1][1]</span></span><br><span class="line"><span class="comment">            取最大值转移值dp[i][1]</span></span><br><span class="line"><span class="comment">        3.初始化:第0天的情况-&gt;dp[0][0]=0,dp[0][1]=-prices[0]</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j无所谓</span></span><br><span class="line"><span class="comment">        5.返回形式:最后一天肯定是卖出股票的身价大-&gt;dp[len-1][0];</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i], dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(-prices[i], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-LC122-买卖股票的最佳时机-II">2.2 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/"><strong>LC122. 买卖股票的最佳时机 II</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        dp解法:</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][0]代表第i天(操作后)不持有股票的最大身价,dp[i][0]代表第i天(操作后)持有股票的最大身价</span></span><br><span class="line"><span class="comment">        2.状态转移:</span></span><br><span class="line"><span class="comment">            2.1 dp[i][0]第i天不持有股票</span></span><br><span class="line"><span class="comment">                1.当天卖了:dp[i-1][1]+prices[i]</span></span><br><span class="line"><span class="comment">                2.之前就卖了:dp[i-1][0]</span></span><br><span class="line"><span class="comment">                3.还没买:0 (可以忽略)</span></span><br><span class="line"><span class="comment">            取最大值转移值dp[i][0]</span></span><br><span class="line"><span class="comment">            2.2  dp[i][1]第i天持有股票</span></span><br><span class="line"><span class="comment">                1.当天入手:dp[i-1][0]-prices[i] (区别在此,之前不持有股票可能已经交易过几轮了)</span></span><br><span class="line"><span class="comment">                2.之前就入手了:dp[i-1][1]</span></span><br><span class="line"><span class="comment">            取最大值转移值dp[i][1]</span></span><br><span class="line"><span class="comment">        3.初始化:第0天的情况-&gt;dp[0][0]=0,dp[0][1]=-prices[0]</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j无所谓</span></span><br><span class="line"><span class="comment">        5.返回形式:最后一天肯定是卖出股票的身价大-&gt;dp[len-1][0]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i], dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-LC123-买卖股票的最佳时机-III">2.3 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/"><strong>LC123. 买卖股票的最佳时机 III</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        总体思路:第i天有5个阶段:0.还没买 1.第一次买入后 2.第一次抛售后 3.第二次迈买入后 4.第二次抛售后</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][0]为处于的阶段0最大身价;dp[i][1]为处于阶段1最大身价;....</span></span><br><span class="line"><span class="comment">        2.状态转移:</span></span><br><span class="line"><span class="comment">            2.1 阶段0身价恒为0</span></span><br><span class="line"><span class="comment">            2.2 阶段1有两种情况:当天第一次买和之前第一次买了,取大的值:max(dp[i-1][0]-prices[i],dp[i-1][1])</span></span><br><span class="line"><span class="comment">            2.3 阶段2有两种情况:当天第一次卖和之前第一次卖了,取大的值:max(dp[i-1][1]+prices[i],dp[i-1][2])</span></span><br><span class="line"><span class="comment">            2.3 阶段3有两种情况:当天第二次买和之前第二次买了,取大的值:max(dp[i-1][2]-prices[i],dp[i-1][3])</span></span><br><span class="line"><span class="comment">            2.3 阶段4有两种情况:当天第二次卖和之前第二次卖了,取大的值:max(dp[i-1][3]+prices[i],dp[i-1][4])</span></span><br><span class="line"><span class="comment">        3.初始化:dp[0][0]=0,dp[0][1]=-prices[0],dp[0][2]=0,dp[0][3]=-prices[0],dp[0][4]=0</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j无所谓</span></span><br><span class="line"><span class="comment">        5.返回形式:第一次卖出与第二次卖出取最大值:max(dp[len-1][2],dp[len-1][4])</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">5</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">3</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            dp[i][<span class="number">3</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">2</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line">            dp[i][<span class="number">4</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">3</span>] + prices[i], dp[i - <span class="number">1</span>][<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[len - <span class="number">1</span>][<span class="number">2</span>], dp[len - <span class="number">1</span>][<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-LC188-买卖股票的最佳时机-IV">2.4 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/"><strong>LC188. 买卖股票的最佳时机 IV</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        总体思路:与买卖股票的最佳时机 III 接近,将买卖股票的阶段分为第x次买入和第x次卖出</span></span><br><span class="line"><span class="comment">        状态0:处于还没买入过的阶段</span></span><br><span class="line"><span class="comment">        状态1:处于第1次买入后的阶段</span></span><br><span class="line"><span class="comment">        状态2:处于第1次卖出后的阶段</span></span><br><span class="line"><span class="comment">        状态3:处于第2次买入后的阶段</span></span><br><span class="line"><span class="comment">        状态4:处于第2次卖出后的阶段</span></span><br><span class="line"><span class="comment">        ...以此类推,dp[i][j]中的i代表的是处于第i天,j代表的当前股票的状态</span></span><br><span class="line"><span class="comment">        j为奇数时,表示处于第j/2+1次买入股票阶段;j为偶数时,表示处于第j/2次卖出股票阶段</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][j]代表第i天处于的状态j时的最大收益</span></span><br><span class="line"><span class="comment">        2.状态转移:参考状态1与2可以推导出后面的</span></span><br><span class="line"><span class="comment">            2.0 还没买入过的阶段(j=0)-&gt;恒为0(直接初始化为0就可以完成求解)</span></span><br><span class="line"><span class="comment">            2.1 第1次买入后的阶段(j=1):今天刚买与之前就买了取较大值-&gt;max(dp[i-1][0]-prices[i],dp[i-1][1])</span></span><br><span class="line"><span class="comment">            2.2 第1次卖出后的阶段(j=2):今天刚卖与之前就卖了取较大值-&gt;max(dp[i-1][1]+prices[i],dp[i-1][2])</span></span><br><span class="line"><span class="comment">            ...以此类推,那么dp[i][j]可以以j为依据分为两种情况进行转移计算:</span></span><br><span class="line"><span class="comment">            j为奇数时-&gt;dp[i][j]=max(dp[i-1][j-1]-prices[i],dp[i-1][j])</span></span><br><span class="line"><span class="comment">            j为偶数时-&gt;dp[i][j]=max(dp[i-1][j-1]+prices[i],dp[i-1][j])</span></span><br><span class="line"><span class="comment">        3.初始化:j奇数表示买入的状态-&gt;dp[0][j]=-prices[0],j奇偶表示卖出的状态-&gt;dp[0][j]=0</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j无所谓</span></span><br><span class="line"><span class="comment">        5.返回形式:返回dp[len-1][j]其中j为偶数的最大值(卖出时身价比持有时大)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="literal">null</span> || prices.length == <span class="number">0</span> || k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">2</span> * k + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">2</span> * k; j += <span class="number">2</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = -prices[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 统计j为奇数的情况:奇数+1就是偶数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">2</span> * k; j += <span class="number">2</span>) &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j - <span class="number">1</span>] - prices[i], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">                dp[i][j + <span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][j] + prices[i], dp[i - <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= <span class="number">2</span> * k; j += <span class="number">2</span>) &#123;</span><br><span class="line">            max = Math.max(max, dp[len - <span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-LC309-最佳买卖股票时机含冷冻期">2.5 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/"><strong>LC309. 最佳买卖股票时机含冷冻期</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        总体思路:与最佳买卖股票II比较类似,可以无限次交易但是含有冷冻期</span></span><br><span class="line"><span class="comment">        一共有以下6个状态:</span></span><br><span class="line"><span class="comment">        状态0:当前还没操作股票</span></span><br><span class="line"><span class="comment">        状态1:今天刚买入</span></span><br><span class="line"><span class="comment">        状态2:之前就买入了</span></span><br><span class="line"><span class="comment">        状态3:今天刚卖出</span></span><br><span class="line"><span class="comment">        状态4:处于冷冻期</span></span><br><span class="line"><span class="comment">        状态5:之前卖出且过了冷冻期</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][j]表示第i天处于状态j的最大收益</span></span><br><span class="line"><span class="comment">        2.状态转移:</span></span><br><span class="line"><span class="comment">            2.0 dp[i][0]=0</span></span><br><span class="line"><span class="comment">            2.1 dp[i][1]=max(dp[i-1][0]-prices[i],dp[i-1][5]-prices[i],dp[i-1][3]-prices[i])</span></span><br><span class="line"><span class="comment">                        =max(dp[i-1][5]-prices[i],dp[i-1][3]-prices[i])</span></span><br><span class="line"><span class="comment">            2.2 dp[i][2]=max(dp[i-1][1],dp[i-1][2])</span></span><br><span class="line"><span class="comment">            2.3 dp[i][3]=max(dp[i-1][2]+prices[i],dp[i-1][1]+prices[i])</span></span><br><span class="line"><span class="comment">            2.4 dp[i][4]=dp[i-1][3]</span></span><br><span class="line"><span class="comment">            2.5 dp[i][5]=max(dp[i-1][4],dp[i-1][5])</span></span><br><span class="line"><span class="comment">        3.初始化:dp[0][0]=0,dp[0][1]=-prices[0],dp[0][2]=-prices[0],dp[0][3]=dp[0][4]=dp[0][5]=0</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j无所谓</span></span><br><span class="line"><span class="comment">        5.返回形式:返回max(dp[len-1][3],dp[len][4],dp[len-1][5])</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">6</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">2</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">5</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">4</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            dp[i][<span class="number">3</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">2</span>] + prices[i], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">4</span>] = dp[i - <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">            dp[i][<span class="number">5</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">4</span>], dp[i - <span class="number">1</span>][<span class="number">5</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[len - <span class="number">1</span>][<span class="number">3</span>], Math.max(dp[len - <span class="number">1</span>][<span class="number">4</span>], dp[len - <span class="number">1</span>][<span class="number">5</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-LC714-买卖股票的最佳时机含手续费">2.6 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/"><strong>LC714. 买卖股票的最佳时机含手续费</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices, <span class="type">int</span> fee)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        与股票买卖II十分类似,唯一的不同就是要支付手续费,可以看做卖出的时候股票价格减少fee</span></span><br><span class="line"><span class="comment">        一共有2种状态:(其中没操作股票归纳到情况1)</span></span><br><span class="line"><span class="comment">        状态0:持有股票</span></span><br><span class="line"><span class="comment">        状态1:不持有股票</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][j]代表的第i天处于状态j时的最大身价</span></span><br><span class="line"><span class="comment">        2.状态转移:</span></span><br><span class="line"><span class="comment">            2.0 持有股票,可能今天刚买或者之前就买了:dp[i][0]=max(dp[i-1][1]-prices[i],dp[i-1][0])</span></span><br><span class="line"><span class="comment">            2.1 不持有股票,可能今天刚卖或者之前就卖了:dp[i][1]=max(dp[i-1][1],dp[i-1][0]+prices[i]-fee)</span></span><br><span class="line"><span class="comment">        3.初始化:初始化dp[0][0]=-prices[0],dp[0][1]=0</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j任意</span></span><br><span class="line"><span class="comment">        5.返回形式:返回dp[len-1][1]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i] - fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-LC926-将字符串翻转到单调递增">3.<a href="https://leetcode.cn/problems/flip-string-to-monotone-increasing/"><strong>LC926. 将字符串翻转到单调递增</strong></a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minFlipsMonoIncr</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        动态规划:</span></span><br><span class="line"><span class="comment">        翻转后的单调递增字符串可能的情形有:000...000  000...111  111...111</span></span><br><span class="line"><span class="comment">        归结起来就是两种情形:以0结尾和以1结尾 分开来考虑转移会更加明确</span></span><br><span class="line"><span class="comment">        1.状态定义:f[i][0]为考虑s[0,i]翻转后为以0结尾的s[0,i]为递增序列最少翻转次数</span></span><br><span class="line"><span class="comment">                    f[i][1]为考虑s[0,i]翻转后为以1结尾的s[0,i]为递增序列最少翻转次数</span></span><br><span class="line"><span class="comment">        2.状态转移:要求f[i][0]与f[i][1]就要看s[i]</span></span><br><span class="line"><span class="comment">            2.1 s[i]==0时 f[i][0]=f[i-1][0]  f[i][1]=min(f[i-1][1],f[i-1][0])+1</span></span><br><span class="line"><span class="comment">            2.2 s[i]==1时 f[i][1]=min(f[i-1][0],f[i-1][1])  f[i][0]=f[i-1][0]+1</span></span><br><span class="line"><span class="comment">        3.初始化:f[0][0]=s[0]==0?0:1  f[0][1]=s[0]==1?0:1</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序</span></span><br><span class="line"><span class="comment">        5.返回形式:返回min(f[n-1][0],f[n-1][1]) 最后被翻转成0或者1结尾都有可能使得翻转次数最少</span></span><br><span class="line"><span class="comment">        时间复杂度:O(N)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">char</span>[] chs = s.toCharArray();</span><br><span class="line">        <span class="type">int</span>[][] f = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = chs[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">1</span>] = chs[<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chs[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                f[i][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                f[i][<span class="number">1</span>] = Math.min(f[i - <span class="number">1</span>][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">0</span>]) + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                f[i][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">                f[i][<span class="number">1</span>] = Math.min(f[i - <span class="number">1</span>][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(f[n - <span class="number">1</span>][<span class="number">0</span>], f[n - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-LC2320-统计放置房子的方式数">4.<a href="https://leetcode.cn/problems/count-number-of-ways-to-place-houses/"><strong>LC2320. 统计放置房子的方式数</strong></a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countHousePlacements</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        状态机DP问题(有更加简单的做法，这里为了演示状态机DP):</span></span><br><span class="line"><span class="comment">        1.状态定义:</span></span><br><span class="line"><span class="comment">            1.1 f[i][0]为考虑两边[0,i]的地方i位置上下都不放置房子的方案数</span></span><br><span class="line"><span class="comment">            1.2 f[i][1]为考虑两边[0,i]的地方i位置只放上面的地方</span></span><br><span class="line"><span class="comment">            1.3 f[i][2]为考虑两边[0,i]的地方i位置只放下面的地方</span></span><br><span class="line"><span class="comment">            1.4 f[i][3]为考虑两边[0,i]的地方i位置上下都放置房子的方案数</span></span><br><span class="line"><span class="comment">        2.状态转移:考虑i位置一共有4种状态,根据实际转移即可</span></span><br><span class="line"><span class="comment">            f[i][0]=f[i-1][3]+f[i-1][2]+f[i-1][1]+f[i-1][0]</span></span><br><span class="line"><span class="comment">            f[i][1]=f[i-1][2]+f[i-1][0]</span></span><br><span class="line"><span class="comment">            f[i][2]=f[i-1][1]+f[i-1][0]</span></span><br><span class="line"><span class="comment">            f[i][3]=f[i-1][0]</span></span><br><span class="line"><span class="comment">        3.初始化:f[0][0]=f[0][1]=f[0][2]=f[0][3]=1</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序</span></span><br><span class="line"><span class="comment">        5.返回形式:最后4种情形加起来就是答案sum(f[n-1][j])</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="type">long</span>[][] f = <span class="keyword">new</span> <span class="title class_">long</span>[n][<span class="number">4</span>];</span><br><span class="line">        Arrays.fill(f[<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            f[i][<span class="number">0</span>] = (f[i - <span class="number">1</span>][<span class="number">3</span>] + f[i - <span class="number">1</span>][<span class="number">2</span>] + f[i - <span class="number">1</span>][<span class="number">1</span>] + f[i - <span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">            f[i][<span class="number">1</span>] = (f[i - <span class="number">1</span>][<span class="number">2</span>] + f[i - <span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">            f[i][<span class="number">2</span>] = (f[i - <span class="number">1</span>][<span class="number">1</span>] + f[i - <span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">            f[i][<span class="number">3</span>] = (f[i - <span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> ff : f[n - <span class="number">1</span>]) &#123;</span><br><span class="line">            res = (res + ff) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-LC552-学生出勤记录-II">5.<a href="https://leetcode.cn/problems/student-attendance-record-ii/"><strong>LC552. 学生出勤记录 II</strong></a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">checkRecord</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        动态规划:</span></span><br><span class="line"><span class="comment">        按 总出勤 计，学生缺勤（&#x27;A&#x27;）严格 少于两天。</span></span><br><span class="line"><span class="comment">        那么可以将情况分为两种:0天或者1天A</span></span><br><span class="line"><span class="comment">        其中，1天的可以枚举A出现的天数，然后两边通过乘法原理进行求解次数</span></span><br><span class="line"><span class="comment">            0天的可以通过动态规划进行求解，因为只有L与P两种状态，合法情况为最多两个连续的L</span></span><br><span class="line"><span class="comment">        1.状态定义:由于第i天（从1开始）的选择被前两天i-1与i-2限制了，因此会多出两个维度f[i][pre][cur]</span></span><br><span class="line"><span class="comment">            因此定义f[i][0][0]为第i-1与i天选择为LL的情形数，f[i][0][1]为第i-1与i天选择为LP的情形数</span></span><br><span class="line"><span class="comment">                f[i][1][0]为第i-1与i天选择为PL的情形数，f[i][1][1]为第i-1与i天选择为PP的情形数</span></span><br><span class="line"><span class="comment">        2.状态转移:显然f[i][0][0]=f[i-1][1][0]，f[i][0][1]=f[i-1][0][0]+f[i-1][1][0]</span></span><br><span class="line"><span class="comment">                f[i][1][0]=f[i-1][0][1]+f[i-1][1][1]，f[i][1][1]=f[i-1][1][1]+f[i-1][0][1]</span></span><br><span class="line"><span class="comment">        3.初始化:f[2][0][0]=1，f[2][1][0]=1，f[2][0][1]=1，f[2][1][1]=1</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序，其余任意</span></span><br><span class="line"><span class="comment">        5.返回形式:∑f[n][pre][cur]+有1个A的情形数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">long</span>[][][] f = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">        f[<span class="number">2</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        f[<span class="number">2</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        f[<span class="number">2</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        f[<span class="number">2</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">1</span>] = (f[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] + f[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">            f[i][<span class="number">1</span>][<span class="number">0</span>] = (f[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] + f[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]) % MOD;</span><br><span class="line">            f[i][<span class="number">1</span>][<span class="number">1</span>] = (f[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] + f[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// sum[i]表示长度为i天数不包含A的合法情形数</span></span><br><span class="line">        <span class="type">long</span>[] sum = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        sum[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 没有天数视为1</span></span><br><span class="line">        sum[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            sum[i] = (f[i][<span class="number">0</span>][<span class="number">0</span>] + f[i][<span class="number">0</span>][<span class="number">1</span>] + f[i][<span class="number">1</span>][<span class="number">0</span>] + f[i][<span class="number">1</span>][<span class="number">1</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(Arrays.toString(sum));</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> sum[n];</span><br><span class="line">        <span class="comment">// 统计带A的合法情形数，其中i为A出现的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            res = (res + (sum[i - <span class="number">1</span>] * sum[n - i]) % MOD) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">状态机DP就是考虑到当前时刻、位置等，有可能处于有限种情形中的其中一种</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="动态规划" scheme="https://www.fomal.cc/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="状态机DP" scheme="https://www.fomal.cc/tags/%E7%8A%B6%E6%80%81%E6%9C%BADP/"/>
    
  </entry>
  
  <entry>
    <title>二维前缀和专题</title>
    <link href="https://www.fomal.cc/posts/b7f88f4c.html"/>
    <id>https://www.fomal.cc/posts/b7f88f4c.html</id>
    <published>2022-08-11T22:23:10.000Z</published>
    <updated>2022-08-11T22:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>二维前缀和模板：</strong></p><p><strong>一维前缀和:sum[i,j]=sum[j+1]-sum[i]</strong></p><p>将sum[i][j]看成是以 <strong>matrix[0][0]</strong> 为左上角顶点, <strong>matrix[i-1][j-1]</strong> 为右下角顶点的矩阵内所有元素的和</p><p><strong>初始化sum矩阵</strong>：sum[i + 1][j + 1] = sum[i][j + 1] + sum[i + 1][j] - sum[i][j] + matrix[i][j];</p><p><img src="https://cdn.staticaly.com/gh/fomalhaut1998/markdown_pic@main/img/202209302105654.jpg" alt="p21"></p><p><strong>区块求和:</strong> sumRegion(r1, c1, r2, c2)=sum[r2 + 1, c2 + 1] - sum[r1, c2 + 1] - sum[r2 + 1, c1] + sum[r1, c1]</p><p><img src="https://cdn.staticaly.com/gh/fomalhaut1998/markdown_pic@main/img/202209302105593.jpg" alt="p22"></p><p>也就是数说sum[i][j]是比matrix<strong>超前一位</strong>的</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] sum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        sum = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                sum[i + <span class="number">1</span>][j + <span class="number">1</span>] = sum[i][j + <span class="number">1</span>] + sum[i + <span class="number">1</span>][j] - sum[i][j] + matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求以(r1,c1)为左上角,(r2,c2)为右下角的区块和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRegion</span><span class="params">(<span class="type">int</span> r1, <span class="type">int</span> c1, <span class="type">int</span> r2, <span class="type">int</span> c2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[r2 + <span class="number">1</span>][c2 + <span class="number">1</span>] - sum[r1][c2 + <span class="number">1</span>] - sum[r2 + <span class="number">1</span>][c1] + sum[r1][c1];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">二维前缀和是指数据维度有两个i与j，求解矩阵内某个矩形区域内数字和的问题是二维前缀和问题</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二维前缀和" scheme="https://www.fomal.cc/tags/%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口专题</title>
    <link href="https://www.fomal.cc/posts/63fc9391.html"/>
    <id>https://www.fomal.cc/posts/63fc9391.html</id>
    <published>2022-08-11T22:20:42.000Z</published>
    <updated>2022-08-11T22:20:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1004-最大连续1的个数-III"><a href="https://leetcode.cn/problems/max-consecutive-ones-iii/">1004. 最大连续1的个数 III</a></h2><p><strong>解题思路</strong></p><p><strong>重点：</strong> 题意转换。把「最多可以把 K 个 0 变成 1，求仅包含 1 的最长子数组的长度」转换为 「找出一个最长的子数组，该子数组内最多允许有 K 个 0 」。</p><p>经过上面的题意转换，我们可知本题是求最大连续子区间，可以使用滑动窗口方法。滑动窗口的限制条件是：窗口内最多有 K 个 0。</p><p><strong>代码思路：</strong></p><p>1.使用 l 和 r 两个指针，分别指向滑动窗口的左右边界。</p><p>2.<strong>r 主动右移：</strong> r 指针每次移动一步。当nums[r]为 0，说明滑动窗口内增加了一个 0；</p><p>3.<strong>l 被动右移：</strong> 判断此时窗口内 0 的个数，如果超过了 k，则 l 指针被迫右移，直至窗口内的 0 的个数小于等于 k 为止。</p><p>4.<strong>滑动窗口长度最大值</strong>就是所求。</p><p>示例：</p><p>以 A= [1,1,1,0,0,0,1,1,1,1,0], K = 2 为例，下面的动图演示了滑动窗口的两个指针的移动情况。</p><p>见 <a href="https://leetcode.cn/problems/max-consecutive-ones-iii/solution/fen-xiang-hua-dong-chuang-kou-mo-ban-mia-f76z/"><strong>1004. 最大连续1的个数 III - 负雪明烛 的题解</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestOnes</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">zero</span> <span class="operator">=</span> <span class="number">0</span>;   <span class="comment">// 窗口中0的个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>, l = <span class="number">0</span>; r &lt; n; r++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[r] == <span class="number">0</span>) zero++; <span class="comment">// r主动右移形成新的窗口</span></span><br><span class="line">        <span class="comment">// 窗口内的0个数&gt;k代表不符合题意-&gt;此时l应被动移动至符合对应r要求的位置</span></span><br><span class="line">        <span class="keyword">while</span> (zero &gt; k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[l] == <span class="number">0</span>) zero--;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 维护每一轮r对应的窗口长度最大值就是res</span></span><br><span class="line">        res = Math.max(res, r - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分享滑动窗口模板</p><p>《挑战程序设计竞赛》这本书中把滑动窗口叫做「虫取法」，我觉得非常生动形象。因为滑动窗口的两个指针移动的过程和虫子爬动的过程非常像：前脚不动，把后脚移动过来；后脚不动，把前脚向前移动。</p><p>我分享一个滑动窗口的模板，能解决大多数的滑动窗口问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findSubArray(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> num.length; <span class="comment">// 数组or字符串长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>;     <span class="comment">// 双指针，表示当前遍历的区间[l, r]，闭区间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 用于统计 子数组or子区间 是否有效，根据题目可能会改成求和or计数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 保存最大的满足题目要求的 子数组or子串 长度</span></span><br><span class="line">    <span class="keyword">while</span> (r &lt; n)&#123;     <span class="comment">// 当右边的指针没有搜索到 数组or字符串 的结尾</span></span><br><span class="line">        sum += nums[r]     <span class="comment">// 增加当前右边指针的数字or字符的求和or计数</span></span><br><span class="line">        <span class="keyword">while</span> 区间[l, r]不符合题意&#123;</span><br><span class="line">            sum -= nums[l] <span class="comment">// 移动左指针前需要从sum中减少l位置字符的求和or计数</span></span><br><span class="line">            l++ <span class="comment">// 真正的移动左指针，注意不能跟上面一行代码写反</span></span><br><span class="line">        &#125; <span class="comment">// 此时需要一直移动左指针，直至找到一个符合题意的区间</span></span><br><span class="line">        <span class="comment">// 到 while 结束时，我们找到了一个符合题意要求的 子数组or子串</span></span><br><span class="line">        res = Math.max(res, r - l + <span class="number">1</span>) <span class="comment">// 需要更新结果</span></span><br><span class="line">        r++ <span class="comment">// 移动右指针，去探索新的区间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>滑动窗口中用到了左右两个指针，它们移动的思路是：以右指针作为驱动，拖着左指针向前走。右指针每次只移动一步，而左指针在内部 while 循环中每次可能移动多步。右指针是主动前移，探索未知的新区域；左指针是被迫移动，负责寻找满足题意的区间。</strong></p><p><strong>模板的整体思想是：</strong></p><p>1.定义两个指针 l 和 r 分别指向区间的开头和结尾，注意是闭区间；定义 sum 用来统计该区间内的各个字符出现次数；</p><p>2.第一重 while 循环是为了判断 r 指针的位置是否超出了数组边界；当 r 每次到了新位置，需要增加 r 指针的求和/计数；</p><p>3.第二重 while 循环是让 l 指针向右移动到 [l, r] 区间符合题意的位置；当 l 每次移动到了新位置，需要减少 l 指针的求和/计数；</p><p>4.在第二重 while 循环之后，成功找到了一个符合题意的 [l, r] 区间，题目要求最大的区间长度，因此更新 res = max(res, 当前区间的长度) 。</p><p>5.r 指针每次向右移动一步，开始探索新的区间。</p><p>6.模板中的 sum 需要根据题目意思具体去修改，本题是求和题目因此把sum 定义成整数用于求和；如果是计数题目，就需要改成字典用于计数。当左右指针发生变化的时候，都需要更新 sum 。</p><p>7.另外一个需要根据题目去修改的是内层 while 循环的判断条件，即： 区间 [l, r] 不符合题意 。对于本题而言，就是该区间内的 0 的个数 超过了 2 。</p><p><strong>滑窗题目主要有两种类型：</strong></p><p>1.窗口大小固定，例如为10，这时候相当于左右边界必定严格同步移动。</p><p>2.左指针l不回退类型，这类型一般是新加入nums[r]使得回退必定不符合条件，旧的nums[r]已经不符合条件，这种也可以利用滑窗的思想求解。</p><p><strong>再来一道练习题：</strong></p><h2 id="LC209-长度最小的子数组"><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">LC209. 长度最小的子数组</a></h2><p>给定一个含有n个正整数的数组和一个正整数<code>target</code> 。<br>找出该数组中满足其和<code>≥ target</code> 的长度最小的连续子数组<code>〔numsl，numsl+1，...，numsr-1,numsr]</code>，并返回其长度。如果不存在符合条件的子数组，返回0。<br><strong>示例1:</strong><br>输入： target = 7, nums = [2,3,1,2,4,3] 输出：2<br>解释：子数组[4,3]是该条件下的长度最小的了教组。<br><strong>示例2:</strong><br>输入： target = 4，nums = [1,4,4] 输出：1<br><strong>示例3:</strong><br>输入： target = 11，nums = [1,1,1,1,1,1,1,1] 输出：0</p><p><strong>思路：</strong></p><p><strong>滑动窗口</strong>:</p><p>这一题最关键的字眼&quot;<strong>≥ target 的长度最小的 连续子数组</strong>&quot;</p><p>这个字眼可以联想到很多东西</p><p>1.<strong>连续</strong>子数组：是连续的，因此可以与<strong>前缀和</strong>进行结合（实际上sum变量是一种对于前缀和的优化写法，目的是快速计算窗口的和）</p><p>同时，连续子数组，<strong>左右指针</strong>为边界就可以确定一个连续子数组-&gt;<strong>滑动窗口</strong></p><p>因此这一题的的提示已经非常明确了，必定是用滑窗</p><p>2.长度最小：一般来说求最小长度这种全局最优状态，可以考虑<strong>动态规划</strong>或者<strong>一路维护</strong></p><p>这里用dp的话，状态就是nums[i]结尾的最大长度，显然不太合适，dp[i-1]与dp[i]没有很明显的联系</p><p>那么就需要一路维护，求出<strong>以nums[r]为右边界的窗口的最小长度，r∈[0,len-1]</strong></p><p>维护好nums[0]~nums[len-1]为右边界的合法窗口长度，就是全局的合法窗口最小值，也就是所求！！！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// 滑窗:右指针主动右移,左指针被动右移</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 维护当前窗口[l,r]的总和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 主动移动右指针</span></span><br><span class="line">        <span class="keyword">for</span> (; r &lt; len; r++) &#123;</span><br><span class="line">            <span class="comment">// 计算当前窗口[l,r]的和:新加入的元素只有nums[r]</span></span><br><span class="line">            <span class="comment">// r指针可能要循环多次才能找到符合条件的[l,r],因为l右移至不符合sum&gt;=target</span></span><br><span class="line">            sum += nums[r];</span><br><span class="line">            <span class="comment">// 若窗口[l,r]满足条件,统计长度并尝试将其尽可能缩小,直至不符合题意</span></span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">                <span class="comment">// [l,r]符合条件,维护res</span></span><br><span class="line">                res = Math.min(res, r - l + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// l一直右移并统计,直至不满足条件</span></span><br><span class="line">                <span class="comment">// 这里有个很值得思考的点:为什么l指针可以义无反顾地移动至不符合条件的l+1?</span></span><br><span class="line">                <span class="comment">// [l,r]合法;[l+1,r]不合法,而[l,r+1]及更长的不可能被统计因为只统计短的</span></span><br><span class="line">                <span class="comment">// [l,r-1]以及更短的呢?右边界为r-1的情况已统计,因为l会直接移动到不合法且nums都为正数,因此窗口不可能继续缩小!</span></span><br><span class="line">                <span class="comment">// 所以此时l可以义无反顾地移动至l+1</span></span><br><span class="line">                sum -= nums[l++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若没有窗口符合条件就是0</span></span><br><span class="line">        <span class="keyword">return</span> res == Integer.MAX_VALUE ? <span class="number">0</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>为什么l指针可以义无反顾地移动至不符合条件的l+1?滑窗精髓所在-&gt;减少不必要的计算</strong></p></blockquote>]]></content>
    
    
    <summary type="html">这篇文章分享一个滑动窗口的模板，能解决大多数的滑动窗口问题</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="滑窗" scheme="https://www.fomal.cc/tags/%E6%BB%91%E7%AA%97/"/>
    
    <category term="双指针" scheme="https://www.fomal.cc/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>状态压缩DP专题</title>
    <link href="https://www.fomal.cc/posts/11a473c.html"/>
    <id>https://www.fomal.cc/posts/11a473c.html</id>
    <published>2022-08-11T22:16:46.000Z</published>
    <updated>2022-08-11T22:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>两道入门题目：</strong></p><h3 id="1-2305-公平分发饼干">1.<a href="https://leetcode.cn/problems/fair-distribution-of-cookies/"><strong>2305. 公平分发饼干</strong></a></h3><p>1.状态定义:<strong>dp[i][j]</strong> 为第 <strong>i</strong>个孩子分饼干状态为 <strong>j</strong> 时每个孩子能分到的最多饼干数的最小值</p><p>2.状态转移:要求得<strong>dp[i][j]</strong> 的值，要考虑 <strong>j</strong> 的每个子集，再维护 子集计算出的最大值然后转移过来 <strong>最小值</strong></p><p>​      <strong>dp[i][j]=min(max(dp[i-1][j-x],sum[x]))</strong> 其中sum[x]为分配状态为 <strong>x</strong> 时的总的糖果数</p><p>3.初始化:<strong>dp[0][j]=sum[j]</strong>，只分给第一个孩子肯定是全分了总数就是饼干数<strong>sum[j]</strong>，其余为 <strong>INF</strong> 方便覆盖</p><p>4.遍历顺序:先i后j最后x,正序</p><p>5.返回形式:返回 <strong>dp[n-1][mask-1]</strong> 即 所有孩子将饼干全部分完时<strong>每个孩子最大饼干数的最小值</strong></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">distributeCookies</span><span class="params">(<span class="type">int</span>[] cookies, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cookies.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[k][mask];</span><br><span class="line">        <span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[mask];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; mask; i++) &#123;</span><br><span class="line">            <span class="comment">// x为获取的最低位1后面尾随0个数，y为缺位x的差集</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.numberOfTrailingZeros(i), y = i - (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">            sum[i] = sum[y] + cookies[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        System.arraycopy(sum, <span class="number">0</span>, dp[<span class="number">0</span>], <span class="number">0</span>, mask);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            Arrays.fill(dp[i], <span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; mask; j++) &#123;</span><br><span class="line">                <span class="comment">// 此时j-x就是枚举j的所有子集</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> j; x != <span class="number">0</span>; x = (x - <span class="number">1</span>) &amp; j) &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i][j], Math.max(dp[i - <span class="number">1</span>][j - x], sum[x]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[k - <span class="number">1</span>][mask - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1723-完成所有工作的最短时间">2.<a href="https://leetcode.cn/problems/find-minimum-time-to-finish-all-jobs/"><strong>1723. 完成所有工作的最短时间</strong></a></h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumTimeRequired</span><span class="params">(<span class="type">int</span>[] jobs, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> jobs.length;    <span class="comment">// n为工作份数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; n;  <span class="comment">// 工作分配情况数目</span></span><br><span class="line">        <span class="comment">// dp[i][j]表示考虑索引为[0,i]的工人,工作分配情况为j(01010...表示)时每个工人最大工作时间的最小值</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[k][mask];</span><br><span class="line">        <span class="comment">// 初始化sum[i] -&gt; 完成状态为i的工作的总时间</span></span><br><span class="line">        <span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[mask];</span><br><span class="line">        <span class="comment">// i∈[1,mask-1] 因为sum[0]=0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; mask; i++) &#123;</span><br><span class="line">            <span class="comment">// x为i最低位1后面的尾随0个数,y为与i相比仅仅缺位x位置的状态</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.numberOfTrailingZeros(i), y = i - (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">            sum[i] = sum[y] + jobs[x];  <span class="comment">// 加上缺位的x就是i的时长</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化dp</span></span><br><span class="line">        System.arraycopy(sum, <span class="number">0</span>, dp[<span class="number">0</span>], <span class="number">0</span>, mask);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            Arrays.fill(dp[i], <span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历dp状态</span></span><br><span class="line">        <span class="comment">// 遍历每个工人i</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="comment">// 遍历每种状态j</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; mask; j++) &#123;</span><br><span class="line">                <span class="comment">// 遍历状态j的每种子集j-x</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> j; x != <span class="number">0</span> ; x = (x - <span class="number">1</span>) &amp; j) &#123;</span><br><span class="line">                    <span class="comment">// 找到每种子集j-x得到的最大值转移过来的 最小值 就是考虑[0,i]工人,状态为j-x的最大工作时间的最小值</span></span><br><span class="line">                    <span class="comment">// 子集转移途径为:取前面dp[i - 1][j - x]最大值的最小值与分配给工人i的sum[x]进行比较找到最大值</span></span><br><span class="line">                    <span class="comment">// 再维护每种转移途经最小值</span></span><br><span class="line">                    dp[i][j] = Math.min(dp[i][j], Math.max(dp[i - <span class="number">1</span>][j - x], sum[x]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 所有工人分配完所有工作的最长单人工作时间最小值</span></span><br><span class="line">        <span class="keyword">return</span> dp[k - <span class="number">1</span>][mask - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不妨来总结一下状态压缩DP：其实状态压缩DP是类似于暴力法回溯的方法，能用状态压缩方法做的通常都可以用回溯+剪枝来求解。一般来说这种问题称为“分配问题”，或者叫做“桶轮询”。就是将元素(通常数目很小&lt;32个)分配到多个容器(桶)中，然后求解有每个桶最多数目的最少值，或者是满足条件路径数等，这里求解目标的不同体现在转移方程上。</p><p>抽象一下：饼干、工作（要分配的对象）——<strong>元素</strong>；工人、孩子（被分配到的地方）——<strong>容器（桶）</strong></p><p><a href="https://leetcode.cn/problems/beautiful-arrangement/">526. 优美的排列</a> 这道题就是要求路径数目，同时将桶容量限制为1，因此子集数目只有 i 个</p><h3 id="3-总体模板（本质也是DP）：">3.总体模板（本质也是DP）：</h3><p>1.状态定义：dp[i][i]为考虑前 <strong>i</strong> 个容器（桶），分配状态为 <strong>j</strong> (0101表示分配状态)时候的 所求量（路径数、最大值、最小值等）</p><p>2.状态转移：此时遍历到第 <strong>i</strong> 个容器（桶），一般来说要求 <strong>dp[i][j]</strong> 得考虑前面容器的情况 -&gt; <strong>dp[i-1][j-x]</strong></p><p>其中 <strong>x</strong> 为第 <strong>i</strong> 个容器的选择状态，那么 <strong>j-x</strong> 就是 <strong>[0,i-1]</strong> 个容器的选择状态</p><p>将第<strong>i</strong>个容器独立出来考虑，这个容器的选择有哪些？也就是转移路径有哪些？？？</p><p>很显然如果桶的容量（包括元素个数与总和）没有限制的话，<strong>j</strong> 的全体子集（除了本身）都是符合要求的前一个状态</p><p>-&gt; 因此可以直接通过下面语句枚举 <strong>j</strong> 的所有合法子集来进行 dp[i][j] 状态转移</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> j; x != <span class="number">0</span> ; x = (x - <span class="number">1</span>) &amp; j) &#123;</span><br><span class="line">    dp[i][j] = dp[i - <span class="number">1</span>][j - x]... <span class="comment">// 搭建两个状态的桥梁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>-&gt; 当然也有可能<strong>容量有限</strong>：参考 <a href="https://leetcode.cn/problems/beautiful-arrangement/">526. 优美的排列</a> 枚举符合条件的子集（合法转移路径）进行转移即可</p><p>3.初始化：一般来说，初始化 <strong>dp[0][j]</strong> 为首个容器分得状态 <strong>j</strong> 时的所求量；其他<strong>dp[i][j]</strong> 按照转移逻辑来初始化</p><p>目的都是要作为初始哨兵不影响第一个值的覆盖（如求最大值就弄个很小的数第一个比较的必定顺利覆盖…）</p><p>4.遍历顺序：一般是先遍历容器 <strong>i</strong> ，再遍历每个状态 <strong>j</strong> ，最后遍历每种合法转移路径 <strong>j-x</strong>，默认正序</p><p>5.返回形式：一般返回 <strong>dp[n-1][mask-1]</strong> 表示考虑所有桶，把所有元素分配完的所求量为多少</p>]]></content>
    
    
    <summary type="html">状态压缩DP是类似于暴力法回溯的方法，能用状态压缩方法做的通常都可以用回溯+剪枝来求解，这篇文章总结状态压缩DP的一些解题方法</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="动态规划" scheme="https://www.fomal.cc/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="状态压缩DP" scheme="https://www.fomal.cc/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/"/>
    
  </entry>
  
  <entry>
    <title>有向图的表示方法</title>
    <link href="https://www.fomal.cc/posts/b0713fa8.html"/>
    <id>https://www.fomal.cc/posts/b0713fa8.html</id>
    <published>2022-08-11T22:06:17.000Z</published>
    <updated>2022-08-11T22:06:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>约定 <strong>n</strong> 为点数， <strong>m</strong>为边数，times = [[2,1,1],[2,3,1],[3,4,1]] 表示3条边</p><p>2-&gt;1 权重为1</p><p>2-&gt;3 权重为1</p><p>3-&gt;4 权重为1</p><h3 id="1-邻接矩阵">1.邻接矩阵</h3><p>这是一种使用二维矩阵来进行存图的方式。</p><p>适于边数较多的「<strong>稠密图</strong>」使用，当边数量接近点的数量的平方，即m≈n²时，可定义为「<strong>稠密图</strong>」。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 邻接矩阵数组：w[a][b] = c 代表从 a 到 b 有权重为 c 的边</span></span><br><span class="line"><span class="type">int</span>[][] w = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加边操作</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">    w[a][b] = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-邻接表-链式前向星存图">2.邻接表(链式前向星存图)</h3><p>适用于边数较少的「<strong>稀疏图</strong>」使用，当边数量接近点的数量，即m≈n 时，可定义为「<strong>稀疏图</strong>」。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] he = <span class="keyword">new</span> <span class="title class_">int</span>[N], e = <span class="keyword">new</span> <span class="title class_">int</span>[M], ne = <span class="keyword">new</span> <span class="title class_">int</span>[M], w = <span class="keyword">new</span> <span class="title class_">int</span>[M];</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">    e[idx] = b;    <span class="comment">// 边idx指向节点b</span></span><br><span class="line">    ne[idx] = he[a];    <span class="comment">// 头插法在上一轮的a射出的边的头结点上插入idx</span></span><br><span class="line">    he[a] = idx;    <span class="comment">// 更新a射出的边的头结点为边idx</span></span><br><span class="line">    w[idx] = c;    <span class="comment">// 边idx的权重为c</span></span><br><span class="line">    idx++;        <span class="comment">// 边索引+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先 idx 是用来对<strong>边</strong>进行编号的：</p><p>1.he 数组：存储是某个节点所对应的<strong>边的集合</strong>（链表）的头结点；</p><p>如下图所示：he[u]=边4</p><p>注意：<strong>仅仅是存储头结点</strong>，之后就可以根据ne数组进行查找！</p><p><img src="https://s1.vika.cn/space/2022/09/30/28e75107c2ae40a78eaa853d1e0f6d99" alt="p20"></p><p>2.e  数组：<strong>某一条边指向的节点</strong>：e[边4]=v4</p><p><a href="http://3.ne">3.ne</a> 数组：由于是以链表的形式进行存边，该数组用于<strong>找到下一条边</strong></p><p>ne[边4]=边3；构建链表的过程是头插法：null&lt;-边1&lt;-边2…</p><p>4.w  数组：用于记录<strong>某条边的权重</strong>为多少。</p><p>编码的边是用idx作为索引来进行标记的，也就是说每一个idx对应一条边</p><p>因此当我们想要<strong>遍历所有由 a 点发出的边（注意是a伸出的边）</strong> 时，可使用如下方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从a射出的边的头结点出发一路遍历至-1(null)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> he[a]; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> e[i], c = w[i]; <span class="comment">// 存在由 a 指向 b 的边，权重为 c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-类">3.类</h3><p>这是一种最简单，但是相比上述两种存图方式，使用得较少的存图方式。</p><p>只有当我们需要确保某个操作复杂度严格为<strong>O(m)</strong> 时，才会考虑使用。</p><p>具体的，我们建立一个类来记录有向边信息：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="comment">// 代表从 a 到 b 有一条权重为 c 的边</span></span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    Edge(<span class="type">int</span> _a, <span class="type">int</span> _b, <span class="type">int</span> _c) &#123;</span><br><span class="line">        a = _a; b = _b; c = _c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常我们会使用 List 存起所有的边对象，并在需要遍历所有边的时候，进行遍历：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Edge&gt; es = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (Edge e : es) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-HashMap">4.HashMap</h3><p>注意：如果节点索引集中可以用List数组代替HashMap，具体参考List数组创建与初始化方法</p><p>key为出发点，value为该出发点对应的终点列表（一个出发点可能对应多个终点）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HashMap存图(适用于离散节点)</span></span><br><span class="line">HashMap&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">    List&lt;Integer&gt; list1 = map.getOrDefault(edge[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    list1.add(edge[<span class="number">1</span>]);</span><br><span class="line">    map.put(edge[<span class="number">0</span>], list1);</span><br><span class="line">    <span class="comment">// 若为无向图</span></span><br><span class="line">    List&lt;Integer&gt; list2 = map.getOrDefault(edge[<span class="number">1</span>], <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    list2.add(edge[<span class="number">0</span>]);</span><br><span class="line">    map.put(edge[<span class="number">1</span>], list2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带权图</span></span><br><span class="line">HashMap&lt;Integer, List&lt;<span class="type">int</span>[]]&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt; list1 = map.getOrDefault(edge[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    list1.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;edge[<span class="number">1</span>], edge[<span class="number">2</span>]&#125;);</span><br><span class="line">    map.put(edge[<span class="number">0</span>], list1);</span><br><span class="line">    <span class="comment">// 若为带权无向图</span></span><br><span class="line">    List&lt;Integer&gt; list2 = map.getOrDefault(edge[<span class="number">1</span>], <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    list2.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;edge[<span class="number">0</span>], edge[<span class="number">2</span>]&#125;);</span><br><span class="line">    map.put(edge[<span class="number">1</span>], list2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表存图(适用于集中节点)</span></span><br><span class="line">List&lt;Integer&gt;[] list = <span class="keyword">new</span> <span class="title class_">List</span>[n];</span><br><span class="line"><span class="comment">// 注意这里不能Arrays.fill()否则是同一个对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) list[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] e : edges) &#123;</span><br><span class="line">    <span class="comment">// e[0] -&gt; e[1]</span></span><br><span class="line">    list[e[<span class="number">0</span>]].add(e[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// 若为无向图</span></span><br><span class="line">    list[e[<span class="number">1</span>]].add(e[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">有向图的表示方法有很多：邻接矩阵、链式前向星存图、List数组、HashMap、类等</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图" scheme="https://www.fomal.cc/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>排序算法专题</title>
    <link href="https://www.fomal.cc/posts/7236f06c.html"/>
    <id>https://www.fomal.cc/posts/7236f06c.html</id>
    <published>2022-08-11T21:59:08.000Z</published>
    <updated>2022-08-11T21:59:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-快速排序">1.快速排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] nums = &#123;<span class="number">10</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">19</span>&#125;;</span><br><span class="line">    quickSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    快速排序:原理每一轮选一个基准元素pivot</span></span><br><span class="line"><span class="comment">    利用两个指针分别将&lt;=pivot和&gt;pivot的元素分别放在pivot的左边与右边</span></span><br><span class="line"><span class="comment">    最后递归调用原函数直至区间长度缩小为1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>; <span class="comment">//  区间长度&lt;=1直接结束</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> low, r = high;  <span class="comment">// 左右指针</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> nums[low];  <span class="comment">// 以nums[low]为基准</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="comment">// r指针先行可以确保最后停留的位置必定是&lt;=基准，再不济就移动到pivot位置上；而l指针先行会找到首个大于基准的位置</span></span><br><span class="line">        <span class="comment">// 例如在[1,2,3,4,5]这种情况会停在2处，此时r指针想找小于等于基准的元素但是也只能移动到2处结束</span></span><br><span class="line">        <span class="comment">// 循环退出-&gt;将1与2的位置交换，此时有[2,1,3,4,5] 这个就违反了快排的宗旨了，再递归左右子区间就出错。</span></span><br><span class="line">        <span class="comment">// 归根到底右指针先行，是为了避免左指针主动时导致停留在比基准大的地方，与基准交换后直接导致基准左边有元素大于基准。</span></span><br><span class="line">        <span class="comment">// 右指针先行会主动占据&lt;=基准的元素，再不济就是移动到基准位置，这两种情况符合快排目的.</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] &gt; pivot) r--;  <span class="comment">// r停留在首个&lt;=基准的元素处</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] &lt;= pivot) l++;  <span class="comment">// l停留在首个&gt;基准的元素处</span></span><br><span class="line">        <span class="keyword">if</span> (l &lt; r) &#123;    <span class="comment">// 交换nums[l]与nums[r]</span></span><br><span class="line">            <span class="comment">// nums[l] ^= nums[r];</span></span><br><span class="line">            <span class="comment">// nums[r] ^= nums[l];</span></span><br><span class="line">            <span class="comment">// nums[l] ^= nums[r];</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> nums[l];</span><br><span class="line">            nums[l] = nums[r];</span><br><span class="line">            nums[r] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// l == r 将nums[low]与nums[l]交换</span></span><br><span class="line">    nums[low] = nums[l];</span><br><span class="line">    nums[l] = pivot;</span><br><span class="line">    <span class="comment">// 递归排序左右子区间</span></span><br><span class="line">    quickSort(nums, low, r - <span class="number">1</span>);</span><br><span class="line">    quickSort(nums, r + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-归并排序">2.归并排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Merge_Sort</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">10</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">19</span>&#125;;</span><br><span class="line">        mergeSort(nums);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    归并排序:分区间排序+合并两个有序数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        mergeSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    重载的带区间端点的归并排序方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span>[] tmp)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(nums, l, mid, tmp);   <span class="comment">// 递归排序[l,mid]</span></span><br><span class="line">        mergeSort(nums, mid + <span class="number">1</span>, r, tmp);   <span class="comment">// 递归排序[mid+1,r]</span></span><br><span class="line">        <span class="comment">// 合并两个有序数组[l,mid]和[mid+1,r]</span></span><br><span class="line">        merge(nums, l, mid, r, tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    合并nums两个区间内的两个有序数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r, <span class="type">int</span>[] tmp)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> l;    <span class="comment">// 合并后的指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l, j = mid + <span class="number">1</span>; <span class="comment">// 左右指针</span></span><br><span class="line">        <span class="comment">// 将[l,mid]和[mid+1,r]元素按照大小拷贝到tmp对应位置中</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;    <span class="comment">// 等于的时候还没赋值!</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= nums[j]) &#123;</span><br><span class="line">                tmp[idx++] = nums[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp[idx++] = nums[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 走完还没有走完的一边</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid) tmp[idx++] = nums[i++];</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= r) tmp[idx++] = nums[j++];</span><br><span class="line">        <span class="comment">// 将临时数组拷贝至nums对应位置</span></span><br><span class="line">        System.arraycopy(tmp, l, nums, l, r - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-堆排序">3.堆排序</h3><p>堆是具有以下性质的完全二叉树：每个结点的值都<strong>大于</strong>或等于其左右孩子结点的值，称为大顶堆；</p><p>或者每个结点的值都<strong>小于</strong>或等于其左右孩子结点的值，称为小顶堆。如下图：</p><p><img src="https://s1.vika.cn/space/2022/09/30/8765ce29ffd444089c6c64ad89122516" alt="p19"></p><p><strong>参考资料：</strong><a href="https://blog.csdn.net/Javascript_tsj/article/details/124051388"><strong>堆排序（超详细图解 java版）</strong></a></p><p><strong>主要步骤：</strong></p><p>1.将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆（升序一般用大顶堆）</p><p>2.将堆顶元素与末尾元素交换，将最大元素&quot;沉&quot;到数组末端</p><p>3.重新调整结构,使其满足堆定义，然后继续交换堆顶元素与当前末尾元素</p><p>4.反复执行调整+交换步骤，直到整个序列有序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        HeapSort(nums);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     堆排序主方法:</span></span><br><span class="line"><span class="comment">     一般来说升序排列就构造大顶堆(堆顶最大&amp;&amp;当前节点比左右子节点都大-&gt;但是左右节点的大小没有要求)</span></span><br><span class="line"><span class="comment">     堆的索引统一从0开始,因此总的范围在[0,len-1]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">HeapSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// 叶子节点肯定堆的最底层,不用下沉</span></span><br><span class="line">        <span class="comment">// 这里用了一个结论:只下沉非叶子节点间接也上浮了所有叶子节 因此只下沉前半部分即可保证堆有序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;    <span class="comment">// len÷2-1是首个非叶子结点索引</span></span><br><span class="line">            sink(nums, i, len - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下沉完后整个堆有序 堆顶元素就是最大元素</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注:索引为[0, i]之间为要调整的堆结范围</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 将堆中最后一个元素与堆顶元素交换,让最大值放到最后</span></span><br><span class="line">            swap(nums, <span class="number">0</span>, i);</span><br><span class="line">            <span class="comment">// 此时堆顶是下面换上去的元素很小,堆结构被破坏了,通过sink()方法让该元素下沉至适合位置</span></span><br><span class="line">            <span class="comment">// 注意此时要把最后一个排除在外,因为nums的最大值已经确定-&gt;此时堆范围变为[0,i-1]</span></span><br><span class="line">            sink(nums, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 下沉完之后[0,i-1]又是一个有序的堆</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调整堆方法(在大顶堆中表现为下沉)</span></span><br><span class="line"><span class="comment">     * 将指定索引target的元素在[0, end]范围内进行下沉操作至正确位置</span></span><br><span class="line"><span class="comment">     * 比较当前节点值与左右子节点最大值,若前节点值小于左右子节点最大值必须下沉(交换)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums   待排序的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 下沉目标元素索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end    要调整的堆范围最大索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> target;   <span class="comment">// 下沉指针</span></span><br><span class="line">        <span class="comment">// 若存在左子节点就进入循环(否则表明下沉到底层了)</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * idx + <span class="number">1</span> &lt;= end) &#123;</span><br><span class="line">            <span class="comment">// maxLR为左右子节点最大值对应的索引,初始化为左子节点索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">maxLR</span> <span class="operator">=</span> <span class="number">2</span> * idx + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 如果有右子节点 &amp;&amp; 右子节点的值比左子节点大</span></span><br><span class="line">            <span class="keyword">if</span> (maxLR + <span class="number">1</span> &lt;= end &amp;&amp; nums[maxLR + <span class="number">1</span>] &gt; nums[maxLR]) &#123;</span><br><span class="line">                <span class="comment">// 更新maxLR的值为右子节点索引</span></span><br><span class="line">                maxLR++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断 当前节点值 与 左右子节点最大值maxLR 的大小</span></span><br><span class="line">            <span class="comment">// 正确的堆结构应为:当前节点值nums[idx]&gt;=nums[maxLR] 若这里nums[idx]&lt;nums[maxLR]那就要交换了</span></span><br><span class="line">            <span class="keyword">if</span> (nums[idx] &lt; nums[maxLR]) &#123;</span><br><span class="line">                <span class="comment">// 将idx位置与maxLR位置元素进行交换</span></span><br><span class="line">                swap(nums, idx, maxLR);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// nums[idx]&gt;=nums[maxLR]表明target元素位置已经正确-&gt;退出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// idx指针往maxLR方向走</span></span><br><span class="line">            idx = maxLR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    交换nums[i]与nums[j]的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">排序算法是最常用最基础的的算法之一，本篇文章总结常用的3种时间复杂度为O(NlogN)的比较排序算法：快排、堆排序、归并排序，并整合出模板供参考！</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="https://www.fomal.cc/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="快排" scheme="https://www.fomal.cc/tags/%E5%BF%AB%E6%8E%92/"/>
    
    <category term="堆排序" scheme="https://www.fomal.cc/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
    <category term="归并排序" scheme="https://www.fomal.cc/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>区间求和专题</title>
    <link href="https://www.fomal.cc/posts/6e401bce.html"/>
    <id>https://www.fomal.cc/posts/6e401bce.html</id>
    <published>2022-08-11T21:41:18.000Z</published>
    <updated>2022-08-11T21:41:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-树状数组-「单点修改-区间查询」：">1.树状数组-&gt;「单点修改 &amp; 区间查询」：</h3><p>先输入一个长度为n的数组nums，有如下两种操作：</p><p>1.输入一个数m，输出数组中下标1~m的前缀和sum[1,m]</p><p>2.对某个指定下标的数进行值的修改</p><p><img src="https://cdn.staticaly.com/gh/fomalhaut1998/markdown_pic@main/img/202209302057880.jpg" alt="p10"></p><p>常规方法：<strong>前缀和</strong>，但是当单点修改的次数增多，前缀和更新耗时O(N)，然后再求sum[1,m]，总体时间复杂度为O(N^2)</p><p>进阶方法：<strong>树状数组和线段树</strong>可以达到单次操作logN级别。平均时间复杂度O(NlogN)</p><p><img src="https://cdn.staticaly.com/gh/fomalhaut1998/markdown_pic@main/img/202209302057092.jpg" alt="p11"></p><p>7=0111=0100+0010+0001=lowBit(7)+lowBit(3)+lowBit(1)</p><p><strong>前置知识</strong>：二进制区间分解lowBit(x)=x^(-x)求出x中仅保留最低位的1的数值，lowBit(7)=0100=4</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>概念：树状数组就是一种基于二进制思想的数据结构，基本用途是维护序列的前缀和</strong>。</p><p><strong>对于给定的序列a，设树状数组为c，则c[x]保存序列a的区间[x-lowbit(x)+1,x]中所有数的和</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] tr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br></pre></td></tr></table></figure><p>主要有以下两个基本操作:</p><p>(1) update，单点修改，修改序列a中的某个元素;</p><p>(2) query，区间查询，查询序列a中区间[1,x]的所有数的和。</p><p><img src="https://cdn.staticaly.com/gh/fomalhaut1998/markdown_pic@main/img/202209302058475.jpg" alt="p12"></p><p><strong>操作1:区间查询query</strong></p><p>树状数组能够完成的是查询前缀和，相减即可得到区间和。</p><p>利用c[x]维护的是序列a中[x-lowbit(x)+1,x]的区间和，然后不断向前寻找即可，时间复杂度为O(logN)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &gt; <span class="number">0</span>; i -= lowbit(i)) ans += tr[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>操作2:单点修改update</strong></p><p>单点修改更准确的说是“单点增加”，给序列a中的一个数a[x]加上t，然后要更新树状数组c维护的前缀和，只需要不断向上维护c[x]的父亲结点即可，时间复杂度为O(logN)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> u)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &lt;= n; i += lowbit(i)) tr[i] += u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：这里都默认索引从1开始</strong></p><p><strong>思考:如何初始化树状数组?</strong></p><p>方法一:输入序列a等价于对a进行单点修改，更新树状数组即可，时间复杂度为O(NlogN)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    add(i, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二:考虑每个结点对父亲结点的贡献，时间复杂度为O(N)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    tr[i] += nums[i];</span><br><span class="line">    <span class="keyword">if</span> (i + lowBit(i) &lt;= n) tr[i + lowBit(i)] += tr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三叶姐树状数组模板：</p><p>一篇不错的图解：<a href="https://leetcode-cn.com/problems/range-sum-query-mutable/solution/-by-hu-ge-8-t4rn/">[树状数组] 详解树状数组, 包含更新查询图解, 秒懂lowbit含义(JAVA 65ms, 68.6MB)</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上来先把三个方法写出来</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>[] tree;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询前缀和的方法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &gt; <span class="number">0</span>; i -= lowbit(i)) ans += tree[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在树状数组 x 位置中增加值 u</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> u)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &lt;= n; i += lowbit(i)) tree[i] += u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化「树状数组」，要默认数组是从 1 开始</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) add(i + <span class="number">1</span>, nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用「树状数组」：</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 原有的值是 nums[i]，要使得修改为 val，需要增加 val - nums[i]</span></span><br><span class="line">        add(i + <span class="number">1</span>, val - nums[i]); </span><br><span class="line">        nums[i] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> query(r + <span class="number">1</span>) - query(l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-线段树「单点修改、区间修改、单点查询、区间查询-但性能不高」">2.线段树「单点修改、区间修改、单点查询、区间查询-&gt;但性能不高」</h3><p><strong>参考资料：</strong><a href="https://mp.weixin.qq.com/s/T3Ds8Eb8mZ5f96NjRFr6WA"><strong>https://mp.weixin.qq.com/s/T3Ds8Eb8mZ5f96NjRFr6WA</strong></a></p><p><strong>以下笔记均参考力扣题解(推荐)：</strong><a href="https://leetcode.cn/problems/range-module/solution/by-jiang-hui-4-tu5a/">Range模块【线段树动态开点+线段树图解】</a></p><p><strong>什么是线段树？</strong></p><p>线段树其实是一种二叉搜索树，将一个大的区间划分为一个个单元区间。</p><p>内个单元区间表示成一个节点(<strong>单元区间-&gt;节点</strong>) 线段树中的线段，其实也是区间的意思，就是区间树</p><p>假设我们有一个数组为[1,2,3,4,5,6,7,8]，我们表示为一个区间和线段树就是下图：</p><p><img src="https://cdn.staticaly.com/gh/fomalhaut1998/markdown_pic@main/img/202209302058172.jpg" alt="p13"></p><p>可见线段树的区间是按照区间的中点进行分叉，左子节点的区间必定小于右子节点的区间，同理左右子树均是BST</p><p><strong>构建线段树代码（val基于区间求和）：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fomalhaut</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 线段树模板(今天一定一定要写出来!!!!!)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="comment">// 用节点数组表示的线段树</span></span><br><span class="line">    Node[] tree;</span><br><span class="line">    <span class="comment">// 原始数据</span></span><br><span class="line">    <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化线段树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SegmentTree</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;   <span class="comment">// 载入数据</span></span><br><span class="line">        <span class="built_in">this</span>.tree = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">4</span> * data.length];  <span class="comment">// 节点个数统一开4*N个</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        线段树节点类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> left;   <span class="comment">// (该节点对应的)区间左端点</span></span><br><span class="line">        <span class="type">int</span> right;  <span class="comment">// 区间右端点</span></span><br><span class="line">        <span class="type">int</span> lazy;   <span class="comment">// 懒标记</span></span><br><span class="line">        <span class="type">int</span> val;    <span class="comment">// 节点值(根据不同的问题意义不同)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据区间左右边界[l,r]来构建线段树:idx表示线段树的节点索引,l与r分别表示区间左右边界</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        tree[idx] = <span class="keyword">new</span> <span class="title class_">Node</span>(); <span class="comment">// 创建idx位置的节点</span></span><br><span class="line">        tree[idx].left = l; <span class="comment">// 该节点左边界为l</span></span><br><span class="line">        tree[idx].right = r;    <span class="comment">//该节点右边界为r</span></span><br><span class="line">        <span class="comment">// base case:到达叶子结点直接赋值</span></span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tree[idx].val = data[r - <span class="number">1</span>];    <span class="comment">// 因为idx从1开始,区间的l与r也是从1开始,但是data索引从0开始,因此向左偏移1位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;  <span class="comment">// [l,r]区间中点</span></span><br><span class="line">        <span class="comment">// 递归构建左右子树:当idx索引从1开始时,idx*2为左子节点,idx*2+1为右子节点</span></span><br><span class="line">        build(idx * <span class="number">2</span>, l, mid); <span class="comment">// 左子节点区间范围[l,mid] 左子节点个数&gt;=右子节点</span></span><br><span class="line">        build(idx * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r); <span class="comment">// 右子节点区间范围[mid+1,r]</span></span><br><span class="line">        tree[idx].val = tree[idx * <span class="number">2</span>].val + tree[idx * <span class="number">2</span> + <span class="number">1</span>].val;  <span class="comment">// 更新idx节点的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>懒标记的引入：</strong></p><p><img src="https://cdn.staticaly.com/gh/fomalhaut1998/markdown_pic@main/img/202209302058369.jpg" alt="p14"></p><p>如果是线段树，我们直接对根节点的值进行+(8-1+1)*1的操作就可以得到新的区间和，但是这样当我们查询中间某段区间的和时就会发现不对，因为这个+(8-1+1)*1没有涉及根节点的区间和操作！</p><p>于是就想可不可以在root处引入一个标记的量，在我们要下探到要求root子区间的区间和时可以把这个+1操作带下去？把子区间进行更新？于是就引入了<strong>lazy字段</strong></p><p><strong>注意：</strong> 我们只有在用到没有更新的区间时（也就是当前区间含有lazy），才会下传lazy，达到懒更新的目的。</p><p><img src="https://cdn.staticaly.com/gh/fomalhaut1998/markdown_pic@main/img/202209302058587.jpg" alt="p15"></p><p><img src="https://cdn.staticaly.com/gh/fomalhaut1998/markdown_pic@main/img/202209302058294.jpg" alt="p16"></p><p>也许我们还会更新[5,8]区间的值，我们除了设置lazy字段外，<strong>还需要将结果上传到他的父节点</strong>！（很显然，下面变了，上面区间包含下面也要变）</p><p><img src="https://cdn.staticaly.com/gh/fomalhaut1998/markdown_pic@main/img/202209302058158.jpg" alt="p17"></p><p><img src="https://cdn.staticaly.com/gh/fomalhaut1998/markdown_pic@main/img/202209302058400.jpg" alt="p18"></p><p><strong>更新与查询代码如下（非动态开点）：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">更新某个区间的值:idx为节点索引,[l,r]为要更新的区间,val代表要更新进去的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">// idx节点区间在要修改的[l,r]区间里面-&gt;直接更新到这里并并进行懒标记即可</span></span><br><span class="line">    <span class="keyword">if</span> (tree[idx].left &gt;= l &amp;&amp; tree[idx].right &lt;= r) &#123;</span><br><span class="line">        <span class="comment">// idx节点值 += val * idx节点区间的的节点数</span></span><br><span class="line">        <span class="comment">// 意思就是更新了idx节点的整个区间,节点值就加上相应的数</span></span><br><span class="line">        tree[idx].val += (tree[idx].right - tree[idx].left + <span class="number">1</span>) * val;</span><br><span class="line">        <span class="comment">// 对idx节点进行懒标记</span></span><br><span class="line">        tree[idx].lazy = val;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tree[idx].lazy != <span class="number">0</span>) pushDown(idx); <span class="comment">// 当前节点有懒标记-&gt;下沉懒标记</span></span><br><span class="line">    <span class="comment">// [l,r]与idx节点左区间有交集</span></span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tree[idx * <span class="number">2</span>].right) update(idx * <span class="number">2</span>, l, r, val);</span><br><span class="line">    <span class="comment">// [l,r]与idx节点右区间有交集</span></span><br><span class="line">    <span class="keyword">if</span> (r &gt;= tree[idx * <span class="number">2</span> + <span class="number">1</span>].left) update(idx * <span class="number">2</span> + <span class="number">1</span>, l, r, val);</span><br><span class="line">    <span class="comment">// 底下递归完成后向上回溯更新idx的值</span></span><br><span class="line">    pushUp(idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查询区间[l,r]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// idx节点的区间被[l,r]完全包含 -&gt; 直接返回节点值</span></span><br><span class="line">    <span class="keyword">if</span> (tree[idx].left &gt;= l &amp;&amp; tree[idx].right &lt;= r) <span class="keyword">return</span> tree[idx].val;</span><br><span class="line">    <span class="comment">// 否则就还要继续往下走更小的区间</span></span><br><span class="line">    <span class="comment">// 遇到有懒标记也要下沉(因为你现在要查询小区间的信息)</span></span><br><span class="line">    <span class="keyword">if</span> (tree[idx].lazy != <span class="number">0</span>) pushDown(idx);</span><br><span class="line">    <span class="comment">// 跟左右区间有交集</span></span><br><span class="line">    <span class="keyword">if</span> (tree[idx * <span class="number">2</span>].right &gt;= l) res += query(idx * <span class="number">2</span>, l, r);  <span class="comment">// 累加递归完成的值</span></span><br><span class="line">    <span class="keyword">if</span> (tree[idx * <span class="number">2</span> + <span class="number">1</span>].left &lt;= r) res += query(idx * <span class="number">2</span> + <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> res; <span class="comment">// 返回结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上传结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    tree[idx].val = tree[idx * <span class="number">2</span>].val + tree[idx * <span class="number">2</span> + <span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下沉懒标记</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    <span class="comment">// 向左右子节点下沉lazy(累加而不是覆盖)</span></span><br><span class="line">    tree[idx * <span class="number">2</span>].lazy += tree[idx].lazy;</span><br><span class="line">    tree[idx * <span class="number">2</span> + <span class="number">1</span>].lazy += tree[idx].lazy;</span><br><span class="line">    <span class="comment">// idx节点区间的中点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> tree[idx].left + (tree[idx].right - tree[idx].left) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 左右子节点的节点值分别加上(懒标记的值*区间节点个数)</span></span><br><span class="line">    tree[idx * <span class="number">2</span>].val += tree[idx].lazy * (mid - tree[idx].left + <span class="number">1</span>);</span><br><span class="line">    tree[idx * <span class="number">2</span> + <span class="number">1</span>].val += tree[idx].lazy * (tree[idx].right - mid);</span><br><span class="line">    <span class="comment">// 下沉了lazy后idx的懒标记置0</span></span><br><span class="line">    tree[idx].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态开点的引入：</strong></p><p>上述代码只是针对不对区间长度进行修改，只能在固定的区间内查询和修改，并且用到了4n的空间，有些空间根本没有被使用，有的题目数据规模到了1e9，如果我们开4n的空间并不可行！</p><p>于是我们需要动态地进行节点创建，即我们不用idx * 2和idx* 2 + 1来表示节点的左右子节点，而是在Node里添加leftChild和rightChild两个引用，来找到左右节点。由于我们是在更新与查询中进行动态开点，所以不需要build树！</p><p><strong>动态开点的代码如下：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fomalhaut</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 线段树(动态开点+懒标记)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SegmentTree_Dynamic</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    动态开点线段树节点类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> left, right;    <span class="comment">// 区间左右端点</span></span><br><span class="line">        <span class="type">int</span> val;    <span class="comment">// 节点的值</span></span><br><span class="line">        <span class="type">int</span> lazy;   <span class="comment">// 懒标记:0代表没有懒标记</span></span><br><span class="line">        Node leftChild, rightChild; <span class="comment">// 左右子树引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据区间[left,right]创建节点</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    动态开点的区间更新:root代表根节点,[l,r]代表更新区间,val代表更新的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Node root, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.[l,r]不在root区间的范围内 -&gt; 直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (r &lt; root.left || l &gt; root.right) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 2.[l,r]包含root区间 -&gt; 进行懒标记并更新root的值</span></span><br><span class="line">        <span class="keyword">if</span> (root.left &gt;= l &amp;&amp; root.right &lt;= r) &#123;</span><br><span class="line">            root.lazy = val;    <span class="comment">// 进行懒标记</span></span><br><span class="line">            root.val += (root.right - root.left + <span class="number">1</span>) * val; <span class="comment">// 节点值+=区间长度*val</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.继续往下走</span></span><br><span class="line">        lazyCreate(root);   <span class="comment">// 动态开点</span></span><br><span class="line">        pushDown(root); <span class="comment">// 下传lazy</span></span><br><span class="line">        update(root.leftChild, l, r, val);  <span class="comment">// 更新左子树区间</span></span><br><span class="line">        update(root.rightChild, l, r, val); <span class="comment">// 更新右子树区间</span></span><br><span class="line">        pushUp(root);   <span class="comment">// 上传结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    动态开点的查询区间[l,r]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(Node root, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="comment">// [l,r]必定在root里面,因为root是最大的可能区间</span></span><br><span class="line">        <span class="comment">// 1.root的区间在[l,r]里面 -&gt; 直接返回节点值</span></span><br><span class="line">        <span class="keyword">if</span> (root.left &gt;= l &amp;&amp; root.right &lt;= r) <span class="keyword">return</span> root.val;</span><br><span class="line">        <span class="comment">// 2.否则要往下走找到[l,r]完全包含子节点整个区间的情况</span></span><br><span class="line">        lazyCreate(root);   <span class="comment">// 动态开点</span></span><br><span class="line">        pushDown(root); <span class="comment">// 下传懒标记</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> root.left + (root.right - root.left) / <span class="number">2</span>; <span class="comment">// root区间中点</span></span><br><span class="line">        <span class="comment">// 左子树范围[ll, mid] 右子树范围[mid+1,rr]</span></span><br><span class="line">        <span class="keyword">if</span> (r &lt;= mid) &#123; <span class="comment">// [l,r]只占据到root左子树</span></span><br><span class="line">            <span class="keyword">return</span> query(root.leftChild, l, r);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) &#123;   <span class="comment">// [l,r]只占据到root右子树</span></span><br><span class="line">            <span class="keyword">return</span> query(root.rightChild, l, r);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// [l,r]占据root左子树与右子树</span></span><br><span class="line">            <span class="keyword">return</span> query(root.leftChild, l, mid) + query(root.rightChild, mid + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不用上传结果了因为查询不改变节点的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    上传结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        root.val = root.leftChild.val + root.rightChild.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    下传懒标记:有懒标记-&gt;下传懒标记并更新子节点的值;没有-&gt;结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="comment">// 当且仅当有懒标记才进行下传</span></span><br><span class="line">        <span class="keyword">if</span> (root.lazy != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 懒标记的值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> root.lazy;</span><br><span class="line">            <span class="comment">// 懒标记下沉至左右子节点</span></span><br><span class="line">            <span class="comment">// 这里懒标记累加还是覆盖可以根据具体问题进行分析</span></span><br><span class="line">            <span class="comment">// 比如说是求区间的累加值就是+= 如果是只有两个状态那种可以直接进行覆盖(LC715.Range模块)</span></span><br><span class="line">            root.leftChild.lazy += v;</span><br><span class="line">            root.rightChild.lazy += v;</span><br><span class="line">            <span class="comment">// 更新左右子节点的值</span></span><br><span class="line">            root.leftChild.val += (root.leftChild.right - root.leftChild.left + <span class="number">1</span>) * v;</span><br><span class="line">            root.rightChild.val += (root.rightChild.right - root.rightChild.left + <span class="number">1</span>) * v;</span><br><span class="line">            <span class="comment">// root取消懒标记</span></span><br><span class="line">            root.lazy = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建左右子树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazyCreate</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> root.left + (root.right - root.left) / <span class="number">2</span>; <span class="comment">// root区间中点</span></span><br><span class="line">        <span class="comment">// 创建左右子树并构建连接</span></span><br><span class="line">        <span class="keyword">if</span> (root.leftChild == <span class="literal">null</span>) root.leftChild = <span class="keyword">new</span> <span class="title class_">Node</span>(root.left, mid);</span><br><span class="line">        <span class="keyword">if</span> (root.rightChild == <span class="literal">null</span>) root.leftChild = <span class="keyword">new</span> <span class="title class_">Node</span>(mid + <span class="number">1</span>, root.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>数组表示的线段树(含懒标记+动态开点)可以参考三叶：</strong></p><p><a href="https://leetcode.cn/problems/my-calendar-i/"><strong>729. 我的日程安排表 I</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode.SegmentTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fomalhaut</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 729. 我的日程安排表 I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Q729</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MyCalendar</span> <span class="variable">myCalendar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCalendar</span>();</span><br><span class="line">        System.out.println(myCalendar.book(<span class="number">10</span>, <span class="number">20</span>));    <span class="comment">// true</span></span><br><span class="line">        System.out.println(myCalendar.book(<span class="number">15</span>, <span class="number">25</span>));    <span class="comment">// false</span></span><br><span class="line">        System.out.println(myCalendar.book(<span class="number">20</span>, <span class="number">30</span>));    <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyCalendar</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        本题是线段树的模板题之一,由于值域范围在[0,1e9]因此只能采用动态开点的方式,否则会出现MLE</span></span><br><span class="line"><span class="comment">        本题要动态地获当前区间是否完全被覆盖,可以将线段树节点值设为当前区间的节点数(叶子结点只有0与1的区间和)</span></span><br><span class="line"><span class="comment">        同时为了使查询的时间复杂度为严格的O(logN)要加入懒标记</span></span><br><span class="line"><span class="comment">        -&gt;查询[start,end)区间是否能book就相当于求[start,end-1]的区间和是否为0</span></span><br><span class="line"><span class="comment">        懒标记的线段树空间复杂度为O(MlogN),M为操作次数; 查询和更新一次时间复杂度为:O(logN)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         节点类:</span></span><br><span class="line"><span class="comment">         本节点与之前的模板不同,该节点成员没有显式地包含节点u的区间左右端点[lc,rc]</span></span><br><span class="line"><span class="comment">         区间左右端点[lc,rc]可以通过update()与query()显式地传入再进行递归计算</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">            <span class="comment">// ls 与rs 分别代表当节点的左右子节点在tr中的下标 (相当于leftChild与rightChild)</span></span><br><span class="line">            <span class="comment">// val 表示当前节点的区间和(只有0与1)</span></span><br><span class="line">            <span class="comment">// add为懒标记</span></span><br><span class="line">            <span class="type">int</span> ls, rs, add, val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span>, M = <span class="number">120010</span>, cnt = <span class="number">1</span>; <span class="comment">// N 区间范围; M 节点个数; cnt 节点索引</span></span><br><span class="line">        Node[] tr = <span class="keyword">new</span> <span class="title class_">Node</span>[M];    <span class="comment">// 数组表示的线段树</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyCalendar</span><span class="params">()</span> &#123;</span><br><span class="line">            tr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Node</span>(); <span class="comment">// 根节点u从tr[0]开始</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        更新[l,r]区间的节点,更新值为val=1</span></span><br><span class="line"><span class="comment">        u 根节点索引;lc 与 rc 代表根节点u表示的值域范围</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> lc, <span class="type">int</span> rc, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">            <span class="comment">// 节点u表示的范围[lc,rc]在[l,r]内部 -&gt; 直接更新节点值和懒标记</span></span><br><span class="line">            <span class="keyword">if</span> (lc &gt;= l &amp;&amp; rc &lt;= r) &#123;</span><br><span class="line">                tr[u].val = (rc - lc + <span class="number">1</span>) * val;</span><br><span class="line">                tr[u].add = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lazyCreate(u);  <span class="comment">// 动态开点</span></span><br><span class="line">            pushDown(u, rc - lc + <span class="number">1</span>);   <span class="comment">// 下传懒标记</span></span><br><span class="line">            <span class="comment">// 递归更新左右子节点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lc + (rc - lc) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= mid) update(tr[u].ls, lc, mid, l, r, val); <span class="comment">// [l,r]占据到左子树</span></span><br><span class="line">            <span class="keyword">if</span> (r &gt; mid) update(tr[u].rs, mid + <span class="number">1</span>, rc, l, r, val);  <span class="comment">// [l,r]占据到右子树</span></span><br><span class="line">            pushUp(u);  <span class="comment">// 回溯更新u的值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        查询[l,r]区间的节点</span></span><br><span class="line"><span class="comment">        u 根节点索引;lc 与 rc 代表根节点u表示的值域范围</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> lc, <span class="type">int</span> rc, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lc &gt;= l &amp;&amp; rc &lt;= r) <span class="keyword">return</span> tr[u].val;   <span class="comment">// u节点区间在[l,r]内</span></span><br><span class="line">            <span class="comment">// 否则继续往下走</span></span><br><span class="line">            lazyCreate(u);  <span class="comment">// 动态开点</span></span><br><span class="line">            pushDown(u, rc - lc + <span class="number">1</span>); <span class="comment">// 下传懒标记</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lc + (rc - lc) / <span class="number">2</span>, res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= mid) res = query(tr[u].ls, lc, mid, l, r); <span class="comment">// [l,r]占据到左子树</span></span><br><span class="line">            <span class="keyword">if</span> (r &gt; mid) res += query(tr[u].rs, mid + <span class="number">1</span>, rc, l, r);  <span class="comment">// [l,r]占据到右子树</span></span><br><span class="line">            <span class="keyword">return</span> res; <span class="comment">// 返回左右区间总和</span></span><br><span class="line">            <span class="comment">// 查询不更新端点的值因此不用回溯</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        向上更新u的值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">            tr[u].val = tr[tr[u].ls].val + tr[tr[u].rs].val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        下传懒标记</span></span><br><span class="line"><span class="comment">        其中 len 为节点表示的区间长度 用于简化计算区间长度</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> tr[u].add;</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="number">0</span>) &#123;   <span class="comment">// 只有懒标记不为0才下传</span></span><br><span class="line">                <span class="comment">// 1.下传懒标记</span></span><br><span class="line">                tr[tr[u].ls].add = v;</span><br><span class="line">                tr[tr[u].rs].add = v;</span><br><span class="line">                <span class="comment">// 2.更新子节点的值(不判断懒标记就要+=避免0覆盖)</span></span><br><span class="line">                tr[tr[u].ls].val = (len - len / <span class="number">2</span>) * v; <span class="comment">// 左(大)</span></span><br><span class="line">                tr[tr[u].rs].val = (len / <span class="number">2</span>) * v;   <span class="comment">// 右(小)</span></span><br><span class="line">                <span class="comment">// 3.懒标记下传完置0</span></span><br><span class="line">                tr[u].add = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        动态开点:动按需态创建左右子节点并构建连接</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazyCreate</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (tr[u].ls == <span class="number">0</span>) &#123;    <span class="comment">// 当且仅当左子节点没有时才进行开点(tr[u].ls为0表示还没开左子节点)</span></span><br><span class="line">                tr[u].ls = cnt++;   <span class="comment">// 构建与tr[u]的连接,索引依次取</span></span><br><span class="line">                tr[tr[u].ls] = <span class="keyword">new</span> <span class="title class_">Node</span>();  <span class="comment">// 开点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tr[u].rs == <span class="number">0</span>) &#123;</span><br><span class="line">                tr[u].rs = cnt++;</span><br><span class="line">                tr[tr[u].rs] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">book</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">            <span class="comment">// 区间[start,end-1]已经有东西填充过了-&gt;不能book</span></span><br><span class="line">            <span class="keyword">if</span> (query(<span class="number">0</span>, <span class="number">0</span>, N, start, end - <span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则更新并返回true</span></span><br><span class="line">            update(<span class="number">0</span>, <span class="number">0</span>, N, start, end - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/my-calendar-ii/solution/by-ac_oier-okkc/"><strong>731. 我的日程安排表 II</strong></a><strong>(注意节点维护的是最大值)</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode.SegmentTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fomalhaut</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 731. 我的日程安排表 II</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Q731</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MyCalendarTwo</span> <span class="variable">MyCalendar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCalendarTwo</span>();</span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">10</span>, <span class="number">20</span>));    <span class="comment">// true</span></span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">50</span>, <span class="number">60</span>));    <span class="comment">// true</span></span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">10</span>, <span class="number">40</span>));    <span class="comment">// true</span></span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">5</span>, <span class="number">15</span>));     <span class="comment">// false</span></span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">5</span>, <span class="number">10</span>));     <span class="comment">// true</span></span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">25</span>, <span class="number">55</span>));    <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyCalendarTwo</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这题也可以用线段树进行求解:start与end的范围为[0,1e9]</span></span><br><span class="line"><span class="comment">        不过相比于Q729 我的日程安排表I 这里要维护的val为区间的最大值max</span></span><br><span class="line"><span class="comment">        当区间的最大值&gt;=2就说明已经有两个重叠的预订,第3个预订就不能book了</span></span><br><span class="line"><span class="comment">        查询和更新一次时间复杂度为:O(logN) 空间复杂度为O(MlogN),M为操作次数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        节点类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">            <span class="type">int</span> ls, rs, add, max;   <span class="comment">// ls, rs 为左右子节点在tr中索引(触手); add 懒标记; max 维护区间最大值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span>, M = <span class="number">120010</span>, cnt = <span class="number">1</span>; <span class="comment">// N 区间范围; M 节点个数; cnt 节点在tr中的索引</span></span><br><span class="line">        Node[] tr = <span class="keyword">new</span> <span class="title class_">Node</span>[M];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyCalendarTwo</span><span class="params">()</span> &#123;</span><br><span class="line">            tr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Node</span>(); <span class="comment">// 创建根节点</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        更新区间[l,r] 值为val</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> lc, <span class="type">int</span> rc, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">            <span class="comment">// [l,r]在u表示的区间内</span></span><br><span class="line">            <span class="keyword">if</span> (lc &gt;= l &amp;&amp; rc &lt;= r) &#123;</span><br><span class="line">                tr[u].add += val;   <span class="comment">// 懒标记要累计(例如覆盖了2次)</span></span><br><span class="line">                <span class="comment">// 最大值是max(curVal,curVal+val)=curVal+val -&gt; max += val;</span></span><br><span class="line">                tr[u].max += val;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// 结束</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// [l,r]不在u内</span></span><br><span class="line">            lazyCreate(u);  <span class="comment">// 动态开点</span></span><br><span class="line">            pushDown(u);    <span class="comment">// 下传懒标记</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lc + (rc - lc) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= mid) update(tr[u].ls, lc, mid, l, r, val); <span class="comment">// 占据到左子树</span></span><br><span class="line">            <span class="keyword">if</span> (r &gt; mid) update(tr[u].rs, mid + <span class="number">1</span>, rc, l, r, val);  <span class="comment">// 占据到右子树</span></span><br><span class="line">            pushUp(u);  <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">       查询区间[l,r]的最大值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> lc, <span class="type">int</span> rc, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lc &gt;= l &amp;&amp; rc &lt;= r) <span class="keyword">return</span> tr[u].max;</span><br><span class="line">            lazyCreate(u);  <span class="comment">// 冬天开点</span></span><br><span class="line">            pushDown(u);    <span class="comment">// 下传懒标记</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lc + (rc - lc) / <span class="number">2</span>, res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= mid) res = query(tr[u].ls, lc, mid, l, r);</span><br><span class="line">            <span class="keyword">if</span> (r &gt; mid) res = Math.max(res, query(tr[u].rs, mid + <span class="number">1</span>, rc, l, r));   <span class="comment">// 记得取左右子节点的最大值</span></span><br><span class="line">            <span class="keyword">return</span> res; <span class="comment">// 返回最大值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        按需动态开点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazyCreate</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (tr[u].ls == <span class="number">0</span>) &#123;    <span class="comment">// 左子节点不存在 -&gt; 创建并构建连接</span></span><br><span class="line">                tr[u].ls = cnt++;</span><br><span class="line">                tr[tr[u].ls] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tr[u].rs == <span class="number">0</span>) &#123;</span><br><span class="line">                tr[u].rs = cnt++;</span><br><span class="line">                tr[tr[u].rs] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        下传懒标记</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> tr[u].add;  <span class="comment">// 节点u下传下来的懒标记</span></span><br><span class="line">            <span class="keyword">if</span> (v != <span class="number">0</span>) &#123;   <span class="comment">// 当且仅当懒标记不为0才进行下传</span></span><br><span class="line">                <span class="comment">// 下传懒标记至子节点(累计)</span></span><br><span class="line">                tr[tr[u].ls].add += v;</span><br><span class="line">                tr[tr[u].rs].add += v;</span><br><span class="line">                <span class="comment">// 更新左右子节点的值(累计)</span></span><br><span class="line">                tr[tr[u].ls].max += v;</span><br><span class="line">                tr[tr[u].rs].max += v;</span><br><span class="line">                tr[u].add = <span class="number">0</span>;  <span class="comment">// 下传懒标记完成撤销u的懒标记</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        回溯更新u的最大值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">            tr[u].max = Math.max(tr[tr[u].ls].max, tr[tr[u].rs].max);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">book</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">            <span class="comment">// 最大值&gt;=2说明区间[start,end-1]存在某个点覆盖了2次</span></span><br><span class="line">            <span class="keyword">if</span> (query(<span class="number">0</span>, <span class="number">0</span>, N, start, end - <span class="number">1</span>) &gt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            update(<span class="number">0</span>, <span class="number">0</span>, N, start, end - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做完这两题估计对线段树有了充分了解了！</p><h3 id="3-差分数组-「区间修改-单点查询」：">3.差分数组-&gt;「区间修改 &amp; 单点查询」：</h3><p>差分区间求和:将每个区间覆盖信息转化为<strong>变化量</strong>记录,最后<strong>从头开始统计变化量</strong>就可以将总的变化量求出来</p><p>比喻成公交车:上车就表示该时刻t1-&gt;新区间加入乘客+1；下车就表示区间结束-&gt;下一个时刻(t2+1)乘客-1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] corpFlightBookings(<span class="type">int</span>[][] bookings, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="comment">//  注意航班编号为1-n</span></span><br><span class="line">        <span class="comment">// 变化量计数器:索引[0,n-1]</span></span><br><span class="line">        <span class="type">int</span>[] counter = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="comment">// 遍历每个区间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] booking : bookings) &#123;</span><br><span class="line">            <span class="comment">// 因为航班编号为1-n,因此左偏移一位才是counter索引</span></span><br><span class="line">            counter[booking[<span class="number">0</span>] - <span class="number">1</span>] += booking[<span class="number">2</span>];</span><br><span class="line">            <span class="comment">// 这里原本有+1又向左偏移一位就是原本的,要判断区间是否合法</span></span><br><span class="line">            <span class="keyword">if</span>(booking[<span class="number">1</span>] &lt; n) counter[booking[<span class="number">1</span>]] -= booking[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 该站人数=上一站人数+该站变化量</span></span><br><span class="line">        <span class="comment">// 注意最初的一站就是0+counter[0]=counter[0]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            counter[i] += counter[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> counter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">区间求和的问题能涉及的方法有很多，包括前缀和、树状数组、差分数组等，降低时间复杂度是要义！</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="树状数组" scheme="https://www.fomal.cc/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="线段树" scheme="https://www.fomal.cc/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="差分" scheme="https://www.fomal.cc/tags/%E5%B7%AE%E5%88%86/"/>
    
    <category term="前缀和" scheme="https://www.fomal.cc/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
</feed>
